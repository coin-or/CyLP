/* Generated by Cython 0.17.4 on Tue Jun 18 00:24:13 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__CyLP__cy__CyClpSimplex
#define __PYX_HAVE_API__CyLP__cy__CyClpSimplex
#include "stdio.h"
#include "pythread.h"
#include "ICoinIndexedVector.hpp"
#include "ClpPrimalColumnPivot.hpp"
#include "ClpFactorization.hpp"
#include "IClpPrimalColumnPivotBase.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "ClpDualRowPivot.hpp"
#include "IClpDualRowPivotBase.h"
#include "CoinModel.hpp"
#include "ICoinPackedMatrix.hpp"
#include "CglAllDifferent.hpp"
#include "CglClique.hpp"
#include "CglKnapsackCover.hpp"
#include "CglOddHole.hpp"
#include "CglFlowCover.hpp"
#include "CglGomory.hpp"
#include "CglRedSplit.hpp"
#include "CglLiftAndProject.hpp"
#include "CglLandP.hpp"
#include "CglMixedIntegerRounding.hpp"
#include "CglMixedIntegerRounding2.hpp"
#include "CglTwomir.hpp"
#include "CglResidualCapacity.hpp"
#include "CglPreProcess.hpp"
#include "CglProbing.hpp"
#include "CglSimpleRounding.hpp"
#include "CglCutGenerator.hpp"
#include "ICbcNode.hpp"
#include "CbcCompareUser.hpp"
#include "ICbcModel.hpp"
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "IClpSimplex.hpp"
#include "ICoinMpsIO.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "CyClpSimplex.pyx",
  "numpy.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "CyCoinIndexedVector.pxd",
  "CyClpPrimalColumnPivotBase.pxd",
  "CyClpDualRowPivotBase.pxd",
  "CyCoinModel.pxd",
  "CyCoinPackedMatrix.pxd",
  "CyCgl.pxd",
  "CyCbcNode.pxd",
  "CyCbcModel.pxd",
  "CyWolfePivot.pxd",
  "CyPEPivot.pxd",
  "CyPivotPythonBase.pxd",
  "CyDualPivotPythonBase.pxd",
  "CyCoinMpsIO.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  size_t arraysize[8]; /* length of array in each dimension */
  int ndim;
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject, c_H_ar */
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "numpy.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "numpy.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "numpy.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "numpy.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "numpy.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "numpy.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "numpy.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "numpy.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "numpy.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "numpy.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "numpy.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "numpy.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "numpy.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "numpy.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "numpy.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "numpy.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "numpy.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "numpy.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "numpy.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "numpy.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "numpy.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLandP;
struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglRedSplit;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglOddHole;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglTwomir;
struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglSimpleRounding;
struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglProbing;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglClique;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglFlowCover;
struct __pyx_obj_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO;
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglResidualCapacity;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglPreProcess;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglAllDifferent;
struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase;
struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory;
struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode;
struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot;
struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot;
struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix;
struct __pyx_obj_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase;
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_VarStatus;
struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLiftAndProject;

/* "numpy.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "numpy.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "numpy.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "numpy.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_4CyLP_2cy_10CyCbcModel_10CyCbcModel_addCutGenerator;

/* "CyLP/cy/CyCbcModel.pxd":71
 *     cdef setCppSelf(self, CppICbcModel* cppmodel)
 *     cdef setClpModel(self, clpmodel)
 *     cpdef addCutGenerator(self, CyCglCutGenerator generator,             # <<<<<<<<<<<<<<
 *                         howOften=*, name=*, normal=*, atSolution=*,
 *                         infeasible=*, howOftenInSub=*, whatDepth=*,
 */
struct __pyx_opt_args_4CyLP_2cy_10CyCbcModel_10CyCbcModel_addCutGenerator {
  int __pyx_n;
  PyObject *howOften;
  PyObject *name;
  PyObject *normal;
  PyObject *atSolution;
  PyObject *infeasible;
  PyObject *howOftenInSub;
  PyObject *whatDepth;
  PyObject *whatDepthInSub;
};
struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps;

/* "CyLP/cy/CyClpSimplex.pxd":280
 *     #cdef object isPivotAcceptable_func
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=*,             # <<<<<<<<<<<<<<
 *                       int ignoreErrors=*)
 * 
 */
struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps {
  int __pyx_n;
  int keepNames;
  int ignoreErrors;
};

/* "CyLP/cy/CyCgl.pxd":103
 * 
 * 
 * cdef class CyCglCutGenerator:             # <<<<<<<<<<<<<<
 *     cdef CppCglCutGenerator* CppSelf
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator {
  PyObject_HEAD
  CglCutGenerator *CppSelf;
};


/* "CyLP/cy/CyCgl.pxd":140
 *     pass
 * 
 * cdef class CyCglLandP(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLandP {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCoinModel.pxd":34
 * 
 * 
 * cdef class CyCoinModel:             # <<<<<<<<<<<<<<
 *     cdef CppCoinModel* CppSelf
 * 
 */
struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_vtab;
  CoinModel *CppSelf;
};


/* "CyLP/cy/CyCgl.pxd":145
 * ###################
 * 
 * cdef class CyCglMixedIntegerRounding(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":132
 *     #cdef CppCglCutGenerator* CppSelf
 * 
 * cdef class CyCglRedSplit(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglRedSplit {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":117
 *     cdef CppCglKnapsackCover* realCppSelf(self)
 * 
 * cdef class CyCglOddHole(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglOddHole {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":151
 *     pass
 * 
 * cdef class CyCglTwomir(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglTwomir {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCoinIndexedVector.pxd":22
 * 
 * 
 * cdef class CyCoinIndexedVector:             # <<<<<<<<<<<<<<
 *     cpdef CppCoinIndexedVector *CppSelf
 *     cpdef reserve(self, n)
 */
struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_vtab;
  ICoinIndexedVector *CppSelf;
};


/* "CyLP/cy/CyCgl.pxd":168
 *     pass
 * 
 * cdef class CyCglSimpleRounding(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglSimpleRounding {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyClpDualRowPivotBase.pxd":72
 * 
 * 
 * cdef class CyClpDualRowPivotBase:             # <<<<<<<<<<<<<<
 *     cdef CppClpDualRowPivotBase* CppSelf
 *     cdef CyClpSimplex.CyClpSimplex cyModel
 */
struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *__pyx_vtab;
  CppClpDualRowPivotBase *CppSelf;
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *cyModel;
};


/* "CyLP/cy/CyCgl.pxd":165
 *     pass
 * 
 * cdef class CyCglProbing(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglProbing {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":111
 *     pass
 * 
 * cdef class CyCglClique(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglClique {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":122
 * ##################
 * 
 * cdef class CyCglFlowCover(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglFlowCover {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyCoinMpsIO.pxd":46
 * 
 * 
 * cdef class CyCoinMpsIO:             # <<<<<<<<<<<<<<
 *     cdef CppICoinMpsIO *CppSelf
 *     cpdef Hessian
 */
struct __pyx_obj_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO {
  PyObject_HEAD
  ICoinMpsIO *CppSelf;
  PyObject *Hessian;
};


/* "CyLP/cy/CyClpSimplex.pxd":257
 *         int logLevel()
 * 
 * cdef class CyClpSimplex:             # <<<<<<<<<<<<<<
 *     '''
 *     This is the documentation of CyClpSimpelx in the pyx class
 */
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_vtab;
  IClpSimplex *CppSelf;
  PyObject *vars;
  PyObject *varSelCriteria;
  struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *coinModel;
  PyObject *cyLPModel;
  PyObject *Hessian;
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *cyPivot;
  struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *cyDualPivot;
};


/* "CyLP/cy/CyCgl.pxd":154
 *     pass
 * 
 * cdef class CyCglResidualCapacity(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglResidualCapacity {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":162
 * #    pass
 * 
 * cdef class CyCglPreProcess(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglPreProcess {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":108
 * ###########
 * 
 * cdef class CyCglAllDifferent(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglAllDifferent {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyClpPrimalColumnPivotBase.pxd":64
 * 
 * 
 * cdef class CyClpPrimalColumnPivotBase:             # <<<<<<<<<<<<<<
 *     cdef CppClpPrimalColumnPivotBase* CppSelf
 *     cdef CyClpSimplex.CyClpSimplex cyModel
 */
struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *__pyx_vtab;
  CppClpPrimalColumnPivotBase *CppSelf;
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *cyModel;
};


/* "CyPivotPythonBase.pxd":6
 * from CyLP.cy.CyCoinIndexedVector cimport CyCoinIndexedVector
 * 
 * cdef class CyPivotPythonBase(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 * 	cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */
struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase {
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
  PyObject *pivotMethodObject;
};


/* "CyLP/cy/CyCgl.pxd":127
 * ##################
 * 
 * cdef class CyCglGomory(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglGomory* realCppSelf(self)
 *     #cdef CppCglGomory* CppSelf
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
  struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory *__pyx_vtab;
};


/* "CyLP/cy/CyCbcNode.pxd":13
 *         bint breakTie(CppICbcNode* y)
 * 
 * cdef class CyCbcNode:             # <<<<<<<<<<<<<<
 *     cdef CppICbcNode* CppSelf
 *     cdef setCppSelf(self, CppICbcNode* cbcnode)
 */
struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode *__pyx_vtab;
  ICbcNode *CppSelf;
};


/* "CyWolfePivot.pxd":6
 * 
 * 
 * cdef class CyWolfePivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */
struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot {
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};


/* "CyPEPivot.pxd":7
 * 
 * 
 * cdef class CyPEPivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */
struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot {
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};


/* "CyLP/cy/CyCoinPackedMatrix.pxd":22
 * 
 * 
 * cdef class CyCoinPackedMatrix:             # <<<<<<<<<<<<<<
 *     cpdef CppCoinPackedMatrix* CppSelf
 *     #cpdef getIndices(self)
 */
struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix {
  PyObject_HEAD
  ICoinPackedMatrix *CppSelf;
};


/* "CyDualPivotPythonBase.pxd":9
 * 
 * 
 * cdef class CyDualPivotPythonBase(CyClpDualRowPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotRow(self)
 *     cdef CyClpDualRowPivot * clone(self, bint copyData)
 */
struct __pyx_obj_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase {
  struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase __pyx_base;
  PyObject *dualPivotMethodObject;
};


/* "CyLP/cy/CyClpSimplex.pxd":331
 *     cpdef setConstraintName(self, constInd, name)
 * 
 * cdef class VarStatus:             # <<<<<<<<<<<<<<
 *     pass
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2)
 */
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_VarStatus {
  PyObject_HEAD
};


/* "CyLP/cy/CyCbcModel.pxd":65
 *         int logLevel()
 * 
 * cdef class CyCbcModel:             # <<<<<<<<<<<<<<
 *     cdef CppICbcModel* CppSelf
 *     cdef object cyLPModel
 */
struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *__pyx_vtab;
  ICbcModel *CppSelf;
  PyObject *cyLPModel;
  PyObject *clpModel;
};


/* "CyLP/cy/CyCgl.pxd":114
 *     pass
 * 
 * cdef class CyCglKnapsackCover(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglKnapsackCover* realCppSelf(self)
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
  struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover *__pyx_vtab;
};


/* "CyLP/cy/CyCgl.pxd":148
 *     pass
 * 
 * cdef class CyCglMixedIntegerRounding2(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2 {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":137
 * ###################
 * 
 * cdef class CyCglLiftAndProject(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLiftAndProject {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};



/* "CyLP/cy/CyClpPrimalColumnPivotBase.pxd":64
 * 
 * 
 * cdef class CyClpPrimalColumnPivotBase:             # <<<<<<<<<<<<<<
 *     cdef CppClpPrimalColumnPivotBase* CppSelf
 *     cdef CyClpSimplex.CyClpSimplex cyModel
 */

struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase {
  PyObject *(*pivotColumn)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *);
  ClpPrimalColumnPivot *(*clone)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, int);
  void (*saveWeights)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, IClpSimplex *, int);
  IClpSimplex *(*model)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *);
  void (*setModel)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, IClpSimplex *);
  double *(*getReducedCosts)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *__pyx_vtabptr_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase;


/* "CyPEPivot.pxd":7
 * 
 * 
 * cdef class CyPEPivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */

struct __pyx_vtabstruct_4CyLP_2cy_9CyPEPivot_CyPEPivot {
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};
static struct __pyx_vtabstruct_4CyLP_2cy_9CyPEPivot_CyPEPivot *__pyx_vtabptr_4CyLP_2cy_9CyPEPivot_CyPEPivot;


/* "CyLP/cy/CyClpDualRowPivotBase.pxd":72
 * 
 * 
 * cdef class CyClpDualRowPivotBase:             # <<<<<<<<<<<<<<
 *     cdef CppClpDualRowPivotBase* CppSelf
 *     cdef CyClpSimplex.CyClpSimplex cyModel
 */

struct __pyx_vtabstruct_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase {
  PyObject *(*pivotRow)(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *);
  ClpDualRowPivot *(*clone)(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *, int);
  double (*updateWeights)(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *);
  void (*updatePrimalSolution)(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *, ICoinIndexedVector *, double, PyArrayObject *);
  IClpSimplex *(*model)(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *);
  void (*setModel)(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *, IClpSimplex *);
  double *(*getReducedCosts)(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *__pyx_vtabptr_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase;


/* "CyLP/cy/CyCgl.pxd":114
 *     pass
 * 
 * cdef class CyCglKnapsackCover(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglKnapsackCover* realCppSelf(self)
 * 
 */

struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover {
  CglKnapsackCover *(*realCppSelf)(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover *__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglKnapsackCover;


/* "CyWolfePivot.pxd":6
 * 
 * 
 * cdef class CyWolfePivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */

struct __pyx_vtabstruct_4CyLP_2cy_12CyWolfePivot_CyWolfePivot {
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};
static struct __pyx_vtabstruct_4CyLP_2cy_12CyWolfePivot_CyWolfePivot *__pyx_vtabptr_4CyLP_2cy_12CyWolfePivot_CyWolfePivot;


/* "CyLP/cy/CyCoinModel.pxd":34
 * 
 * 
 * cdef class CyCoinModel:             # <<<<<<<<<<<<<<
 *     cdef CppCoinModel* CppSelf
 * 
 */

struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel {
  void (*CLP_addColumn)(struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *, int, int *, double *, double, double, double);
  void (*CLP_addRow)(struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *, int, int *, double *, double, double);
};
static struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_vtabptr_4CyLP_2cy_11CyCoinModel_CyCoinModel;


/* "CyLP/cy/CyCbcModel.pxd":65
 *         int logLevel()
 * 
 * cdef class CyCbcModel:             # <<<<<<<<<<<<<<
 *     cdef CppICbcModel* CppSelf
 *     cdef object cyLPModel
 */

struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel {
  PyObject *(*setCppSelf)(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *, ICbcModel *);
  PyObject *(*setClpModel)(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *, PyObject *);
  PyObject *(*addCutGenerator)(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *, struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator *, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_10CyCbcModel_10CyCbcModel_addCutGenerator *__pyx_optional_args);
};
static struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *__pyx_vtabptr_4CyLP_2cy_10CyCbcModel_CyCbcModel;


/* "CyPivotPythonBase.pxd":6
 * from CyLP.cy.CyCoinIndexedVector cimport CyCoinIndexedVector
 * 
 * cdef class CyPivotPythonBase(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 * 	cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */

struct __pyx_vtabstruct_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase {
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};
static struct __pyx_vtabstruct_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *__pyx_vtabptr_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase;


/* "CyDualPivotPythonBase.pxd":9
 * 
 * 
 * cdef class CyDualPivotPythonBase(CyClpDualRowPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotRow(self)
 *     cdef CyClpDualRowPivot * clone(self, bint copyData)
 */

struct __pyx_vtabstruct_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase {
  struct __pyx_vtabstruct_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase __pyx_base;
};
static struct __pyx_vtabstruct_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase *__pyx_vtabptr_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase;


/* "CyLP/cy/CyCbcNode.pxd":13
 *         bint breakTie(CppICbcNode* y)
 * 
 * cdef class CyCbcNode:             # <<<<<<<<<<<<<<
 *     cdef CppICbcNode* CppSelf
 *     cdef setCppSelf(self, CppICbcNode* cbcnode)
 */

struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode {
  PyObject *(*setCppSelf)(struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode *, ICbcNode *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode *__pyx_vtabptr_4CyLP_2cy_9CyCbcNode_CyCbcNode;


/* "CyLP/cy/CyClpSimplex.pyx":42
 *                       's' : 4} #skip initialization of work areas
 * 
 * cdef class CyClpSimplex:             # <<<<<<<<<<<<<<
 *     '''
 *     CyClpSimplex is a Cython interface to CLP.
 */

struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex {
  PyObject *(*setCppSelf)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, IClpSimplex *);
  int (*readMps)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, char *, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps *__pyx_optional_args);
  PyObject *(*setPrimalColumnPivotAlgorithm)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, void *);
  PyObject *(*setDualRowPivotAlgorithm)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, void *);
  double *(*primalColumnSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*dualColumnSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*primalRowSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*dualRowSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*rowLower)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*rowUpper)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  PyObject *(*getReducedCosts)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*getStatusArray)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*getComplementarityList)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*getPivotVariable)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*filterVars)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*CLP_getVarStatus)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, int __pyx_skip_dispatch);
  PyObject *(*CLP_setVarStatus)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, int, int __pyx_skip_dispatch);
  PyObject *(*primalRow)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, int);
  PyObject *(*getACol)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch);
  int *(*ComplementarityList)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  int *(*pivotVariable)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  PyObject *(*vectorTimesB_1)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch);
  PyObject *(*setVariableName)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*setConstraintName)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;


/* "CyLP/cy/CyCoinIndexedVector.pxd":22
 * 
 * 
 * cdef class CyCoinIndexedVector:             # <<<<<<<<<<<<<<
 *     cpdef CppCoinIndexedVector *CppSelf
 *     cpdef reserve(self, n)
 */

struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector {
  PyObject *(*reserve)(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*assign)(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*setCppSelf)(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, ICoinIndexedVector *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_vtabptr_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector;


/* "CyLP/cy/CyCgl.pxd":127
 * ##################
 * 
 * cdef class CyCglGomory(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglGomory* realCppSelf(self)
 *     #cdef CppCglGomory* CppSelf
 */

struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory {
  CglGomory *(*realCppSelf)(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory *__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglGomory;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL Py_DECREF(__pyx_frame)
  #endif
  #define __Pyx_TraceDeclarations                                  \
  static PyCodeObject *__pyx_frame_code = NULL;                      \
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;           \
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)                            \
  if (unlikely(PyThreadState_GET()->use_tracing && PyThreadState_GET()->c_profilefunc)) {      \
      __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);  \
  }
  #define __Pyx_TraceException()                                                           \
  if (unlikely(__Pyx_use_tracing( && PyThreadState_GET()->use_tracing && PyThreadState_GET()->c_profilefunc) {  \
      PyObject *exc_info = __Pyx_GetExceptionTuple();                                      \
      if (exc_info) {                                                                      \
          PyThreadState_GET()->c_profilefunc(                                              \
              PyThreadState_GET()->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);  \
          Py_DECREF(exc_info);                                                             \
      }                                                                                    \
  }
  #define __Pyx_TraceReturn(result)                                                  \
  if (unlikely(__Pyx_use_tracing) && PyThreadState_GET()->use_tracing && PyThreadState_GET()->c_profilefunc) {  \
      PyThreadState_GET()->c_profilefunc(                                            \
          PyThreadState_GET()->c_profileobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result);     \
      CYTHON_FRAME_DEL;                                                               \
  }
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno); /*proto*/
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno); /*proto*/
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result)
#endif /* CYTHON_PROFILE */

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (PyList_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {  /* inlined PySequence_GetItem() */
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (unlikely(l < 0)) return NULL;
                i += l;
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'CyLP.cy' */

/* Module declarations from 'CyLP.cy.CyCoinIndexedVector' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector = 0;

/* Module declarations from 'CyLP.cy.CyClpPrimalColumnPivotBase' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'CyLP.cy.CyClpDualRowPivotBase' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase = 0;

/* Module declarations from 'CyLP.cy.CyCoinModel' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel = 0;

/* Module declarations from 'CyLP.cy.CyCoinPackedMatrix' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix = 0;

/* Module declarations from 'CyLP.cy.CyCgl' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglCutGenerator = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglAllDifferent = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglClique = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglOddHole = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglFlowCover = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglRedSplit = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLiftAndProject = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLandP = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2 = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglTwomir = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglResidualCapacity = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglPreProcess = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglProbing = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglSimpleRounding = 0;

/* Module declarations from 'CyLP.cy.CyCbcNode' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode = 0;

/* Module declarations from 'CyLP.cy.CyCbcModel' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'CyLP.cy.CyWolfePivot' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot = 0;

/* Module declarations from 'CyLP.cy.CyPEPivot' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot = 0;

/* Module declarations from 'CyLP.cy.CyPivotPythonBase' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase = 0;

/* Module declarations from 'CyLP.cy.CyDualPivotPythonBase' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase = 0;

/* Module declarations from 'CyLP.cy.CyCoinMpsIO' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO = 0;

/* Module declarations from 'CyLP.cy.CyClpSimplex' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus = 0;
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_cydot(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunIsPivotAcceptable(void *); /*proto*/
static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunVarSelCriteria(void *, int); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t = { "uint8_t", NULL, sizeof(__pyx_t_5numpy_uint8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_uint8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_uint8_t), 0 };
#define __Pyx_MODULE_NAME "CyLP.cy.CyClpSimplex"
int __pyx_module_is_main_CyLP__cy__CyClpSimplex = 0;

/* Implementation of 'CyLP.cy.CyClpSimplex' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex___cinit__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cyLPModel); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14basicVariables___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3rhs___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12basisInverse___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7tableau___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective___set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_2__get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10coefMatrix___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4cost___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rc); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getReducedCosts(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5lower___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5upper___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_mat); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15maxNumIteration___set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6getRightHandSide(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8getStatusCode(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10getStatusString(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12setColumnLower(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14setColumnUpper(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setRowLower(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setRowUpper(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20useCustomPrimal(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_customPrimal); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getUseCustomPrimal(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24flagged(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setFlagged(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28largestDualError(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30pivotRow(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32setPivotRow(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34sequenceIn(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36setSequenceIn(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVariableNames(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40setVariableName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42setConstraintName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_constInd, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44getPivotVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46CLP_getVarStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48CLP_setVarStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_sequence, int __pyx_v_status); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50setVariableStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52getVariableStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54setConstraintStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56getConstraintStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58setColumnUpperArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_columnUpper); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60setColumnLowerArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_columnLower); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setRowUpperArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rowUpper); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setRowLowerArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rowLower); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_objective); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68initialSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70initialPrimalSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72initialDualSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74__iadd__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cons); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76addConstraint(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cons, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_78removeConstraint(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_80addVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varname, PyObject *__pyx_v_dim, PyObject *__pyx_v_isInt); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_82removeVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_84getVarByName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_86getVarNameByIndex(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_88CLP_addConstraint(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_numberInRow, PyArrayObject *__pyx_v_columns, PyArrayObject *__pyx_v_elements, PyObject *__pyx_v_rowLower, PyObject *__pyx_v_rowUpper); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_90CLP_deleteConstraints(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_which); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_92CLP_deleteVariables(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_which); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_94CLP_addVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_numberInColumn, PyArrayObject *__pyx_v_rows, PyArrayObject *__pyx_v_elements, PyObject *__pyx_v_columnLower, PyObject *__pyx_v_columnUpper, PyObject *__pyx_v_objective); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_96addVariables(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_number, PyArrayObject *__pyx_v_columnLower, PyArrayObject *__pyx_v_columnUpper, PyArrayObject *__pyx_v_objective, PyArrayObject *__pyx_v_columnStarts, PyArrayObject *__pyx_v_rows, PyArrayObject *__pyx_v_elements); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_98addConstraints(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_number, PyArrayObject *__pyx_v_rowLower, PyArrayObject *__pyx_v_rowUpper, PyArrayObject *__pyx_v_rowStarts, PyArrayObject *__pyx_v_columns, PyArrayObject *__pyx_v_elements); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_100readMps(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, char *__pyx_v_filename, int __pyx_v_keepNames, int __pyx_v_ignoreErrors); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_102extractCyLPModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_fileName, PyObject *__pyx_v_keepNames, PyObject *__pyx_v_ignoreErrors); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_104_extractStartFinish(CYTHON_UNUSED struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_startFinishOptions); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_106primal(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ifValuesPass, PyObject *__pyx_v_startFinishOptions); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_108dual(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ifValuesPass, PyObject *__pyx_v_startFinishOptions); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_110setPerturbation(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_112resize(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_newNumberRows, PyObject *__pyx_v_newNumberColumns); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_114getBInvACol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_col, PyArrayObject *__pyx_v_cl); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_116getBInvCol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_col, PyArrayObject *__pyx_v_cl); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_118transposeTimes(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_scalar, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_x, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_y, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_z); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_120transposeTimesSubset(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_number, PyArrayObject *__pyx_v_which, PyArrayObject *__pyx_v_pi, PyArrayObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_122transposeTimesSubsetAll(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_which, PyArrayObject *__pyx_v_pi, PyArrayObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_124setInteger(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_126copyInIntegerInformation(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_colType); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_128replaceMatrix(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix, PyObject *__pyx_v_deleteCurrent); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_130loadQuadraticObjective(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_132preSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_feasibilityTolerance, PyObject *__pyx_v_keepIntegers, PyObject *__pyx_v_numberPasses, PyObject *__pyx_v_dropNames, PyObject *__pyx_v_doRowObjective); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_134writeMps(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_formatType, PyObject *__pyx_v_numberAcross, PyObject *__pyx_v_objSense); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_136updateColumnFT(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_spare, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_updatedColumn); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_138updateColumnTranspose(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_regionSparse1, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_regionSparse2); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_140loadFromCyLPModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cyLPModel); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_142getCbcModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_144isPivotAcceptable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_146checkVar(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_148setPrimalColumnPivotAlgorithmToWolfe(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_150setPrimalColumnPivotAlgorithmToPE(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_152setPivotMethod(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_pivotMethodObject); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_154setDualPivotMethod(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_dualPivotMethodObject); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_156filterVars(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_inds); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_158setObjectiveCoefficient(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_elementIndex, PyObject *__pyx_v_elementValue); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_160partialPricing(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyArrayObject *__pyx_v_numberWanted); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_162setComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_cl); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_164getACol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_ncol, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_colArray); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_166vectorTimesB_1(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_vec); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_168argWeightedMax(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_arr_ind, PyObject *__pyx_v_w, PyObject *__pyx_v_w_ind); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_170getComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_172setComplement(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_var1, PyObject *__pyx_v_var2); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_174loadProblemFromCyCoinModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_v_modelObject, int __pyx_v_tryPlusMinusOne); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_176loadProblem(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix, PyArrayObject *__pyx_v_collb, PyArrayObject *__pyx_v_colub, PyArrayObject *__pyx_v_obj, PyArrayObject *__pyx_v_rowlb, PyArrayObject *__pyx_v_rowub, PyArrayObject *__pyx_v_rowObjective); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_178getCoinInfinity(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_180setBasisStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_cstat, PyArrayObject *__pyx_v_rstat); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_182getBasisStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_getModelExample(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_2cydot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v1, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v2); /* proto */
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_4getMpsExample(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_1[] = "Expected a CyLPModel as an argument to CyLPSimplex constructor. Got %s";
static char __pyx_k_4[] = "setObjectiveCoefficient";
static char __pyx_k_5[] = "To set the objective function of CyClpSimplex set CyLPSimplex.cyLPModel first.";
static char __pyx_k_7[] = "No CyClpSimplex cyLPModel.";
static char __pyx_k_10[] = "Hessian can be set to a matrix that implements *tocoo* method";
static char __pyx_k_12[] = "loadQuadraticObjective";
static char __pyx_k_13[] = "CLP_variableStatusEnum";
static char __pyx_k_14[] = "The argument of setVarStatus can be a CyLPVar only if the object is built using a CyLPModel.";
static char __pyx_k_16[] = "No such variable: %s";
static char __pyx_k_17[] = "The argument of getVarStatus can be a CyLPVar only if the object is built using a CyLPModel.";
static char __pyx_k_20[] = "No such constraint: %s";
static char __pyx_k_22[] = "";
static char __pyx_k_23[] = "To add a constraint you must set CyLPSimplex.cyLPModel first.";
static char __pyx_k_25[] = "CLP_deleteConstraints";
static char __pyx_k_26[] = "To remove a constraint you must set CyLPSimplex.cyLPModel first.";
static char __pyx_k_29[] = "To remove a variable you must set CyLPSimplex.cyLPModel first.";
static char __pyx_k_31[] = "No CyLPSimplex.cyLPModel is set.";
static char __pyx_k_34[] = "CyClpSimplex.pyx:addConstraint: Column index out of range (number of columns: %d)";
static char __pyx_k_35[] = "CyClpSimplex.pyx:deleteConstraints: Constraint index out of range (number of constraints: %d)";
static char __pyx_k_36[] = "CyClpSimplex.pyx:deleteVariables: variable index out of range (number of variables: %d)";
static char __pyx_k_37[] = "CyClpSimplex.pyx:addColumn: Row index out of range (number of rows:  %d)";
static char __pyx_k_40[] = "startFinishOptionsDic";
static char __pyx_k_41[] = "The argument of setInteger can be a CyLPVar only if the object is built using a CyLPModel.";
static char __pyx_k_44[] = "feasibilityTolerance";
static char __pyx_k_46[] = "Presolve says problem infeasible.";
static char __pyx_k_47[] = "No write access for %s or an intermediate                             directory does not exist.";
static char __pyx_k_48[] = "pivotMethodObject should be of a                             class derived from PivotPythonBase";
static char __pyx_k_50[] = "dualPivotMethodObject should be of a                             class derived from DualPivotPythonBase";
static char __pyx_k_52[] = "CyClpPrimalColumnPivotBase.pyx: pivot column should be implemented.";
static char __pyx_k_54[] = "getComplementarityList";
static char __pyx_k_56[] = "Variables should have the same  dimensions to be complements. Got %s: %g and %s: %g";
static char __pyx_k_58[] = "CyLP.py.modeling.CyLPModel";
static char __pyx_k_59[] = "CyLP.cy";
static char __pyx_k_62[] = "../input/p0033.mps";
static char __pyx_k_63[] = "ndarray is not C contiguous";
static char __pyx_k_65[] = "ndarray is not Fortran contiguous";
static char __pyx_k_67[] = "Non-native byte order not supported";
static char __pyx_k_69[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_70[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_73[] = "Format string allocated too short.";
static char __pyx_k_75[] = "\n        Set the objective function using this property.\n        See the :ref:`modeling example <modeling-usage>`.\n        ";
static char __pyx_k_76[] = "\n        Number of iterations.\n        ";
static char __pyx_k_77[] = "\n        Number of rows, constraints.\n        ";
static char __pyx_k_78[] = "\n        Number of constraints, rows.\n        ";
static char __pyx_k_79[] = "\n        Number of variables, columns.\n        ";
static char __pyx_k_80[] = "\n        Number of columns, variables.\n        ";
static char __pyx_k_81[] = "\n        The coefficient matrix. A scipy sparse matrix.\n        ";
static char __pyx_k_82[] = "\n        The coefficient matrix. A CyCoinPackedMatrix.\n        ";
static char __pyx_k_83[] = "\n        Constraints.\n        ";
static char __pyx_k_84[] = "\n        variable names\n        ";
static char __pyx_k_85[] = "\n        Variables.\n        ";
static char __pyx_k_86[] = "\n        The objective value. Readonly.\n        ";
static char __pyx_k_87[] = "\n        Solution to the primal variables.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_88[] = "\n        Solution to the primal variables. Including the slacks.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_89[] = "\n        Return the current point.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_90[] = "\n        Variables' reduced costs\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_91[] = "\n        Slack variables' solution\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_92[] = "\n        Dual variables' solution\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_93[] = "\n        The reduced costs. A Numpy array.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_94[] = "\n        Variables upper bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_95[] = "\n        Variables lower bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_96[] = "\n        Constraints upper bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_97[] = "\n        Constraints lower bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_98[] = "\n        lower bounds (CLP's lower_)\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_99[] = "\n        upper bounds (CLP's upper_)\n\n        :rtype: Numpy array\n        ";
static char __pyx_k__A[] = "A";
static char __pyx_k__B[] = "B";
static char __pyx_k__D[] = "D";
static char __pyx_k__H[] = "H";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__O[] = "O";
static char __pyx_k__Q[] = "Q";
static char __pyx_k__a[] = "a";
static char __pyx_k__b[] = "b";
static char __pyx_k__c[] = "c";
static char __pyx_k__d[] = "d";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__l[] = "l";
static char __pyx_k__q[] = "q";
static char __pyx_k__s[] = "s";
static char __pyx_k__w[] = "w";
static char __pyx_k__x[] = "x";
static char __pyx_k__y[] = "y";
static char __pyx_k__z[] = "z";
static char __pyx_k_100[] = "\n        A Numpy array of all the variables' status\n        ";
static char __pyx_k_101[] = "\n        The index set of variables that are *free* or *superbasic*.\n        ";
static char __pyx_k_102[] = "\n        The index set of variables that are not *basic* or *fixed*.\n        ";
static char __pyx_k_103[] = "\n        The index set of variables that are *free*.\n        ";
static char __pyx_k_104[] = "\n        The index set of variables that are *basic*.\n        ";
static char __pyx_k_105[] = "\n        The index set of variables that are at their upper bound.\n        ";
static char __pyx_k_106[] = "\n        The index set of variables that are at their lower bound.\n        ";
static char __pyx_k_107[] = "\n        The index set of variables that are *superbasic*.\n        ";
static char __pyx_k_108[] = "\n        The index set of variables that are *fixed*.\n        ";
static char __pyx_k_109[] = "\n        The index set of variables that are *flagged*.\n        ";
static char __pyx_k_110[] = "\n        The index set of variables that are NOT *free*.\n        ";
static char __pyx_k_111[] = "\n        The index set of variables that are NOT *basic*.\n        ";
static char __pyx_k_112[] = "\n        The index set of variables that are NOT at their upper bound.\n        ";
static char __pyx_k_113[] = "\n        The index set of variables that are NOT at their lower bound.\n        ";
static char __pyx_k_114[] = "\n        The index set of variables that are NOT *superbasic*.\n        ";
static char __pyx_k_115[] = "\n        The index set of variables that are NOT *fixed*.\n        ";
static char __pyx_k_116[] = "\n        The index set of variables that are NOT flagged.\n        ";
static char __pyx_k_117[] = "os.path";
static char __pyx_k_118[] = "CyLP.py.utils.sparseUtil";
static char __pyx_k_119[] = "CyLP.py.pivots.PivotPythonBase";
static char __pyx_k_120[] = "CyLP.py.pivots";
static char __pyx_k_121[] = "primal infeasible";
static char __pyx_k_122[] = "dual infeasible";
static char __pyx_k_123[] = "stopped on iterations or time";
static char __pyx_k_124[] = "stopped due to errors";
static char __pyx_k_125[] = "stopped by event handler (virtual int ClpEventHandler::event())";
static char __pyx_k_128[] = "/Users/mehdi/Documents/CyLP/cy/CyClpSimplex.pyx";
static char __pyx_k_129[] = "CyLP.cy.CyClpSimplex";
static char __pyx_k_132[] = "CyClpSimplex.setVariableStatus (line 881)";
static char __pyx_k_133[] = "\n        Set the status of a variable.\n\n        :arg arg: Specifies the variable to change (a CyLPVar, or an index)\n        :type status: CyLPVar, int\n        :arg status: 'basic', 'atUpperBound', 'atLowerBound', 'superBasic', 'fixed'\n        :type status: string\n\n\n        Example:\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex\n        >>> s = CyClpSimplex()\n        >>> x = s.addVariable('x', 4)\n        >>> # Using CyLPVars:\n        >>> s.setVariableStatus(x[1:3], 'basic')\n        >>> s.getVariableStatus(x[1])\n        'basic'\n        >>> # Using a variable index directly\n        >>> s.setVariableStatus(1, 'atLowerBound')\n        >>> s.getVariableStatus(x[1])\n        'atLowerBound'\n\n        ";
static char __pyx_k_134[] = "CyClpSimplex.setConstraintStatus (line 958)";
static char __pyx_k_135[] = "\n        Set the status of a constraint.\n\n        :arg arg: Specifies the constraint to change (name or index)\n        :type status: string,int\n        :arg status: 'basic', 'atUpperBound', 'atLowerBound', 'superBasic', 'fixed'\n        :type status: string\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex\n        >>> s = CyClpSimplex()\n        >>> x = s.addVariable('x', 4)\n        >>> s.addConstraint(0 <= x[0] + x[1] <= 1, 'const1')\n        >>> # Using constraint name:\n        >>> s.setConstraintStatus('const1', 'atUpperBound')\n        >>> s.getConstraintStatus('const1')\n        'atUpperBound'\n        >>> # Using constraint index directly\n        >>> s.setConstraintStatus(0, 'atLowerBound')\n        >>> s.getConstraintStatus('const1')\n        'atLowerBound'\n        ";
static char __pyx_k_136[] = "CyClpSimplex.initialSolve (line 1057)";
static char __pyx_k_137[] = "\n        Run CLP's initialSolve. It does a presolve and uses primal or dual\n        Simplex to solve a problem.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static char __pyx_k_138[] = "CyClpSimplex.initialPrimalSolve (line 1077)";
static char __pyx_k_139[] = "\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of primal Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialPrimalSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static char __pyx_k_140[] = "CyClpSimplex.initialDualSolve (line 1097)";
static char __pyx_k_141[] = "\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of dual Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialDualSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static char __pyx_k_142[] = "CyClpSimplex.dual (line 1383)";
static char __pyx_k_143[] = "\n        Runs CLP dual simplex.\n\n        **Usage Example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.dual()\n        'optimal'\n\n        ";
static char __pyx_k_144[] = "CyClpSimplex.setInteger (line 1476)";
static char __pyx_k_145[] = "\n        if ``arg`` is an integer: mark variable index ``arg`` as integer.\n        if ``arg`` is a :class:`CyLPVar` object: mark variable\n        ``arg`` as integer. Here is an example of the latter:\n\n        >>> import numpy as np\n        >>> from CyLP.cy import CyClpSimplex\n        >>> from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray\n        >>> model = CyLPModel()\n        >>>\n        >>> x = model.addVariable('x', 3)\n        >>> y = model.addVariable('y', 2)\n        >>>\n        >>> A = np.matrix([[1., 2., 0],[1., 0, 1.]])\n        >>> B = np.matrix([[1., 0, 0], [0, 0, 1.]])\n        >>> D = np.matrix([[1., 2.],[0, 1]])\n        >>> a = CyLPArray([5, 2.5])\n        >>> b = CyLPArray([4.2, 3])\n        >>> x_u= CyLPArray([2., 3.5])\n        >>>\n        >>> model += A*x <= a\n        >>> model += 2 <= B * x + D * y <= b\n        >>> model += y >= 0\n        >>> model += 1.1 <= x[1:3] <= x_u\n        >>>\n        >>> c = CyLPArray([1., -2., 3.])\n        >>> model.objective = c * x + 2 * y.sum()\n        >>>\n        >>>\n        >>> s = CyClpSimplex(model)\n        >>> s.setInteger(x[1:3])\n        >>>\n        >>> cbcModel = s.getCbcModel()\n        >>> cbcModel.branchAndBound()\n        'solution'\n        >>>\n        >>> sol_x = cbcModel.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.5, 2, 2]) ) <= 10**-6).all()\n        True\n        >>> sol_y = cbcModel.primalVariableSolution['y']\n        >>> (abs(sol_y -\n        ...     np.array([0, 0.75]) ) <= 10**-6).all()\n        True\n\n        ";
static char __pyx_k_146[] = "CyClpSimplex.loadFromCyLPModel (line 1606)";
static char __pyx_k_147[] = "\n        Set the coefficient matrix, constraint bounds, and variable\n        bounds based on the data in *cyLPModel* which should be and object\n        of *CyLPModel* class.\n\n        This method is usually called from CyClpSimplex's constructor.\n        But in a case that the CyClpSimplex instance is created before\n        we have the CyLPModel we use this method to load the LP,\n        for example:\n\n        >>> import numpy as np\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getModelExample\n        >>>\n        >>> s = CyClpSimplex()\n        >>> model = getModelExample()\n        >>> s.loadFromCyLPModel(model)\n        >>>\n        >>> s.primal()\n        'optimal'\n        >>> sol_x = s.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.2, 2, 1.1]) ) <= 10**-6).all()\n        True\n\n        ";
static char __pyx_k__Zd[] = "Zd";
static char __pyx_k__Zf[] = "Zf";
static char __pyx_k__Zg[] = "Zg";
static char __pyx_k__cl[] = "cl";
static char __pyx_k__np[] = "np";
static char __pyx_k__os[] = "os";
static char __pyx_k__pi[] = "pi";
static char __pyx_k__v1[] = "v1";
static char __pyx_k__v2[] = "v2";
static char __pyx_k__any[] = "any";
static char __pyx_k__arg[] = "arg";
static char __pyx_k__arr[] = "arr";
static char __pyx_k__col[] = "col";
static char __pyx_k__dim[] = "dim";
static char __pyx_k__end[] = "end";
static char __pyx_k__ind[] = "ind";
static char __pyx_k__obj[] = "obj";
static char __pyx_k__row[] = "row";
static char __pyx_k__sum[] = "sum";
static char __pyx_k__val[] = "val";
static char __pyx_k__x_u[] = "x_u";
static char __pyx_k__cons[] = "cons";
static char __pyx_k__copy[] = "copy";
static char __pyx_k__data[] = "data";
static char __pyx_k__dims[] = "dims";
static char __pyx_k__free[] = "free";
static char __pyx_k__inds[] = "inds";
static char __pyx_k__izip[] = "izip";
static char __pyx_k__join[] = "join";
static char __pyx_k__keys[] = "keys";
static char __pyx_k__name[] = "name";
static char __pyx_k__ncol[] = "ncol";
static char __pyx_k__open[] = "open";
static char __pyx_k__path[] = "path";
static char __pyx_k__rows[] = "rows";
static char __pyx_k__var1[] = "var1";
static char __pyx_k__var2[] = "var2";
static char __pyx_k__array[] = "array";
static char __pyx_k__basic[] = "basic";
static char __pyx_k__close[] = "close";
static char __pyx_k__collb[] = "collb";
static char __pyx_k__colub[] = "colub";
static char __pyx_k__cstat[] = "cstat";
static char __pyx_k__dtype[] = "dtype";
static char __pyx_k__empty[] = "empty";
static char __pyx_k__fixed[] = "fixed";
static char __pyx_k__int32[] = "int32";
static char __pyx_k__isInt[] = "isInt";
static char __pyx_k__lower[] = "lower";
static char __pyx_k__model[] = "model";
static char __pyx_k__nCons[] = "nCons";
static char __pyx_k__nRows[] = "nRows";
static char __pyx_k__nVars[] = "nVars";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__range[] = "range";
static char __pyx_k__rowlb[] = "rowlb";
static char __pyx_k__rowub[] = "rowub";
static char __pyx_k__rstat[] = "rstat";
static char __pyx_k__scipy[] = "scipy";
static char __pyx_k__shape[] = "shape";
static char __pyx_k__spare[] = "spare";
static char __pyx_k__start[] = "start";
static char __pyx_k__tocoo[] = "tocoo";
static char __pyx_k__upper[] = "upper";
static char __pyx_k__w_ind[] = "w_ind";
static char __pyx_k__where[] = "where";
static char __pyx_k__which[] = "which";
static char __pyx_k__zeros[] = "zeros";
static char __pyx_k__astype[] = "astype";
static char __pyx_k__double[] = "double";
static char __pyx_k__hasVar[] = "hasVar";
static char __pyx_k__indptr[] = "indptr";
static char __pyx_k__matrix[] = "matrix";
static char __pyx_k__number[] = "number";
static char __pyx_k__parent[] = "parent";
static char __pyx_k__pvdims[] = "pvdims";
static char __pyx_k__resize[] = "resize";
static char __pyx_k__scalar[] = "scalar";
static char __pyx_k__sparse[] = "sparse";
static char __pyx_k__status[] = "status";
static char __pyx_k__varInd[] = "varInd";
static char __pyx_k__xrange[] = "xrange";
static char __pyx_k__CyLPVar[] = "CyLPVar";
static char __pyx_k__arr_ind[] = "arr_ind";
static char __pyx_k__columns[] = "columns";
static char __pyx_k__curpath[] = "curpath";
static char __pyx_k__dirname[] = "dirname";
static char __pyx_k__getACol[] = "getACol";
static char __pyx_k__getfile[] = "getfile";
static char __pyx_k__indices[] = "indices";
static char __pyx_k__inspect[] = "inspect";
static char __pyx_k__isRange[] = "isRange";
static char __pyx_k__optimal[] = "optimal";
static char __pyx_k__product[] = "product";
static char __pyx_k__readMps[] = "readMps";
static char __pyx_k__status_[] = "status_";
static char __pyx_k__varname[] = "varname";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__checkVar[] = "checkVar";
static char __pyx_k__colArray[] = "colArray";
static char __pyx_k__constInd[] = "constInd";
static char __pyx_k__elements[] = "elements";
static char __pyx_k__fileName[] = "fileName";
static char __pyx_k__filename[] = "filename";
static char __pyx_k__hasConst[] = "hasConst";
static char __pyx_k__majorDim[] = "majorDim";
static char __pyx_k__minorDim[] = "minorDim";
static char __pyx_k__mpsNames[] = "mpsNames";
static char __pyx_k__objSense[] = "objSense";
static char __pyx_k__rowLower[] = "rowLower";
static char __pyx_k__rowUpper[] = "rowUpper";
static char __pyx_k__sequence[] = "sequence";
static char __pyx_k__varCoefs[] = "varCoefs";
static char __pyx_k__varIndex[] = "varIndex";
static char __pyx_k__varNames[] = "varNames";
static char __pyx_k__CyLPArray[] = "CyLPArray";
static char __pyx_k__CyLPModel[] = "CyLPModel";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k____class__[] = "__class__";
static char __pyx_k__appendCol[] = "appendCol";
static char __pyx_k__appendRow[] = "appendRow";
static char __pyx_k__cyLPModel[] = "cyLPModel";
static char __pyx_k__dropNames[] = "dropNames";
static char __pyx_k__itertools[] = "itertools";
static char __pyx_k__keepNames[] = "keepNames";
static char __pyx_k__objective[] = "objective";
static char __pyx_k__parentDim[] = "parentDim";
static char __pyx_k__rowStarts[] = "rowStarts";
static char __pyx_k__variables[] = "variables";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__constIndex[] = "constIndex";
static char __pyx_k__coo_matrix[] = "coo_matrix";
static char __pyx_k__csc_matrix[] = "csc_matrix";
static char __pyx_k__csr_matrix[] = "csr_matrix";
static char __pyx_k__exceptions[] = "exceptions";
static char __pyx_k__filterVars[] = "filterVars";
static char __pyx_k__formatType[] = "formatType";
static char __pyx_k__getBInvCol[] = "getBInvCol";
static char __pyx_k__lil_matrix[] = "lil_matrix";
static char __pyx_k__nVariables[] = "nVariables";
static char __pyx_k__setInteger[] = "setInteger";
static char __pyx_k__superBasic[] = "superBasic";
static char __pyx_k__IntToStatus[] = "IntToStatus";
static char __pyx_k__StatusToInt[] = "StatusToInt";
static char __pyx_k____getitem__[] = "__getitem__";
static char __pyx_k__addVariable[] = "addVariable";
static char __pyx_k__columnLower[] = "columnLower";
static char __pyx_k__columnUpper[] = "columnUpper";
static char __pyx_k__constraints[] = "constraints";
static char __pyx_k__getBInvACol[] = "getBInvACol";
static char __pyx_k__modelObject[] = "modelObject";
static char __pyx_k__numberInRow[] = "numberInRow";
static char __pyx_k__setRowLower[] = "setRowLower";
static char __pyx_k__setRowUpper[] = "setRowUpper";
static char __pyx_k__CyClpSimplex[] = "CyClpSimplex";
static char __pyx_k__CyLPSolution[] = "CyLPSolution";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__atLowerBound[] = "atLowerBound";
static char __pyx_k__atUpperBound[] = "atUpperBound";
static char __pyx_k__columnStarts[] = "columnStarts";
static char __pyx_k__currentframe[] = "currentframe";
static char __pyx_k__elementIndex[] = "elementIndex";
static char __pyx_k__elementValue[] = "elementValue";
static char __pyx_k__getVarByName[] = "getVarByName";
static char __pyx_k__ifValuesPass[] = "ifValuesPass";
static char __pyx_k__ignoreErrors[] = "ignoreErrors";
static char __pyx_k__keepIntegers[] = "keepIntegers";
static char __pyx_k__makeMatrices[] = "makeMatrices";
static char __pyx_k__nConstraints[] = "nConstraints";
static char __pyx_k__numberAcross[] = "numberAcross";
static char __pyx_k__numberPasses[] = "numberPasses";
static char __pyx_k__numberWanted[] = "numberWanted";
static char __pyx_k__rowObjective[] = "rowObjective";
static char __pyx_k__sparseConcat[] = "sparseConcat";
static char __pyx_k__vectorStarts[] = "vectorStarts";
static char __pyx_k__addConstraint[] = "addConstraint";
static char __pyx_k__deleteCurrent[] = "deleteCurrent";
static char __pyx_k__getMpsExample[] = "getMpsExample";
static char __pyx_k__getStatusCode[] = "getStatusCode";
static char __pyx_k__newNumberRows[] = "newNumberRows";
static char __pyx_k__problemStatus[] = "problemStatus";
static char __pyx_k__regionSparse1[] = "regionSparse1";
static char __pyx_k__regionSparse2[] = "regionSparse2";
static char __pyx_k__replaceMatrix[] = "replaceMatrix";
static char __pyx_k__updatedColumn[] = "updatedColumn";
static char __pyx_k__variableNames[] = "variableNames";
static char __pyx_k__addConstraints[] = "addConstraints";
static char __pyx_k__csc_matrixPlus[] = "csc_matrixPlus";
static char __pyx_k__doRowObjective[] = "doRowObjective";
static char __pyx_k__getStatusArray[] = "getStatusArray";
static char __pyx_k__numberInColumn[] = "numberInColumn";
static char __pyx_k__removeVariable[] = "removeVariable";
static char __pyx_k__setColumnLower[] = "setColumnLower";
static char __pyx_k__setColumnUpper[] = "setColumnUpper";
static char __pyx_k__variablesLower[] = "variablesLower";
static char __pyx_k__variablesUpper[] = "variablesUpper";
static char __pyx_k__vectorTimesB_1[] = "vectorTimesB_1";
static char __pyx_k__PivotPythonBase[] = "PivotPythonBase";
static char __pyx_k__getModelExample[] = "getModelExample";
static char __pyx_k__getReducedCosts[] = "getReducedCosts";
static char __pyx_k__setVariableName[] = "setVariableName";
static char __pyx_k__tryPlusMinusOne[] = "tryPlusMinusOne";
static char __pyx_k__CLP_getVarStatus[] = "CLP_getVarStatus";
static char __pyx_k__CLP_setVarStatus[] = "CLP_setVarStatus";
static char __pyx_k__constraintsLower[] = "constraintsLower";
static char __pyx_k__constraintsUpper[] = "constraintsUpper";
static char __pyx_k__getPivotVariable[] = "getPivotVariable";
static char __pyx_k__getRightHandSide[] = "getRightHandSide";
static char __pyx_k__getVariableNames[] = "getVariableNames";
static char __pyx_k__newNumberColumns[] = "newNumberColumns";
static char __pyx_k__removeConstraint[] = "removeConstraint";
static char __pyx_k__reverseVarSearch[] = "reverseVarSearch";
static char __pyx_k__isPivotAcceptable[] = "isPivotAcceptable";
static char __pyx_k__loadFromCyLPModel[] = "loadFromCyLPModel";
static char __pyx_k__setConstraintName[] = "setConstraintName";
static char __pyx_k__setObjectiveArray[] = "setObjectiveArray";
static char __pyx_k__startFinishOptions[] = "startFinishOptions";
static char __pyx_k__DualPivotPythonBase[] = "DualPivotPythonBase";
static char __pyx_k___extractStartFinish[] = "_extractStartFinish";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_n_s_117;
static PyObject *__pyx_n_s_118;
static PyObject *__pyx_n_s_119;
static PyObject *__pyx_n_s_12;
static PyObject *__pyx_n_s_120;
static PyObject *__pyx_kp_s_121;
static PyObject *__pyx_kp_s_122;
static PyObject *__pyx_kp_s_123;
static PyObject *__pyx_kp_s_124;
static PyObject *__pyx_kp_s_125;
static PyObject *__pyx_kp_s_128;
static PyObject *__pyx_n_s_129;
static PyObject *__pyx_n_s_13;
static PyObject *__pyx_kp_u_132;
static PyObject *__pyx_kp_u_133;
static PyObject *__pyx_kp_u_134;
static PyObject *__pyx_kp_u_135;
static PyObject *__pyx_kp_u_136;
static PyObject *__pyx_kp_u_137;
static PyObject *__pyx_kp_u_138;
static PyObject *__pyx_kp_u_139;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_kp_u_140;
static PyObject *__pyx_kp_u_141;
static PyObject *__pyx_kp_u_142;
static PyObject *__pyx_kp_u_143;
static PyObject *__pyx_kp_u_144;
static PyObject *__pyx_kp_u_145;
static PyObject *__pyx_kp_u_146;
static PyObject *__pyx_kp_u_147;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_23;
static PyObject *__pyx_n_s_25;
static PyObject *__pyx_kp_s_26;
static PyObject *__pyx_kp_s_29;
static PyObject *__pyx_kp_s_31;
static PyObject *__pyx_kp_s_34;
static PyObject *__pyx_kp_s_35;
static PyObject *__pyx_kp_s_36;
static PyObject *__pyx_kp_s_37;
static PyObject *__pyx_n_s_4;
static PyObject *__pyx_n_s_40;
static PyObject *__pyx_kp_s_41;
static PyObject *__pyx_n_s_44;
static PyObject *__pyx_kp_s_46;
static PyObject *__pyx_kp_s_47;
static PyObject *__pyx_kp_s_48;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_50;
static PyObject *__pyx_kp_s_52;
static PyObject *__pyx_n_s_54;
static PyObject *__pyx_kp_s_56;
static PyObject *__pyx_n_s_58;
static PyObject *__pyx_n_s_59;
static PyObject *__pyx_kp_s_62;
static PyObject *__pyx_kp_u_63;
static PyObject *__pyx_kp_u_65;
static PyObject *__pyx_kp_u_67;
static PyObject *__pyx_kp_u_69;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_u_70;
static PyObject *__pyx_kp_u_73;
static PyObject *__pyx_n_s__A;
static PyObject *__pyx_n_s__B;
static PyObject *__pyx_n_s__CLP_getVarStatus;
static PyObject *__pyx_n_s__CLP_setVarStatus;
static PyObject *__pyx_n_s__CyClpSimplex;
static PyObject *__pyx_n_s__CyLPArray;
static PyObject *__pyx_n_s__CyLPModel;
static PyObject *__pyx_n_s__CyLPSolution;
static PyObject *__pyx_n_s__CyLPVar;
static PyObject *__pyx_n_s__D;
static PyObject *__pyx_n_s__DualPivotPythonBase;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__IntToStatus;
static PyObject *__pyx_n_s__PivotPythonBase;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__StatusToInt;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____class__;
static PyObject *__pyx_n_s____getitem__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___extractStartFinish;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__addConstraint;
static PyObject *__pyx_n_s__addConstraints;
static PyObject *__pyx_n_s__addVariable;
static PyObject *__pyx_n_s__any;
static PyObject *__pyx_n_s__appendCol;
static PyObject *__pyx_n_s__appendRow;
static PyObject *__pyx_n_s__arg;
static PyObject *__pyx_n_s__arr;
static PyObject *__pyx_n_s__arr_ind;
static PyObject *__pyx_n_s__array;
static PyObject *__pyx_n_s__astype;
static PyObject *__pyx_n_s__atLowerBound;
static PyObject *__pyx_n_s__atUpperBound;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__basic;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__checkVar;
static PyObject *__pyx_n_s__cl;
static PyObject *__pyx_n_s__close;
static PyObject *__pyx_n_s__col;
static PyObject *__pyx_n_s__colArray;
static PyObject *__pyx_n_s__collb;
static PyObject *__pyx_n_s__colub;
static PyObject *__pyx_n_s__columnLower;
static PyObject *__pyx_n_s__columnStarts;
static PyObject *__pyx_n_s__columnUpper;
static PyObject *__pyx_n_s__columns;
static PyObject *__pyx_n_s__cons;
static PyObject *__pyx_n_s__constInd;
static PyObject *__pyx_n_s__constIndex;
static PyObject *__pyx_n_s__constraints;
static PyObject *__pyx_n_s__constraintsLower;
static PyObject *__pyx_n_s__constraintsUpper;
static PyObject *__pyx_n_s__coo_matrix;
static PyObject *__pyx_n_s__copy;
static PyObject *__pyx_n_s__csc_matrix;
static PyObject *__pyx_n_s__csc_matrixPlus;
static PyObject *__pyx_n_s__csr_matrix;
static PyObject *__pyx_n_s__cstat;
static PyObject *__pyx_n_s__curpath;
static PyObject *__pyx_n_s__currentframe;
static PyObject *__pyx_n_s__cyLPModel;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__deleteCurrent;
static PyObject *__pyx_n_s__dim;
static PyObject *__pyx_n_s__dims;
static PyObject *__pyx_n_s__dirname;
static PyObject *__pyx_n_s__doRowObjective;
static PyObject *__pyx_n_s__double;
static PyObject *__pyx_n_s__dropNames;
static PyObject *__pyx_n_s__dtype;
static PyObject *__pyx_n_s__elementIndex;
static PyObject *__pyx_n_s__elementValue;
static PyObject *__pyx_n_s__elements;
static PyObject *__pyx_n_s__empty;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__exceptions;
static PyObject *__pyx_n_s__f;
static PyObject *__pyx_n_s__fileName;
static PyObject *__pyx_n_s__filename;
static PyObject *__pyx_n_s__filterVars;
static PyObject *__pyx_n_s__fixed;
static PyObject *__pyx_n_s__formatType;
static PyObject *__pyx_n_s__free;
static PyObject *__pyx_n_s__getACol;
static PyObject *__pyx_n_s__getBInvACol;
static PyObject *__pyx_n_s__getBInvCol;
static PyObject *__pyx_n_s__getModelExample;
static PyObject *__pyx_n_s__getMpsExample;
static PyObject *__pyx_n_s__getPivotVariable;
static PyObject *__pyx_n_s__getReducedCosts;
static PyObject *__pyx_n_s__getRightHandSide;
static PyObject *__pyx_n_s__getStatusArray;
static PyObject *__pyx_n_s__getStatusCode;
static PyObject *__pyx_n_s__getVarByName;
static PyObject *__pyx_n_s__getVariableNames;
static PyObject *__pyx_n_s__getfile;
static PyObject *__pyx_n_s__h;
static PyObject *__pyx_n_s__hasConst;
static PyObject *__pyx_n_s__hasVar;
static PyObject *__pyx_n_s__ifValuesPass;
static PyObject *__pyx_n_s__ignoreErrors;
static PyObject *__pyx_n_s__ind;
static PyObject *__pyx_n_s__indices;
static PyObject *__pyx_n_s__indptr;
static PyObject *__pyx_n_s__inds;
static PyObject *__pyx_n_s__inspect;
static PyObject *__pyx_n_s__int32;
static PyObject *__pyx_n_s__isInt;
static PyObject *__pyx_n_s__isPivotAcceptable;
static PyObject *__pyx_n_s__isRange;
static PyObject *__pyx_n_s__itertools;
static PyObject *__pyx_n_s__izip;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__keepIntegers;
static PyObject *__pyx_n_s__keepNames;
static PyObject *__pyx_n_s__keys;
static PyObject *__pyx_n_s__lil_matrix;
static PyObject *__pyx_n_s__loadFromCyLPModel;
static PyObject *__pyx_n_s__lower;
static PyObject *__pyx_n_s__majorDim;
static PyObject *__pyx_n_s__makeMatrices;
static PyObject *__pyx_n_s__matrix;
static PyObject *__pyx_n_s__minorDim;
static PyObject *__pyx_n_s__model;
static PyObject *__pyx_n_s__modelObject;
static PyObject *__pyx_n_s__mpsNames;
static PyObject *__pyx_n_s__nCons;
static PyObject *__pyx_n_s__nConstraints;
static PyObject *__pyx_n_s__nRows;
static PyObject *__pyx_n_s__nVariables;
static PyObject *__pyx_n_s__nVars;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__ncol;
static PyObject *__pyx_n_s__newNumberColumns;
static PyObject *__pyx_n_s__newNumberRows;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__number;
static PyObject *__pyx_n_s__numberAcross;
static PyObject *__pyx_n_s__numberInColumn;
static PyObject *__pyx_n_s__numberInRow;
static PyObject *__pyx_n_s__numberPasses;
static PyObject *__pyx_n_s__numberWanted;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__obj;
static PyObject *__pyx_n_s__objSense;
static PyObject *__pyx_n_s__objective;
static PyObject *__pyx_n_s__open;
static PyObject *__pyx_n_s__optimal;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__parent;
static PyObject *__pyx_n_s__parentDim;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__pi;
static PyObject *__pyx_n_s__problemStatus;
static PyObject *__pyx_n_s__product;
static PyObject *__pyx_n_s__pvdims;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__readMps;
static PyObject *__pyx_n_s__regionSparse1;
static PyObject *__pyx_n_s__regionSparse2;
static PyObject *__pyx_n_s__removeConstraint;
static PyObject *__pyx_n_s__removeVariable;
static PyObject *__pyx_n_s__replaceMatrix;
static PyObject *__pyx_n_s__resize;
static PyObject *__pyx_n_s__reverseVarSearch;
static PyObject *__pyx_n_s__row;
static PyObject *__pyx_n_s__rowLower;
static PyObject *__pyx_n_s__rowObjective;
static PyObject *__pyx_n_s__rowStarts;
static PyObject *__pyx_n_s__rowUpper;
static PyObject *__pyx_n_s__rowlb;
static PyObject *__pyx_n_s__rows;
static PyObject *__pyx_n_s__rowub;
static PyObject *__pyx_n_s__rstat;
static PyObject *__pyx_n_s__s;
static PyObject *__pyx_n_s__scalar;
static PyObject *__pyx_n_s__scipy;
static PyObject *__pyx_n_s__sequence;
static PyObject *__pyx_n_s__setColumnLower;
static PyObject *__pyx_n_s__setColumnUpper;
static PyObject *__pyx_n_s__setConstraintName;
static PyObject *__pyx_n_s__setInteger;
static PyObject *__pyx_n_s__setObjectiveArray;
static PyObject *__pyx_n_s__setRowLower;
static PyObject *__pyx_n_s__setRowUpper;
static PyObject *__pyx_n_s__setVariableName;
static PyObject *__pyx_n_s__shape;
static PyObject *__pyx_n_s__spare;
static PyObject *__pyx_n_s__sparse;
static PyObject *__pyx_n_s__sparseConcat;
static PyObject *__pyx_n_s__start;
static PyObject *__pyx_n_s__startFinishOptions;
static PyObject *__pyx_n_s__status;
static PyObject *__pyx_n_s__status_;
static PyObject *__pyx_n_s__sum;
static PyObject *__pyx_n_s__superBasic;
static PyObject *__pyx_n_s__tocoo;
static PyObject *__pyx_n_s__tryPlusMinusOne;
static PyObject *__pyx_n_s__updatedColumn;
static PyObject *__pyx_n_s__upper;
static PyObject *__pyx_n_s__v1;
static PyObject *__pyx_n_s__v2;
static PyObject *__pyx_n_s__val;
static PyObject *__pyx_n_s__var1;
static PyObject *__pyx_n_s__var2;
static PyObject *__pyx_n_s__varCoefs;
static PyObject *__pyx_n_s__varInd;
static PyObject *__pyx_n_s__varIndex;
static PyObject *__pyx_n_s__varNames;
static PyObject *__pyx_n_s__variableNames;
static PyObject *__pyx_n_s__variables;
static PyObject *__pyx_n_s__variablesLower;
static PyObject *__pyx_n_s__variablesUpper;
static PyObject *__pyx_n_s__varname;
static PyObject *__pyx_n_s__vectorStarts;
static PyObject *__pyx_n_s__vectorTimesB_1;
static PyObject *__pyx_n_s__w;
static PyObject *__pyx_n_s__w_ind;
static PyObject *__pyx_n_s__where;
static PyObject *__pyx_n_s__which;
static PyObject *__pyx_n_s__x;
static PyObject *__pyx_n_s__x_u;
static PyObject *__pyx_n_s__xrange;
static PyObject *__pyx_n_s__y;
static PyObject *__pyx_n_s__z;
static PyObject *__pyx_n_s__zeros;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_64;
static PyObject *__pyx_k_28;
static PyObject *__pyx_k_38;
static PyObject *__pyx_k_39;
static PyObject *__pyx_k_43;
static PyObject *__pyx_k_45;
static PyArrayObject *__pyx_k_57;
static PyObject *__pyx_k_slice_2;
static PyObject *__pyx_k_slice_3;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_18;
static PyObject *__pyx_k_tuple_19;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_30;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_33;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_tuple_49;
static PyObject *__pyx_k_tuple_51;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_55;
static PyObject *__pyx_k_tuple_60;
static PyObject *__pyx_k_tuple_61;
static PyObject *__pyx_k_tuple_64;
static PyObject *__pyx_k_tuple_66;
static PyObject *__pyx_k_tuple_68;
static PyObject *__pyx_k_tuple_71;
static PyObject *__pyx_k_tuple_72;
static PyObject *__pyx_k_tuple_74;
static PyObject *__pyx_k_tuple_126;
static PyObject *__pyx_k_tuple_130;
static PyObject *__pyx_k_codeobj_127;
static PyObject *__pyx_k_codeobj_131;

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cyLPModel = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cyLPModel,0};
    PyObject* values[1] = {0};

    /* "CyLP/cy/CyClpSimplex.pyx":67
 *     '''
 * 
 *     def __cinit__(self, cyLPModel=None):             # <<<<<<<<<<<<<<
 *         self.CppSelf = new CppIClpSimplex(<cpy_ref.PyObject*>self,
 *                                 <runIsPivotAcceptable_t>RunIsPivotAcceptable,
 */
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cyLPModel);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cyLPModel = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex___cinit__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_cyLPModel);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex___cinit__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cyLPModel) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 67);

  /* "CyLP/cy/CyClpSimplex.pyx":68
 * 
 *     def __cinit__(self, cyLPModel=None):
 *         self.CppSelf = new CppIClpSimplex(<cpy_ref.PyObject*>self,             # <<<<<<<<<<<<<<
 *                                 <runIsPivotAcceptable_t>RunIsPivotAcceptable,
 *                                 <varSelCriteria_t>RunVarSelCriteria)
 */
  __pyx_v_self->CppSelf = new IClpSimplex(((PyObject *)__pyx_v_self), ((runIsPivotAcceptable_t)__pyx_f_4CyLP_2cy_12CyClpSimplex_RunIsPivotAcceptable), ((varSelCriteria_t)__pyx_f_4CyLP_2cy_12CyClpSimplex_RunVarSelCriteria));

  /* "CyLP/cy/CyClpSimplex.pyx":71
 *                                 <runIsPivotAcceptable_t>RunIsPivotAcceptable,
 *                                 <varSelCriteria_t>RunVarSelCriteria)
 *         self.vars = []             # <<<<<<<<<<<<<<
 *         #self.cbcModelExists = False
 *         self.coinModel = CyCoinModel()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->vars);
  __Pyx_DECREF(__pyx_v_self->vars);
  __pyx_v_self->vars = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":73
 *         self.vars = []
 *         #self.cbcModelExists = False
 *         self.coinModel = CyCoinModel()             # <<<<<<<<<<<<<<
 * 
 *         self.cyLPModel = cyLPModel
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->coinModel);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->coinModel));
  __pyx_v_self->coinModel = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":75
 *         self.coinModel = CyCoinModel()
 * 
 *         self.cyLPModel = cyLPModel             # <<<<<<<<<<<<<<
 *         if cyLPModel:
 *             if isinstance(cyLPModel, CyLPModel):
 */
  __Pyx_INCREF(__pyx_v_cyLPModel);
  __Pyx_GIVEREF(__pyx_v_cyLPModel);
  __Pyx_GOTREF(__pyx_v_self->cyLPModel);
  __Pyx_DECREF(__pyx_v_self->cyLPModel);
  __pyx_v_self->cyLPModel = __pyx_v_cyLPModel;

  /* "CyLP/cy/CyClpSimplex.pyx":76
 * 
 *         self.cyLPModel = cyLPModel
 *         if cyLPModel:             # <<<<<<<<<<<<<<
 *             if isinstance(cyLPModel, CyLPModel):
 *                 self.loadFromCyLPModel(cyLPModel)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":77
 *         self.cyLPModel = cyLPModel
 *         if cyLPModel:
 *             if isinstance(cyLPModel, CyLPModel):             # <<<<<<<<<<<<<<
 *                 self.loadFromCyLPModel(cyLPModel)
 *             else:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_cyLPModel, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":78
 *         if cyLPModel:
 *             if isinstance(cyLPModel, CyLPModel):
 *                 self.loadFromCyLPModel(cyLPModel)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError('Expected a CyLPModel as an argument to ' \
 */
      __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_cyLPModel);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_cyLPModel);
      __Pyx_GIVEREF(__pyx_v_cyLPModel);
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":80
 *                 self.loadFromCyLPModel(cyLPModel)
 *             else:
 *                 raise TypeError('Expected a CyLPModel as an argument to ' \             # <<<<<<<<<<<<<<
 *                                 'CyLPSimplex constructor. Got %s' %
 *                                 cyLPModel.__class__)
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__TypeError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);

      /* "CyLP/cy/CyClpSimplex.pyx":82
 *                 raise TypeError('Expected a CyLPModel as an argument to ' \
 *                                 'CyLPSimplex constructor. Got %s' %
 *                                 cyLPModel.__class__)             # <<<<<<<<<<<<<<
 * 
 *     #def __dealloc__(self):
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s____class__); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_1), __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":87
 *     #    del self.CppSelf
 * 
 *     cdef setCppSelf(self,  CppIClpSimplex* s):             # <<<<<<<<<<<<<<
 *         del self.CppSelf
 *         self.CppSelf = s
 */

static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setCppSelf(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, IClpSimplex *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setCppSelf", 0);
  __Pyx_TraceCall("setCppSelf", __pyx_f[0], 87);

  /* "CyLP/cy/CyClpSimplex.pyx":88
 * 
 *     cdef setCppSelf(self,  CppIClpSimplex* s):
 *         del self.CppSelf             # <<<<<<<<<<<<<<
 *         self.CppSelf = s
 * 
 */
  delete __pyx_v_self->CppSelf;

  /* "CyLP/cy/CyClpSimplex.pyx":89
 *     cdef setCppSelf(self,  CppIClpSimplex* s):
 *         del self.CppSelf
 *         self.CppSelf = s             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __pyx_v_self->CppSelf = __pyx_v_s;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14basicVariables_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14basicVariables_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14basicVariables___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":96
 * 
 *     property basicVariables:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.int32_t, ndim=1] bv = np.zeros(self.nConstraints, dtype=np.int32)
 *             self.CppSelf.getBasics(<int*>bv.data)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14basicVariables___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyArrayObject *__pyx_v_bv = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bv;
  __Pyx_Buffer __pyx_pybuffer_bv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 96);
  __pyx_pybuffer_bv.pybuffer.buf = NULL;
  __pyx_pybuffer_bv.refcount = 0;
  __pyx_pybuffernd_bv.data = NULL;
  __pyx_pybuffernd_bv.rcbuffer = &__pyx_pybuffer_bv;

  /* "CyLP/cy/CyClpSimplex.pyx":97
 *     property basicVariables:
 *         def __get__(self):
 *             cdef np.ndarray[np.int32_t, ndim=1] bv = np.zeros(self.nConstraints, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.CppSelf.getBasics(<int*>bv.data)
 *             return bv
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__int32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bv.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_bv = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_bv.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_bv.diminfo[0].strides = __pyx_pybuffernd_bv.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bv.diminfo[0].shape = __pyx_pybuffernd_bv.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_bv = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":98
 *         def __get__(self):
 *             cdef np.ndarray[np.int32_t, ndim=1] bv = np.zeros(self.nConstraints, dtype=np.int32)
 *             self.CppSelf.getBasics(<int*>bv.data)             # <<<<<<<<<<<<<<
 *             return bv
 * 
 */
  __pyx_v_self->CppSelf->getBasics(((int *)__pyx_v_bv->data));

  /* "CyLP/cy/CyClpSimplex.pyx":99
 *             cdef np.ndarray[np.int32_t, ndim=1] bv = np.zeros(self.nConstraints, dtype=np.int32)
 *             self.CppSelf.getBasics(<int*>bv.data)
 *             return bv             # <<<<<<<<<<<<<<
 * 
 *     property rhs:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bv));
  __pyx_r = ((PyObject *)__pyx_v_bv);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bv.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.basicVariables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bv.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3rhs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3rhs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3rhs___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":102
 * 
 *     property rhs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             r = np.zeros(self.nConstraints, dtype=np.double)
 *             self.getRightHandSide(r)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3rhs___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 102);

  /* "CyLP/cy/CyClpSimplex.pyx":103
 *     property rhs:
 *         def __get__(self):
 *             r = np.zeros(self.nConstraints, dtype=np.double)             # <<<<<<<<<<<<<<
 *             self.getRightHandSide(r)
 *             #Py_INCREF(r)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_r = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":104
 *         def __get__(self):
 *             r = np.zeros(self.nConstraints, dtype=np.double)
 *             self.getRightHandSide(r)             # <<<<<<<<<<<<<<
 *             #Py_INCREF(r)
 *             return r
 */
  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getRightHandSide); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":106
 *             self.getRightHandSide(r)
 *             #Py_INCREF(r)
 *             return r             # <<<<<<<<<<<<<<
 * 
 *     property basisInverse:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_r);
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.rhs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12basisInverse_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12basisInverse_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12basisInverse___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":109
 * 
 *     property basisInverse:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             b = np.empty((self.nConstraints, self.nConstraints), dtype=np.double)
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12basisInverse___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_b = NULL;
  PyArrayObject *__pyx_v_c = 0;
  PyObject *__pyx_v_colInd = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 109);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "CyLP/cy/CyClpSimplex.pyx":110
 *     property basisInverse:
 *         def __get__(self):
 *             b = np.empty((self.nConstraints, self.nConstraints), dtype=np.double)             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 *             for colInd in xrange(self.nConstraints):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_v_b = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":111
 *         def __get__(self):
 *             b = np.empty((self.nConstraints, self.nConstraints), dtype=np.double)
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)             # <<<<<<<<<<<<<<
 *             for colInd in xrange(self.nConstraints):
 *                 self.getBInvCol(colInd, c)
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__double); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, ((PyObject *)__pyx_n_s__dtype), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_5)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_c = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_c.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":112
 *             b = np.empty((self.nConstraints, self.nConstraints), dtype=np.double)
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 *             for colInd in xrange(self.nConstraints):             # <<<<<<<<<<<<<<
 *                 self.getBInvCol(colInd, c)
 *                 b[:, colInd] = c
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_5)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_5)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_1)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF(__pyx_v_colInd);
    __pyx_v_colInd = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":113
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 *             for colInd in xrange(self.nConstraints):
 *                 self.getBInvCol(colInd, c)             # <<<<<<<<<<<<<<
 *                 b[:, colInd] = c
 *             return b
 */
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getBInvCol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_colInd);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_colInd);
    __Pyx_GIVEREF(__pyx_v_colInd);
    __Pyx_INCREF(((PyObject *)__pyx_v_c));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_c));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":114
 *             for colInd in xrange(self.nConstraints):
 *                 self.getBInvCol(colInd, c)
 *                 b[:, colInd] = c             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_k_slice_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_k_slice_2);
    __Pyx_GIVEREF(__pyx_k_slice_2);
    __Pyx_INCREF(__pyx_v_colInd);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_colInd);
    __Pyx_GIVEREF(__pyx_v_colInd);
    if (PyObject_SetItem(__pyx_v_b, ((PyObject *)__pyx_t_4), ((PyObject *)__pyx_v_c)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":115
 *                 self.getBInvCol(colInd, c)
 *                 b[:, colInd] = c
 *             return b             # <<<<<<<<<<<<<<
 * 
 *     property tableau:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_b);
  __pyx_r = __pyx_v_b;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.basisInverse.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_colInd);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7tableau_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7tableau_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7tableau___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":118
 * 
 *     property tableau:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             nAllVars = self.nVariables + self.nConstraints
 *             t = np.empty((self.nConstraints, nAllVars), dtype=np.double)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7tableau___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_nAllVars = NULL;
  PyObject *__pyx_v_t = NULL;
  PyArrayObject *__pyx_v_c = 0;
  PyObject *__pyx_v_colInd = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 118);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "CyLP/cy/CyClpSimplex.pyx":119
 *     property tableau:
 *         def __get__(self):
 *             nAllVars = self.nVariables + self.nConstraints             # <<<<<<<<<<<<<<
 *             t = np.empty((self.nConstraints, nAllVars), dtype=np.double)
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nAllVars = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":120
 *         def __get__(self):
 *             nAllVars = self.nVariables + self.nConstraints
 *             t = np.empty((self.nConstraints, nAllVars), dtype=np.double)             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 *             for colInd in xrange(nAllVars):
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_nAllVars);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_nAllVars);
  __Pyx_GIVEREF(__pyx_v_nAllVars);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_t = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":121
 *             nAllVars = self.nVariables + self.nConstraints
 *             t = np.empty((self.nConstraints, nAllVars), dtype=np.double)
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)             # <<<<<<<<<<<<<<
 *             for colInd in xrange(nAllVars):
 *                 self.getBInvACol(colInd, c)
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, ((PyObject *)__pyx_n_s__dtype), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_5)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_c = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_c.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":122
 *             t = np.empty((self.nConstraints, nAllVars), dtype=np.double)
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 *             for colInd in xrange(nAllVars):             # <<<<<<<<<<<<<<
 *                 self.getBInvACol(colInd, c)
 *                 t[:, colInd] = c
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_nAllVars);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_nAllVars);
  __Pyx_GIVEREF(__pyx_v_nAllVars);
  __pyx_t_5 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF(__pyx_v_colInd);
    __pyx_v_colInd = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":123
 *             cdef np.ndarray[np.double_t, ndim=1] c = np.zeros(self.nConstraints, dtype=np.double)
 *             for colInd in xrange(nAllVars):
 *                 self.getBInvACol(colInd, c)             # <<<<<<<<<<<<<<
 *                 t[:, colInd] = c
 *             return t
 */
    __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getBInvACol); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_colInd);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_colInd);
    __Pyx_GIVEREF(__pyx_v_colInd);
    __Pyx_INCREF(((PyObject *)__pyx_v_c));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_c));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
    __pyx_t_1 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":124
 *             for colInd in xrange(nAllVars):
 *                 self.getBInvACol(colInd, c)
 *                 t[:, colInd] = c             # <<<<<<<<<<<<<<
 *             return t
 * 
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_k_slice_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_k_slice_3);
    __Pyx_GIVEREF(__pyx_k_slice_3);
    __Pyx_INCREF(__pyx_v_colInd);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_colInd);
    __Pyx_GIVEREF(__pyx_v_colInd);
    if (PyObject_SetItem(__pyx_v_t, ((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_c)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":125
 *                 self.getBInvACol(colInd, c)
 *                 t[:, colInd] = c
 *             return t             # <<<<<<<<<<<<<<
 * 
 *     property objective:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.tableau.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nAllVars);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_colInd);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective___set__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_obj));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":132
 *         See the :ref:`modeling example <modeling-usage>`.
 *         '''
 *         def __set__(self, obj):             # <<<<<<<<<<<<<<
 *             if self.cyLPModel:
 *                 self.cyLPModel.objective = obj
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective___set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_o = NULL;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 132);

  /* "CyLP/cy/CyClpSimplex.pyx":133
 *         '''
 *         def __set__(self, obj):
 *             if self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 self.cyLPModel.objective = obj
 *                 o = self.cyLPModel.objective
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":134
 *         def __set__(self, obj):
 *             if self.cyLPModel:
 *                 self.cyLPModel.objective = obj             # <<<<<<<<<<<<<<
 *                 o = self.cyLPModel.objective
 * 
 */
    if (PyObject_SetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__objective, __pyx_v_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "CyLP/cy/CyClpSimplex.pyx":135
 *             if self.cyLPModel:
 *                 self.cyLPModel.objective = obj
 *                 o = self.cyLPModel.objective             # <<<<<<<<<<<<<<
 * 
 *                 if isinstance(o, (np.ndarray)):
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__objective); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_o = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":137
 *                 o = self.cyLPModel.objective
 * 
 *                 if isinstance(o, (np.ndarray)):             # <<<<<<<<<<<<<<
 *                     self.setObjectiveArray(o.astype(np.double))
 *                 if isinstance(o, (sparse.coo_matrix,
 */
    __pyx_t_2 = ((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray));
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "CyLP/cy/CyClpSimplex.pyx":138
 * 
 *                 if isinstance(o, (np.ndarray)):
 *                     self.setObjectiveArray(o.astype(np.double))             # <<<<<<<<<<<<<<
 *                 if isinstance(o, (sparse.coo_matrix,
 *                                                 sparse.csc_matrix,
 */
      __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setObjectiveArray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_o, __pyx_n_s__astype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "CyLP/cy/CyClpSimplex.pyx":139
 *                 if isinstance(o, (np.ndarray)):
 *                     self.setObjectiveArray(o.astype(np.double))
 *                 if isinstance(o, (sparse.coo_matrix,             # <<<<<<<<<<<<<<
 *                                                 sparse.csc_matrix,
 *                                                 sparse.csr_matrix,
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__coo_matrix); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":140
 *                     self.setObjectiveArray(o.astype(np.double))
 *                 if isinstance(o, (sparse.coo_matrix,
 *                                                 sparse.csc_matrix,             # <<<<<<<<<<<<<<
 *                                                 sparse.csr_matrix,
 *                                                 sparse.lil_matrix)):
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__csc_matrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":141
 *                 if isinstance(o, (sparse.coo_matrix,
 *                                                 sparse.csc_matrix,
 *                                                 sparse.csr_matrix,             # <<<<<<<<<<<<<<
 *                                                 sparse.lil_matrix)):
 *                     for i in xrange(self.nVariables):
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__csr_matrix); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":142
 *                                                 sparse.csc_matrix,
 *                                                 sparse.csr_matrix,
 *                                                 sparse.lil_matrix)):             # <<<<<<<<<<<<<<
 *                     for i in xrange(self.nVariables):
 *                         self.setObjectiveCoefficient(i, o[0, i])
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__lil_matrix); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_o, ((PyObject *)__pyx_t_5)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "CyLP/cy/CyClpSimplex.pyx":143
 *                                                 sparse.csr_matrix,
 *                                                 sparse.lil_matrix)):
 *                     for i in xrange(self.nVariables):             # <<<<<<<<<<<<<<
 *                         self.setObjectiveCoefficient(i, o[0, i])
 *                     #if not isinstance(o, sparse.coo_matrix):
 */
      __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_5 = __pyx_t_8(__pyx_t_6);
          if (unlikely(!__pyx_t_5)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":144
 *                                                 sparse.lil_matrix)):
 *                     for i in xrange(self.nVariables):
 *                         self.setObjectiveCoefficient(i, o[0, i])             # <<<<<<<<<<<<<<
 *                     #if not isinstance(o, sparse.coo_matrix):
 *                     #    o = o.tocoo()
 */
        __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_int_0);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        __Pyx_INCREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        __pyx_t_2 = PyObject_GetItem(__pyx_v_o, ((PyObject *)__pyx_t_3)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":152
 *                 #       self.cyLPModel.objective.astype(np.double))
 *             else:
 *                 raise Exception('To set the objective function of ' \             # <<<<<<<<<<<<<<
 *                                 'CyClpSimplex set CyLPSimplex.cyLPModel ' \
 *                                 'first.')
 */
    __pyx_t_6 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.objective.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_2__get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":155
 *                                 'CyClpSimplex set CyLPSimplex.cyLPModel ' \
 *                                 'first.')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getObjective()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_2__get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 155);

  /* "CyLP/cy/CyClpSimplex.pyx":156
 *                                 'first.')
 *         def __get__(self):
 *             return <object>self.CppSelf.getObjective()             # <<<<<<<<<<<<<<
 * 
 *     property iteration:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getObjective();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":162
 *         Number of iterations.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.numberIterations()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 162);

  /* "CyLP/cy/CyClpSimplex.pyx":163
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.numberIterations()             # <<<<<<<<<<<<<<
 * 
 *     property nRows:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->numberIterations()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.iteration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":169
 *         Number of rows, constraints.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumRows()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 169);

  /* "CyLP/cy/CyClpSimplex.pyx":170
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumRows()             # <<<<<<<<<<<<<<
 * 
 *     property nConstraints:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getNumRows()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nRows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":176
 *         Number of constraints, rows.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumRows()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 176);

  /* "CyLP/cy/CyClpSimplex.pyx":177
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumRows()             # <<<<<<<<<<<<<<
 * 
 *     property nVariables:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getNumRows()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nConstraints.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":183
 *         Number of variables, columns.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumCols()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 183);

  /* "CyLP/cy/CyClpSimplex.pyx":184
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumCols()             # <<<<<<<<<<<<<<
 * 
 *     property nCols:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getNumCols()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nVariables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":190
 *         Number of columns, variables.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumCols()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 190);

  /* "CyLP/cy/CyClpSimplex.pyx":191
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumCols()             # <<<<<<<<<<<<<<
 * 
 *     property coefMatrix:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getNumCols()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nCols.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10coefMatrix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10coefMatrix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10coefMatrix___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":197
 *         The coefficient matrix. A scipy sparse matrix.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             mat = self.matrix
 *             return csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10coefMatrix___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_mat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 197);

  /* "CyLP/cy/CyClpSimplex.pyx":198
 *         '''
 *         def __get__(self):
 *             mat = self.matrix             # <<<<<<<<<<<<<<
 *             return csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),
 *                              shape=(self.nConstraints, self.nVariables))
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":199
 *         def __get__(self):
 *             mat = self.matrix
 *             return csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),             # <<<<<<<<<<<<<<
 *                              shape=(self.nConstraints, self.nVariables))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__csc_matrixPlus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__elements); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__indices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__vectorStarts); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));

  /* "CyLP/cy/CyClpSimplex.pyx":200
 *             mat = self.matrix
 *             return csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),
 *                              shape=(self.nConstraints, self.nVariables))             # <<<<<<<<<<<<<<
 * 
 *     property matrix:
 */
  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, ((PyObject *)__pyx_n_s__shape), ((PyObject *)__pyx_t_6)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), ((PyObject *)__pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.coefMatrix.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":206
 *         The coefficient matrix. A CyCoinPackedMatrix.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()
 *             mat = CyCoinPackedMatrix()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  ICoinPackedMatrix *__pyx_v_cppMat;
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_mat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 206);

  /* "CyLP/cy/CyClpSimplex.pyx":207
 *         '''
 *         def __get__(self):
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()             # <<<<<<<<<<<<<<
 *             mat = CyCoinPackedMatrix()
 *             mat.CppSelf = cppMat
 */
  __pyx_v_cppMat = __pyx_v_self->CppSelf->getMatrix();

  /* "CyLP/cy/CyClpSimplex.pyx":208
 *         def __get__(self):
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()
 *             mat = CyCoinPackedMatrix()             # <<<<<<<<<<<<<<
 *             mat.CppSelf = cppMat
 *             return mat
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":209
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()
 *             mat = CyCoinPackedMatrix()
 *             mat.CppSelf = cppMat             # <<<<<<<<<<<<<<
 *             return mat
 * 
 */
  __pyx_v_mat->CppSelf = __pyx_v_cppMat;

  /* "CyLP/cy/CyClpSimplex.pyx":210
 *             mat = CyCoinPackedMatrix()
 *             mat.CppSelf = cppMat
 *             return mat             # <<<<<<<<<<<<<<
 * 
 *     property constraints:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = ((PyObject *)__pyx_v_mat);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.matrix.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":216
 *         Constraints.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 216);

  /* "CyLP/cy/CyClpSimplex.pyx":217
 *         '''
 *         def __get__(self):
 *             if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":218
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.constraints
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":220
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 *                 return self.cyLPModel.constraints             # <<<<<<<<<<<<<<
 * 
 *     property variableNames:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__constraints); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.constraints.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":226
 *         variable names
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.getVariableNames()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 226);

  /* "CyLP/cy/CyClpSimplex.pyx":227
 *         '''
 *         def __get__(self):
 *             return self.getVariableNames()             # <<<<<<<<<<<<<<
 * 
 *     property variables:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getVariableNames); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.variableNames.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":233
 *         Variables.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 233);

  /* "CyLP/cy/CyClpSimplex.pyx":234
 *         '''
 *         def __get__(self):
 *             if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":235
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.variables
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":237
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 *                 return self.cyLPModel.variables             # <<<<<<<<<<<<<<
 * 
 * #    def getNumRows(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__variables); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.variables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":252
 *         The objective value. Readonly.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.objectiveValue()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 252);

  /* "CyLP/cy/CyClpSimplex.pyx":253
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.objectiveValue()             # <<<<<<<<<<<<<<
 * 
 *     property primalVariableSolution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->CppSelf->objectiveValue()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.objectiveValue.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":261
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_dimRanges = NULL;
  PyObject *__pyx_v_element = NULL;
  PyObject *__pyx_v_names = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 261);

  /* "CyLP/cy/CyClpSimplex.pyx":264
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             ret = <object>self.CppSelf.getPrimalColumnSolution()             # <<<<<<<<<<<<<<
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 */
  __pyx_t_1 = __pyx_v_self->CppSelf->getPrimalColumnSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((PyObject *)__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":265
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             ret = <object>self.CppSelf.getPrimalColumnSolution()
 *             if self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 m = self.cyLPModel
 *                 inds = m.inds
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":266
 *             ret = <object>self.CppSelf.getPrimalColumnSolution()
 *             if self.cyLPModel:
 *                 m = self.cyLPModel             # <<<<<<<<<<<<<<
 *                 inds = m.inds
 *                 d = {}
 */
    __pyx_t_3 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_m = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":267
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 *                 inds = m.inds             # <<<<<<<<<<<<<<
 *                 d = {}
 *                 for v in inds.varIndex.keys():
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_inds = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":268
 *                 m = self.cyLPModel
 *                 inds = m.inds
 *                 d = {}             # <<<<<<<<<<<<<<
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_d = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":269
 *                 inds = m.inds
 *                 d = {}
 *                 for v in inds.varIndex.keys():             # <<<<<<<<<<<<<<
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__keys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF(__pyx_v_v);
      __pyx_v_v = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":270
 *                 d = {}
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]             # <<<<<<<<<<<<<<
 *                     var = m.getVarByName(v)
 *                     if var.dims:
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_3, __pyx_v_v); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_t_7); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyObject_SetItem(__pyx_v_d, __pyx_v_v, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":271
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)             # <<<<<<<<<<<<<<
 *                     if var.dims:
 *                         d[v] = CyLPSolution()
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__getVarByName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_v);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_v);
      __Pyx_GIVEREF(__pyx_v_v);
      __pyx_t_8 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_v_var);
      __pyx_v_var = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":272
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)
 *                     if var.dims:             # <<<<<<<<<<<<<<
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]
 */
      __pyx_t_8 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dims); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_2) {

        /* "CyLP/cy/CyClpSimplex.pyx":273
 *                     var = m.getVarByName(v)
 *                     if var.dims:
 *                         d[v] = CyLPSolution()             # <<<<<<<<<<<<<<
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):
 */
        __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPSolution); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyObject_SetItem(__pyx_v_d, __pyx_v_v, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":274
 *                     if var.dims:
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]             # <<<<<<<<<<<<<<
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dims); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        if (PyList_CheckExact(__pyx_t_8) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_3 = __pyx_t_8; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            __pyx_t_8 = __pyx_t_10(__pyx_t_3);
            if (unlikely(!__pyx_t_8)) {
              if (PyErr_Occurred()) {
                if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF(__pyx_v_i);
          __pyx_v_i = __pyx_t_8;
          __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_v_i);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          __pyx_t_11 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
          if (unlikely(__Pyx_PyList_Append(__pyx_t_7, (PyObject*)__pyx_t_11))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = ((PyObject *)__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        __Pyx_XDECREF(((PyObject *)__pyx_v_dimRanges));
        __pyx_v_dimRanges = ((PyObject*)__pyx_t_3);
        __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":275
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):             # <<<<<<<<<<<<<<
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 *                 ret = d
 */
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__product); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = PySequence_Tuple(((PyObject *)__pyx_v_dimRanges)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
        __pyx_t_11 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        if (PyList_CheckExact(__pyx_t_11) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_7 = __pyx_t_11; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_7)) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_7)) {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            __pyx_t_11 = __pyx_t_10(__pyx_t_7);
            if (unlikely(!__pyx_t_11)) {
              if (PyErr_Occurred()) {
                if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __Pyx_XDECREF(__pyx_v_element);
          __pyx_v_element = __pyx_t_11;
          __pyx_t_11 = 0;

          /* "CyLP/cy/CyClpSimplex.pyx":276
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]             # <<<<<<<<<<<<<<
 *                 ret = d
 *             else:
 */
          __pyx_t_11 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s____getitem__); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_v_element);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_element);
          __Pyx_GIVEREF(__pyx_v_element);
          __pyx_t_8 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
          __pyx_t_3 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__indices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_t_8); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyObject_GetItem(__pyx_v_d, __pyx_v_v); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          if (PyObject_SetItem(__pyx_t_8, __pyx_v_element, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":277
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 *                 ret = d             # <<<<<<<<<<<<<<
 *             else:
 *                 names = self.variableNames
 */
    __Pyx_INCREF(__pyx_v_d);
    __Pyx_DECREF(__pyx_v_ret);
    __pyx_v_ret = __pyx_v_d;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":279
 *                 ret = d
 *             else:
 *                 names = self.variableNames             # <<<<<<<<<<<<<<
 *                 if names:
 *                     d = CyLPSolution()
 */
    __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__variableNames); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_names = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":280
 *             else:
 *                 names = self.variableNames
 *                 if names:             # <<<<<<<<<<<<<<
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_names); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":281
 *                 names = self.variableNames
 *                 if names:
 *                     d = CyLPSolution()             # <<<<<<<<<<<<<<
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPSolution); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_d = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":282
 *                 if names:
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):             # <<<<<<<<<<<<<<
 *                         d[names[i]] = ret[i]
 *                     ret = d
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_names); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":283
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]             # <<<<<<<<<<<<<<
 *                     ret = d
 *             return ret
 */
        __pyx_t_7 = PyObject_GetItem(__pyx_v_ret, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PyObject_GetItem(__pyx_v_names, __pyx_v_i); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        if (PyObject_SetItem(__pyx_v_d, __pyx_t_3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":284
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]
 *                     ret = d             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
      __Pyx_INCREF(__pyx_v_d);
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_v_d;
      goto __pyx_L11;
    }
    __pyx_L11:;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":285
 *                         d[names[i]] = ret[i]
 *                     ret = d
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *     property primalVariableSolutionAll:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalVariableSolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_dimRanges);
  __Pyx_XDECREF(__pyx_v_element);
  __Pyx_XDECREF(__pyx_v_names);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":293
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 293);

  /* "CyLP/cy/CyClpSimplex.pyx":296
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             return <object>self.CppSelf.getPrimalColumnSolutionAll()             # <<<<<<<<<<<<<<
 * 
 *     property solution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getPrimalColumnSolutionAll();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":304
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 304);

  /* "CyLP/cy/CyClpSimplex.pyx":307
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             return <object>self.CppSelf.getSolutionRegion()             # <<<<<<<<<<<<<<
 * 
 *     property cost:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getSolutionRegion();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4cost_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4cost_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4cost___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":315
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4cost___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 315);

  /* "CyLP/cy/CyClpSimplex.pyx":318
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             return <object>self.CppSelf.getCostRegion()             # <<<<<<<<<<<<<<
 * 
 *     property dualVariableSolution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getCostRegion();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":326
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             ret = <object>self.CppSelf.getDualColumnSolution()
 *             if self.cyLPModel:
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_dimRanges = NULL;
  PyObject *__pyx_v_element = NULL;
  PyObject *__pyx_v_names = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 326);

  /* "CyLP/cy/CyClpSimplex.pyx":327
 *         '''
 *         def __get__(self):
 *             ret = <object>self.CppSelf.getDualColumnSolution()             # <<<<<<<<<<<<<<
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 */
  __pyx_t_1 = __pyx_v_self->CppSelf->getDualColumnSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((PyObject *)__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":328
 *         def __get__(self):
 *             ret = <object>self.CppSelf.getDualColumnSolution()
 *             if self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 m = self.cyLPModel
 *                 inds = m.inds
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":329
 *             ret = <object>self.CppSelf.getDualColumnSolution()
 *             if self.cyLPModel:
 *                 m = self.cyLPModel             # <<<<<<<<<<<<<<
 *                 inds = m.inds
 *                 d = {}
 */
    __pyx_t_3 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_m = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":330
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 *                 inds = m.inds             # <<<<<<<<<<<<<<
 *                 d = {}
 *                 for v in inds.varIndex.keys():
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_inds = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":331
 *                 m = self.cyLPModel
 *                 inds = m.inds
 *                 d = {}             # <<<<<<<<<<<<<<
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_d = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":332
 *                 inds = m.inds
 *                 d = {}
 *                 for v in inds.varIndex.keys():             # <<<<<<<<<<<<<<
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__keys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF(__pyx_v_v);
      __pyx_v_v = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":333
 *                 d = {}
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]             # <<<<<<<<<<<<<<
 *                     var = m.getVarByName(v)
 *                     if var.dims:
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_3, __pyx_v_v); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_t_7); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyObject_SetItem(__pyx_v_d, __pyx_v_v, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":334
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)             # <<<<<<<<<<<<<<
 *                     if var.dims:
 *                         d[v] = CyLPSolution()
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__getVarByName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_v);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_v);
      __Pyx_GIVEREF(__pyx_v_v);
      __pyx_t_8 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_v_var);
      __pyx_v_var = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":335
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)
 *                     if var.dims:             # <<<<<<<<<<<<<<
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]
 */
      __pyx_t_8 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dims); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_2) {

        /* "CyLP/cy/CyClpSimplex.pyx":336
 *                     var = m.getVarByName(v)
 *                     if var.dims:
 *                         d[v] = CyLPSolution()             # <<<<<<<<<<<<<<
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):
 */
        __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPSolution); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyObject_SetItem(__pyx_v_d, __pyx_v_v, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":337
 *                     if var.dims:
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]             # <<<<<<<<<<<<<<
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dims); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        if (PyList_CheckExact(__pyx_t_8) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_3 = __pyx_t_8; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            __pyx_t_8 = __pyx_t_10(__pyx_t_3);
            if (unlikely(!__pyx_t_8)) {
              if (PyErr_Occurred()) {
                if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF(__pyx_v_i);
          __pyx_v_i = __pyx_t_8;
          __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_v_i);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          __pyx_t_11 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
          if (unlikely(__Pyx_PyList_Append(__pyx_t_7, (PyObject*)__pyx_t_11))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = ((PyObject *)__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        __Pyx_XDECREF(((PyObject *)__pyx_v_dimRanges));
        __pyx_v_dimRanges = ((PyObject*)__pyx_t_3);
        __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":338
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):             # <<<<<<<<<<<<<<
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 *                 ret = d
 */
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__product); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = PySequence_Tuple(((PyObject *)__pyx_v_dimRanges)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
        __pyx_t_11 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        if (PyList_CheckExact(__pyx_t_11) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_7 = __pyx_t_11; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_7)) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_7)) {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            __pyx_t_11 = __pyx_t_10(__pyx_t_7);
            if (unlikely(!__pyx_t_11)) {
              if (PyErr_Occurred()) {
                if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __Pyx_XDECREF(__pyx_v_element);
          __pyx_v_element = __pyx_t_11;
          __pyx_t_11 = 0;

          /* "CyLP/cy/CyClpSimplex.pyx":339
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]             # <<<<<<<<<<<<<<
 *                 ret = d
 *             else:
 */
          __pyx_t_11 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s____getitem__); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_v_element);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_element);
          __Pyx_GIVEREF(__pyx_v_element);
          __pyx_t_8 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
          __pyx_t_3 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__indices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_t_8); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyObject_GetItem(__pyx_v_d, __pyx_v_v); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          if (PyObject_SetItem(__pyx_t_8, __pyx_v_element, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":340
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 *                 ret = d             # <<<<<<<<<<<<<<
 *             else:
 *                 names = self.variableNames
 */
    __Pyx_INCREF(__pyx_v_d);
    __Pyx_DECREF(__pyx_v_ret);
    __pyx_v_ret = __pyx_v_d;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":342
 *                 ret = d
 *             else:
 *                 names = self.variableNames             # <<<<<<<<<<<<<<
 *                 if names:
 *                     d = CyLPSolution()
 */
    __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__variableNames); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_names = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":343
 *             else:
 *                 names = self.variableNames
 *                 if names:             # <<<<<<<<<<<<<<
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_names); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":344
 *                 names = self.variableNames
 *                 if names:
 *                     d = CyLPSolution()             # <<<<<<<<<<<<<<
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPSolution); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_d = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":345
 *                 if names:
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):             # <<<<<<<<<<<<<<
 *                         d[names[i]] = ret[i]
 *                     ret = d
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_names); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":346
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]             # <<<<<<<<<<<<<<
 *                     ret = d
 *             return ret
 */
        __pyx_t_7 = PyObject_GetItem(__pyx_v_ret, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PyObject_GetItem(__pyx_v_names, __pyx_v_i); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        if (PyObject_SetItem(__pyx_v_d, __pyx_t_3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":347
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]
 *                     ret = d             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
      __Pyx_INCREF(__pyx_v_d);
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_v_d;
      goto __pyx_L11;
    }
    __pyx_L11:;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":348
 *                         d[names[i]] = ret[i]
 *                     ret = d
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *     property primalConstraintSolution:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dualVariableSolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_dimRanges);
  __Pyx_XDECREF(__pyx_v_element);
  __Pyx_XDECREF(__pyx_v_names);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":356
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             ret = <object>self.CppSelf.getPrimalRowSolution()
 *             if self.cyLPModel:
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 356);

  /* "CyLP/cy/CyClpSimplex.pyx":357
 *         '''
 *         def __get__(self):
 *             ret = <object>self.CppSelf.getPrimalRowSolution()             # <<<<<<<<<<<<<<
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 */
  __pyx_t_1 = __pyx_v_self->CppSelf->getPrimalRowSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((PyObject *)__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":358
 *         def __get__(self):
 *             ret = <object>self.CppSelf.getPrimalRowSolution()
 *             if self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 m = self.cyLPModel
 *                 inds = m.inds
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":359
 *             ret = <object>self.CppSelf.getPrimalRowSolution()
 *             if self.cyLPModel:
 *                 m = self.cyLPModel             # <<<<<<<<<<<<<<
 *                 inds = m.inds
 *                 d = {}
 */
    __pyx_t_3 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_m = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":360
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 *                 inds = m.inds             # <<<<<<<<<<<<<<
 *                 d = {}
 *                 for c in inds.constIndex.keys():
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_inds = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":361
 *                 m = self.cyLPModel
 *                 inds = m.inds
 *                 d = {}             # <<<<<<<<<<<<<<
 *                 for c in inds.constIndex.keys():
 *                     d[c] = ret[inds.constIndex[c]]
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_d = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":362
 *                 inds = m.inds
 *                 d = {}
 *                 for c in inds.constIndex.keys():             # <<<<<<<<<<<<<<
 *                     d[c] = ret[inds.constIndex[c]]
 *                 ret = d
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__keys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF(__pyx_v_c);
      __pyx_v_c = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":363
 *                 d = {}
 *                 for c in inds.constIndex.keys():
 *                     d[c] = ret[inds.constIndex[c]]             # <<<<<<<<<<<<<<
 *                 ret = d
 *             else:
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_3, __pyx_v_c); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_t_7); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyDict_SetItem(((PyObject *)__pyx_v_d), __pyx_v_c, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":364
 *                 for c in inds.constIndex.keys():
 *                     d[c] = ret[inds.constIndex[c]]
 *                 ret = d             # <<<<<<<<<<<<<<
 *             else:
 *                 pass
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_d));
    __Pyx_DECREF(__pyx_v_ret);
    __pyx_v_ret = ((PyObject *)__pyx_v_d);
    goto __pyx_L3;
  }
  /*else*/ {
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":373
 *                 #        d[names[i]] = ret[i]
 *                 #    ret = d
 *             return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalConstraintSolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":382
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             ret =  <object>self.CppSelf.getDualRowSolution()
 *             if self.cyLPModel:
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 382);

  /* "CyLP/cy/CyClpSimplex.pyx":383
 *         '''
 *         def __get__(self):
 *             ret =  <object>self.CppSelf.getDualRowSolution()             # <<<<<<<<<<<<<<
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 */
  __pyx_t_1 = __pyx_v_self->CppSelf->getDualRowSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((PyObject *)__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":384
 *         def __get__(self):
 *             ret =  <object>self.CppSelf.getDualRowSolution()
 *             if self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 m = self.cyLPModel
 *                 inds = m.inds
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":385
 *             ret =  <object>self.CppSelf.getDualRowSolution()
 *             if self.cyLPModel:
 *                 m = self.cyLPModel             # <<<<<<<<<<<<<<
 *                 inds = m.inds
 *                 d = {}
 */
    __pyx_t_3 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_m = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":386
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 *                 inds = m.inds             # <<<<<<<<<<<<<<
 *                 d = {}
 *                 for c in inds.constIndex.keys():
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_inds = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":387
 *                 m = self.cyLPModel
 *                 inds = m.inds
 *                 d = {}             # <<<<<<<<<<<<<<
 *                 for c in inds.constIndex.keys():
 *                     d[c] = ret[inds.constIndex[c]]
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_d = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":388
 *                 inds = m.inds
 *                 d = {}
 *                 for c in inds.constIndex.keys():             # <<<<<<<<<<<<<<
 *                     d[c] = ret[inds.constIndex[c]]
 *                 ret = d
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__keys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF(__pyx_v_c);
      __pyx_v_c = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":389
 *                 d = {}
 *                 for c in inds.constIndex.keys():
 *                     d[c] = ret[inds.constIndex[c]]             # <<<<<<<<<<<<<<
 *                 ret = d
 *             else:
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_3, __pyx_v_c); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_t_7); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyDict_SetItem(((PyObject *)__pyx_v_d), __pyx_v_c, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":390
 *                 for c in inds.constIndex.keys():
 *                     d[c] = ret[inds.constIndex[c]]
 *                 ret = d             # <<<<<<<<<<<<<<
 *             else:
 *                 pass
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_d));
    __Pyx_DECREF(__pyx_v_ret);
    __pyx_v_ret = ((PyObject *)__pyx_v_d);
    goto __pyx_L3;
  }
  /*else*/ {
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":399
 *                 #        d[names[i]] = ret[i]
 *                 #    ret = d
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *     property reducedCosts:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dualConstraintSolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":407
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.getReducedCosts()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 407);

  /* "CyLP/cy/CyClpSimplex.pyx":408
 *         '''
 *         def __get__(self):
 *             return self.getReducedCosts()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, np.ndarray[np.double_t, ndim=1] rc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->getReducedCosts(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.reducedCosts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rc); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rc) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rc), __pyx_ptype_5numpy_ndarray, 1, "rc", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_2__set__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_rc));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":410
 *             return self.getReducedCosts()
 * 
 *         def __set__(self, np.ndarray[np.double_t, ndim=1] rc):             # <<<<<<<<<<<<<<
 *             self.CppSelf.setReducedCosts(<double*> rc.data)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rc) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rc;
  __Pyx_Buffer __pyx_pybuffer_rc;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 410);
  __pyx_pybuffer_rc.pybuffer.buf = NULL;
  __pyx_pybuffer_rc.refcount = 0;
  __pyx_pybuffernd_rc.data = NULL;
  __pyx_pybuffernd_rc.rcbuffer = &__pyx_pybuffer_rc;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rc.rcbuffer->pybuffer, (PyObject*)__pyx_v_rc, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rc.diminfo[0].strides = __pyx_pybuffernd_rc.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rc.diminfo[0].shape = __pyx_pybuffernd_rc.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":411
 * 
 *         def __set__(self, np.ndarray[np.double_t, ndim=1] rc):
 *             self.CppSelf.setReducedCosts(<double*> rc.data)             # <<<<<<<<<<<<<<
 * 
 *     cpdef getReducedCosts(self):
 */
  __pyx_v_self->CppSelf->setReducedCosts(((double *)__pyx_v_rc->data));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rc.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.reducedCosts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rc.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":413
 *             self.CppSelf.setReducedCosts(<double*> rc.data)
 * 
 *     cpdef getReducedCosts(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getReducedCosts()
 * 
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getReducedCosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getReducedCosts(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getReducedCosts", 0);
  __Pyx_TraceCall("getReducedCosts", __pyx_f[0], 413);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getReducedCosts); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getReducedCosts)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":414
 * 
 *     cpdef getReducedCosts(self):
 *         return <object>self.CppSelf.getReducedCosts()             # <<<<<<<<<<<<<<
 * 
 *     property variablesUpper:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getReducedCosts();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getReducedCosts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getReducedCosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getReducedCosts[] = "CyClpSimplex.getReducedCosts(self)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getReducedCosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getReducedCosts (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getReducedCosts(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":413
 *             self.CppSelf.setReducedCosts(<double*> rc.data)
 * 
 *     cpdef getReducedCosts(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getReducedCosts()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getReducedCosts(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getReducedCosts", 0);
  __Pyx_TraceCall("getReducedCosts", __pyx_f[0], 413);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->getReducedCosts(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getReducedCosts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":422
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getColUpper()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 422);

  /* "CyLP/cy/CyClpSimplex.pyx":423
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getColUpper()             # <<<<<<<<<<<<<<
 * 
 *     property variablesLower:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getColUpper();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":431
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getColLower()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 431);

  /* "CyLP/cy/CyClpSimplex.pyx":432
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getColLower()             # <<<<<<<<<<<<<<
 * 
 *     property constraintsUpper:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getColLower();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":440
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getRowUpper()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 440);

  /* "CyLP/cy/CyClpSimplex.pyx":441
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getRowUpper()             # <<<<<<<<<<<<<<
 * 
 *     property constraintsLower:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getRowUpper();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":449
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getRowLower()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 449);

  /* "CyLP/cy/CyClpSimplex.pyx":450
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getRowLower()             # <<<<<<<<<<<<<<
 * 
 *     property lower:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getRowLower();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5lower_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5lower_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5lower___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":458
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getLower()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5lower___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 458);

  /* "CyLP/cy/CyClpSimplex.pyx":459
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getLower()             # <<<<<<<<<<<<<<
 * 
 *     property upper:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getLower();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5upper_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5upper_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5upper___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":467
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getUpper()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5upper___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 467);

  /* "CyLP/cy/CyClpSimplex.pyx":468
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getUpper()             # <<<<<<<<<<<<<<
 * 
 *     property status:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->CppSelf->getUpper();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":474
 *         A Numpy array of all the variables' status
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.getStatusArray()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 474);

  /* "CyLP/cy/CyClpSimplex.pyx":475
 *         '''
 *         def __get__(self):
 *             return self.getStatusArray()             # <<<<<<<<<<<<<<
 * 
 *     cpdef getStatusArray(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->getStatusArray(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":477
 *             return self.getStatusArray()
 * 
 *     cpdef getStatusArray(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getStatusArray()
 * 
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusArray(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getStatusArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusArray", 0);
  __Pyx_TraceCall("getStatusArray", __pyx_f[0], 477);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getStatusArray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusArray)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":478
 * 
 *     cpdef getStatusArray(self):
 *         return <object>self.CppSelf.getStatusArray()             # <<<<<<<<<<<<<<
 * 
 *     property freeOrSuperBasicVarInds:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getStatusArray();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusArray(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusArray[] = "CyClpSimplex.getStatusArray(self)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusArray(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStatusArray (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":477
 *             return self.getStatusArray()
 * 
 *     cpdef getStatusArray(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getStatusArray()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusArray", 0);
  __Pyx_TraceCall("getStatusArray", __pyx_f[0], 477);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->getStatusArray(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":484
 *         The index set of variables that are *free* or *superbasic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return np.where((status & 7 == 4) | (status & 7 == 0))[0]
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 484);

  /* "CyLP/cy/CyClpSimplex.pyx":485
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return np.where((status & 7 == 4) | (status & 7 == 0))[0]
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":486
 *         def __get__(self):
 *             status = self.status
 *             return np.where((status & 7 == 4) | (status & 7 == 0))[0]             # <<<<<<<<<<<<<<
 * 
 *     property notBasicOrFixedOrFlaggedVarInds:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__where); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Or(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.freeOrSuperBasicVarInds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":492
 *         The index set of variables that are not *basic* or *fixed*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return np.where((status & 7 != 1) &
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 492);

  /* "CyLP/cy/CyClpSimplex.pyx":493
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":494
 *         def __get__(self):
 *             status = self.status
 *             return np.where((status & 7 != 1) &             # <<<<<<<<<<<<<<
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "CyLP/cy/CyClpSimplex.pyx":496
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]             # <<<<<<<<<<<<<<
 * 
 *     property varIsFree:
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__where); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":494
 *         def __get__(self):
 *             status = self.status
 *             return np.where((status & 7 != 1) &             # <<<<<<<<<<<<<<
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]
 */
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":495
 *             status = self.status
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &             # <<<<<<<<<<<<<<
 *                             (status & 64 == 0))[0]
 * 
 */
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_int_5, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":496
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]             # <<<<<<<<<<<<<<
 * 
 *     property varIsFree:
 */
  __pyx_t_4 = PyNumber_And(__pyx_v_status, __pyx_int_64); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_And(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.notBasicOrFixedOrFlaggedVarInds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":502
 *         The index set of variables that are *free*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 502);

  /* "CyLP/cy/CyClpSimplex.pyx":503
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":504
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 0)             # <<<<<<<<<<<<<<
 * 
 *     property varIsBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsFree.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":510
 *         The index set of variables that are *basic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 1)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 510);

  /* "CyLP/cy/CyClpSimplex.pyx":511
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 1)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":512
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 1)             # <<<<<<<<<<<<<<
 * 
 *     property varIsAtUpperBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":518
 *         The index set of variables that are at their upper bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 2)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 518);

  /* "CyLP/cy/CyClpSimplex.pyx":519
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 2)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":520
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 2)             # <<<<<<<<<<<<<<
 * 
 *     property varIsAtLowerBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsAtUpperBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":526
 *         The index set of variables that are at their lower bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 3)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 526);

  /* "CyLP/cy/CyClpSimplex.pyx":527
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 3)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":528
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 3)             # <<<<<<<<<<<<<<
 * 
 *     property varIsSuperBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsAtLowerBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":534
 *         The index set of variables that are *superbasic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 4)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 534);

  /* "CyLP/cy/CyClpSimplex.pyx":535
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 4)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":536
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 4)             # <<<<<<<<<<<<<<
 * 
 *     property varIsFixed:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsSuperBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":542
 *         The index set of variables that are *fixed*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 5)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 542);

  /* "CyLP/cy/CyClpSimplex.pyx":543
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 5)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":544
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 5)             # <<<<<<<<<<<<<<
 * 
 *     property varIsFlagged:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsFixed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":550
 *         The index set of variables that are *flagged*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 64 != 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 550);

  /* "CyLP/cy/CyClpSimplex.pyx":551
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 64 != 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":552
 *         def __get__(self):
 *             status = self.status
 *             return (status & 64 != 0)             # <<<<<<<<<<<<<<
 * 
 *     property varNotFree:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsFlagged.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":558
 *         The index set of variables that are NOT *free*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 558);

  /* "CyLP/cy/CyClpSimplex.pyx":559
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":560
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 0)             # <<<<<<<<<<<<<<
 * 
 *     property varNotBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotFree.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":566
 *         The index set of variables that are NOT *basic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 1)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 566);

  /* "CyLP/cy/CyClpSimplex.pyx":567
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 1)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":568
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 1)             # <<<<<<<<<<<<<<
 * 
 *     property varNotAtUpperBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":574
 *         The index set of variables that are NOT at their upper bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 2)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 574);

  /* "CyLP/cy/CyClpSimplex.pyx":575
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 2)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":576
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 2)             # <<<<<<<<<<<<<<
 * 
 *     property varNotAtLowerBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotAtUpperBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":582
 *         The index set of variables that are NOT at their lower bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 3)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 582);

  /* "CyLP/cy/CyClpSimplex.pyx":583
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 3)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":584
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 3)             # <<<<<<<<<<<<<<
 * 
 *     property varNotSuperBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotAtLowerBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":590
 *         The index set of variables that are NOT *superbasic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 4)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 590);

  /* "CyLP/cy/CyClpSimplex.pyx":591
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 4)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":592
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 4)             # <<<<<<<<<<<<<<
 * 
 *     property varNotFixed:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotSuperBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":598
 *         The index set of variables that are NOT *fixed*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 5)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 598);

  /* "CyLP/cy/CyClpSimplex.pyx":599
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 5)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":600
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 5)             # <<<<<<<<<<<<<<
 * 
 *     property varNotFlagged:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_5, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotFixed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":606
 *         The index set of variables that are NOT flagged.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 64 == 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 606);

  /* "CyLP/cy/CyClpSimplex.pyx":607
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 64 == 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":608
 *         def __get__(self):
 *             status = self.status
 *             return (status & 64 == 0)             # <<<<<<<<<<<<<<
 * 
 *     property Hessian:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotFlagged.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":611
 * 
 *     property Hessian:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.Hessian
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 611);

  /* "CyLP/cy/CyClpSimplex.pyx":612
 *     property Hessian:
 *         def __get__(self):
 *             return self.Hessian             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mat):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Hessian);
  __pyx_r = __pyx_v_self->Hessian;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mat); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mat) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_2__set__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_mat));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":614
 *             return self.Hessian
 * 
 *         def __set__(self, mat):             # <<<<<<<<<<<<<<
 *             m = None
 *             try:
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_mat) {
  PyObject *__pyx_v_m = NULL;
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_coinMat = NULL;
  PyObject *__pyx_v_n = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 614);

  /* "CyLP/cy/CyClpSimplex.pyx":615
 * 
 *         def __set__(self, mat):
 *             m = None             # <<<<<<<<<<<<<<
 *             try:
 *                 m = mat.tocoo()
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_m = Py_None;

  /* "CyLP/cy/CyClpSimplex.pyx":616
 *         def __set__(self, mat):
 *             m = None
 *             try:             # <<<<<<<<<<<<<<
 *                 m = mat.tocoo()
 *             except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":617
 *             m = None
 *             try:
 *                 m = mat.tocoo()             # <<<<<<<<<<<<<<
 *             except:
 *                 raise Exception('Hessian can be set to a matrix that ' \
 */
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__tocoo); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_v_m);
      __pyx_v_m = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":618
 *             try:
 *                 m = mat.tocoo()
 *             except:             # <<<<<<<<<<<<<<
 *                 raise Exception('Hessian can be set to a matrix that ' \
 *                                             'implements *tocoo* method')
 */
    /*except:*/ {
      __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.Hessian.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);

      /* "CyLP/cy/CyClpSimplex.pyx":619
 *                 m = mat.tocoo()
 *             except:
 *                 raise Exception('Hessian can be set to a matrix that ' \             # <<<<<<<<<<<<<<
 *                                             'implements *tocoo* method')
 *             if m:
 */
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":621
 *                 raise Exception('Hessian can be set to a matrix that ' \
 *                                             'implements *tocoo* method')
 *             if m:             # <<<<<<<<<<<<<<
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)
 *                 n = self.nVariables
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_m); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_8) {

    /* "CyLP/cy/CyClpSimplex.pyx":622
 *                                             'implements *tocoo* method')
 *             if m:
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)             # <<<<<<<<<<<<<<
 *                 n = self.nVariables
 *                 if coinMat.majorDim < n:
 */
    __pyx_t_6 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__row); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__col); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__data); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)), ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
    __pyx_v_coinMat = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":623
 *             if m:
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)
 *                 n = self.nVariables             # <<<<<<<<<<<<<<
 *                 if coinMat.majorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 */
    __pyx_t_7 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_n = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":624
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)
 *                 n = self.nVariables
 *                 if coinMat.majorDim < n:             # <<<<<<<<<<<<<<
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendCol()
 */
    __pyx_t_7 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__majorDim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_7, __pyx_v_n, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_8) {

      /* "CyLP/cy/CyClpSimplex.pyx":625
 *                 n = self.nVariables
 *                 if coinMat.majorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):             # <<<<<<<<<<<<<<
 *                         coinMat.appendCol()
 *                 if coinMat.minorDim < n:
 */
      __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__majorDim); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyNumber_Subtract(__pyx_v_n, __pyx_t_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_9 = __pyx_t_7; __Pyx_INCREF(__pyx_t_9); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_9)) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_9, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_9)) {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_9, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_11(__pyx_t_9);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":626
 *                 if coinMat.majorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendCol()             # <<<<<<<<<<<<<<
 *                 if coinMat.minorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 */
        __pyx_t_7 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__appendCol); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L14;
    }
    __pyx_L14:;

    /* "CyLP/cy/CyClpSimplex.pyx":627
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendCol()
 *                 if coinMat.minorDim < n:             # <<<<<<<<<<<<<<
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendRow()
 */
    __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__minorDim); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_9, __pyx_v_n, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_8) {

      /* "CyLP/cy/CyClpSimplex.pyx":628
 *                         coinMat.appendCol()
 *                 if coinMat.minorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):             # <<<<<<<<<<<<<<
 *                         coinMat.appendRow()
 *             self.loadQuadraticObjective(coinMat)
 */
      __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__majorDim); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PyNumber_Subtract(__pyx_v_n, __pyx_t_5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      if (PyList_CheckExact(__pyx_t_9) || PyTuple_CheckExact(__pyx_t_9)) {
        __pyx_t_5 = __pyx_t_9; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      for (;;) {
        if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_5)) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_5)) {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_9 = __pyx_t_11(__pyx_t_5);
          if (unlikely(!__pyx_t_9)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_9;
        __pyx_t_9 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":629
 *                 if coinMat.minorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendRow()             # <<<<<<<<<<<<<<
 *             self.loadQuadraticObjective(coinMat)
 * 
 */
        __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__appendRow); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L17;
    }
    __pyx_L17:;
    goto __pyx_L13;
  }
  __pyx_L13:;

  /* "CyLP/cy/CyClpSimplex.pyx":630
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendRow()
 *             self.loadQuadraticObjective(coinMat)             # <<<<<<<<<<<<<<
 * 
 *     property dualTolerance:
 */
  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_12); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_v_coinMat)) { __Pyx_RaiseUnboundLocalError("coinMat"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_coinMat));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_coinMat));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_coinMat));
  __pyx_t_9 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.Hessian.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF((PyObject *)__pyx_v_coinMat);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":633
 * 
 *     property dualTolerance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.dualTolerance()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 633);

  /* "CyLP/cy/CyClpSimplex.pyx":634
 *     property dualTolerance:
 *         def __get__(self):
 *             return self.CppSelf.dualTolerance()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->CppSelf->dualTolerance()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dualTolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_2__set__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":636
 *             return self.CppSelf.dualTolerance()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *            self.CppSelf.setDualTolerance(value)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 636);

  /* "CyLP/cy/CyClpSimplex.pyx":637
 * 
 *         def __set__(self, value):
 *            self.CppSelf.setDualTolerance(value)             # <<<<<<<<<<<<<<
 * 
 *     property primalTolerance:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setDualTolerance(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dualTolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":640
 * 
 *     property primalTolerance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.primalTolerance()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 640);

  /* "CyLP/cy/CyClpSimplex.pyx":641
 *     property primalTolerance:
 *         def __get__(self):
 *             return self.CppSelf.primalTolerance()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->CppSelf->primalTolerance()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalTolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_2__set__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":643
 *             return self.CppSelf.primalTolerance()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *            self.CppSelf.setPrimalTolerance(value)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 643);

  /* "CyLP/cy/CyClpSimplex.pyx":644
 * 
 *         def __set__(self, value):
 *            self.CppSelf.setPrimalTolerance(value)             # <<<<<<<<<<<<<<
 * 
 *     property maxNumIteration:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setPrimalTolerance(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalTolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15maxNumIteration_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15maxNumIteration_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15maxNumIteration___set__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":647
 * 
 *     property maxNumIteration:
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *            self.CppSelf.setMaxNumIteration(value)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15maxNumIteration___set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 647);

  /* "CyLP/cy/CyClpSimplex.pyx":648
 *     property maxNumIteration:
 *         def __set__(self, value):
 *            self.CppSelf.setMaxNumIteration(value)             # <<<<<<<<<<<<<<
 * 
 *     property logLevel:
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setMaxNumIteration(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.maxNumIteration.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel___get__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":651
 * 
 *     property logLevel:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.logLevel()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel___get__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 651);

  /* "CyLP/cy/CyClpSimplex.pyx":652
 *     property logLevel:
 *         def __get__(self):
 *             return self.CppSelf.logLevel()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->logLevel()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.logLevel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_2__set__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":654
 *             return self.CppSelf.logLevel()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.CppSelf.setLogLevel(value)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_2__set__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 654);

  /* "CyLP/cy/CyClpSimplex.pyx":655
 * 
 *         def __set__(self, value):
 *             self.CppSelf.setLogLevel(value)             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setLogLevel(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.logLevel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7getRightHandSide(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6getRightHandSide[] = "CyClpSimplex.getRightHandSide(self, ndarray rhs)\n\n        Take a spare array, ``rhs``, and store the current right-hand-side\n        in it.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7getRightHandSide(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRightHandSide (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_5numpy_ndarray, 1, "rhs", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6getRightHandSide(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_rhs));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":661
 *     #############################################
 * 
 *     def getRightHandSide(self, np.ndarray[np.double_t, ndim=1] rhs):             # <<<<<<<<<<<<<<
 *         '''
 *         Take a spare array, ``rhs``, and store the current right-hand-side
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6getRightHandSide(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rhs) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rhs;
  __Pyx_Buffer __pyx_pybuffer_rhs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getRightHandSide", 0);
  __Pyx_TraceCall("getRightHandSide", __pyx_f[0], 661);
  __pyx_pybuffer_rhs.pybuffer.buf = NULL;
  __pyx_pybuffer_rhs.refcount = 0;
  __pyx_pybuffernd_rhs.data = NULL;
  __pyx_pybuffernd_rhs.rcbuffer = &__pyx_pybuffer_rhs;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rhs.rcbuffer->pybuffer, (PyObject*)__pyx_v_rhs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rhs.diminfo[0].strides = __pyx_pybuffernd_rhs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rhs.diminfo[0].shape = __pyx_pybuffernd_rhs.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":666
 *         in it.
 *         '''
 *         self.CppSelf.getRightHandSide(<double*>rhs.data)             # <<<<<<<<<<<<<<
 * 
 *     def getStatusCode(self):
 */
  __pyx_v_self->CppSelf->getRightHandSide(((double *)__pyx_v_rhs->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rhs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getRightHandSide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rhs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9getStatusCode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8getStatusCode[] = "CyClpSimplex.getStatusCode(self)\n\n        Get the probelm status as defined in CLP. Return value could be:\n\n        * -1 - unknown e.g. before solve or if postSolve says not optimal\n        * 0 - optimal\n        * 1 - primal infeasible\n        * 2 - dual infeasible\n        * 3 - stopped on iterations or time\n        * 4 - stopped due to errors\n        * 5 - stopped by event handler (virtual int ClpEventHandler::event())\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9getStatusCode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStatusCode (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8getStatusCode(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":668
 *         self.CppSelf.getRightHandSide(<double*>rhs.data)
 * 
 *     def getStatusCode(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Get the probelm status as defined in CLP. Return value could be:
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8getStatusCode(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusCode", 0);
  __Pyx_TraceCall("getStatusCode", __pyx_f[0], 668);

  /* "CyLP/cy/CyClpSimplex.pyx":681
 * 
 *         '''
 *         return self.CppSelf.status()             # <<<<<<<<<<<<<<
 * 
 *     def getStatusString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->status()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusCode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getStatusString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10getStatusString[] = "CyClpSimplex.getStatusString(self)\n\n        Return the problem status in string using the code from\n        :func:`getStatusCode`\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getStatusString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStatusString (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10getStatusString(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":683
 *         return self.CppSelf.status()
 * 
 *     def getStatusString(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the problem status in string using the code from
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10getStatusString(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusString", 0);
  __Pyx_TraceCall("getStatusString", __pyx_f[0], 683);

  /* "CyLP/cy/CyClpSimplex.pyx":688
 *         :func:`getStatusCode`
 *         '''
 *         return problemStatus[self.getStatusCode()]             # <<<<<<<<<<<<<<
 * 
 *     def setColumnLower(self, ind, val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getStatusCode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setColumnLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12setColumnLower[] = "CyClpSimplex.setColumnLower(self, ind, val)\n\n        Set the lower bound of variable index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setColumnLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setColumnLower (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setColumnLower", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setColumnLower") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setColumnLower", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12setColumnLower(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ind, __pyx_v_val);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":690
 *         return problemStatus[self.getStatusCode()]
 * 
 *     def setColumnLower(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the lower bound of variable index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12setColumnLower(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnLower", 0);
  __Pyx_TraceCall("setColumnLower", __pyx_f[0], 690);

  /* "CyLP/cy/CyClpSimplex.pyx":694
 *         Set the lower bound of variable index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setColumnLower(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def setColumnUpper(self, ind, val):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setColumnLower(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15setColumnUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14setColumnUpper[] = "CyClpSimplex.setColumnUpper(self, ind, val)\n\n        Set the upper bound of variable index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15setColumnUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setColumnUpper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setColumnUpper", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setColumnUpper") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setColumnUpper", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14setColumnUpper(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ind, __pyx_v_val);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":696
 *         self.CppSelf.setColumnLower(ind, val)
 * 
 *     def setColumnUpper(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the upper bound of variable index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14setColumnUpper(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnUpper", 0);
  __Pyx_TraceCall("setColumnUpper", __pyx_f[0], 696);

  /* "CyLP/cy/CyClpSimplex.pyx":700
 *         Set the upper bound of variable index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setColumnUpper(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def setRowLower(self, ind, val):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setColumnUpper(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17setRowLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setRowLower[] = "CyClpSimplex.setRowLower(self, ind, val)\n\n        Set the lower bound of constraint index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17setRowLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRowLower (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRowLower", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setRowLower") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setRowLower", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setRowLower(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ind, __pyx_v_val);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":702
 *         self.CppSelf.setColumnUpper(ind, val)
 * 
 *     def setRowLower(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the lower bound of constraint index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setRowLower(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowLower", 0);
  __Pyx_TraceCall("setRowLower", __pyx_f[0], 702);

  /* "CyLP/cy/CyClpSimplex.pyx":706
 *         Set the lower bound of constraint index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setRowLower(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def setRowUpper(self, ind, val):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setRowLower(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19setRowUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setRowUpper[] = "CyClpSimplex.setRowUpper(self, ind, val)\n\n        Set the upper bound of constraint index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19setRowUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRowUpper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRowUpper", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setRowUpper") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setRowUpper", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setRowUpper(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ind, __pyx_v_val);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":708
 *         self.CppSelf.setRowLower(ind, val)
 * 
 *     def setRowUpper(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the upper bound of constraint index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setRowUpper(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind, PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowUpper", 0);
  __Pyx_TraceCall("setRowUpper", __pyx_f[0], 708);

  /* "CyLP/cy/CyClpSimplex.pyx":712
 *         Set the upper bound of constraint index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setRowUpper(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def useCustomPrimal(self, customPrimal):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setRowUpper(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21useCustomPrimal(PyObject *__pyx_v_self, PyObject *__pyx_v_customPrimal); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20useCustomPrimal[] = "CyClpSimplex.useCustomPrimal(self, customPrimal)\n\n        Determines if\n        :func:`CyLP.python.pivot.PivotPythonBase.isPivotAcceptable`\n        should be called just before each pivot is performed (right after the\n        entering and leaving variables are obtained.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21useCustomPrimal(PyObject *__pyx_v_self, PyObject *__pyx_v_customPrimal) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("useCustomPrimal (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20useCustomPrimal(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_customPrimal));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":714
 *         self.CppSelf.setRowUpper(ind, val)
 * 
 *     def useCustomPrimal(self, customPrimal):             # <<<<<<<<<<<<<<
 *         '''
 *         Determines if
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20useCustomPrimal(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_customPrimal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("useCustomPrimal", 0);
  __Pyx_TraceCall("useCustomPrimal", __pyx_f[0], 714);

  /* "CyLP/cy/CyClpSimplex.pyx":721
 *         entering and leaving variables are obtained.
 *         '''
 *         self.CppSelf.useCustomPrimal(customPrimal)             # <<<<<<<<<<<<<<
 * 
 *     def getUseCustomPrimal(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_customPrimal); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->useCustomPrimal(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.useCustomPrimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getUseCustomPrimal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getUseCustomPrimal[] = "CyClpSimplex.getUseCustomPrimal(self)\n\n        Return the value of ``useCustomPrimal``. See :func:`useCustomPrimal`.\n\n        :rtype: int  :math:`\\in \\{0, 1\\}`\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getUseCustomPrimal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getUseCustomPrimal (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getUseCustomPrimal(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":723
 *         self.CppSelf.useCustomPrimal(customPrimal)
 * 
 *     def getUseCustomPrimal(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the value of ``useCustomPrimal``. See :func:`useCustomPrimal`.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getUseCustomPrimal(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getUseCustomPrimal", 0);
  __Pyx_TraceCall("getUseCustomPrimal", __pyx_f[0], 723);

  /* "CyLP/cy/CyClpSimplex.pyx":729
 *         :rtype: int  :math:`\in \{0, 1\}`
 *         '''
 *         return self.CppSelf.getUseCustomPrimal()             # <<<<<<<<<<<<<<
 * 
 *     def flagged(self, varInd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getUseCustomPrimal()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getUseCustomPrimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25flagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24flagged[] = "CyClpSimplex.flagged(self, varInd)\n\n        Returns ``1`` if variable index ``varInd`` is flagged.\n\n        :rtype: int  :math:`\\in \\{0, 1\\}`\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25flagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flagged (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24flagged(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_varInd));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":731
 *         return self.CppSelf.getUseCustomPrimal()
 * 
 *     def flagged(self, varInd):             # <<<<<<<<<<<<<<
 *         '''
 *         Returns ``1`` if variable index ``varInd`` is flagged.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24flagged(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("flagged", 0);
  __Pyx_TraceCall("flagged", __pyx_f[0], 731);

  /* "CyLP/cy/CyClpSimplex.pyx":737
 *         :rtype: int  :math:`\in \{0, 1\}`
 *         '''
 *         return self.CppSelf.flagged(varInd)             # <<<<<<<<<<<<<<
 * 
 *     def setFlagged(self, varInd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_varInd); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->CppSelf->flagged(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.flagged", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setFlagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setFlagged[] = "CyClpSimplex.setFlagged(self, varInd)\n\n        Set variables index ``varInd`` flagged.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setFlagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFlagged (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setFlagged(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_varInd));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":739
 *         return self.CppSelf.flagged(varInd)
 * 
 *     def setFlagged(self, varInd):             # <<<<<<<<<<<<<<
 *         '''
 *         Set variables index ``varInd`` flagged.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setFlagged(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setFlagged", 0);
  __Pyx_TraceCall("setFlagged", __pyx_f[0], 739);

  /* "CyLP/cy/CyClpSimplex.pyx":743
 *         Set variables index ``varInd`` flagged.
 *         '''
 *         self.CppSelf.setFlagged(varInd)             # <<<<<<<<<<<<<<
 * 
 * ##    def currentDualTolerance(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_varInd); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setFlagged(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setFlagged", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29largestDualError(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28largestDualError[] = "CyClpSimplex.largestDualError(self)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29largestDualError(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("largestDualError (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28largestDualError(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":748
 * ##        return self.CppSelf.currentDualTolerance()
 * ##
 *     def largestDualError(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.largestDualError()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28largestDualError(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("largestDualError", 0);
  __Pyx_TraceCall("largestDualError", __pyx_f[0], 748);

  /* "CyLP/cy/CyClpSimplex.pyx":749
 * ##
 *     def largestDualError(self):
 *         return self.CppSelf.largestDualError()             # <<<<<<<<<<<<<<
 * 
 *     def pivotRow(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->CppSelf->largestDualError()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.largestDualError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31pivotRow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30pivotRow[] = "CyClpSimplex.pivotRow(self)\n\n        Return the index of the constraint corresponding to the (basic) leaving\n        variable.\n\n        :rtype: int\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31pivotRow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pivotRow (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30pivotRow(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":751
 *         return self.CppSelf.largestDualError()
 * 
 *     def pivotRow(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index of the constraint corresponding to the (basic) leaving
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30pivotRow(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("pivotRow", 0);
  __Pyx_TraceCall("pivotRow", __pyx_f[0], 751);

  /* "CyLP/cy/CyClpSimplex.pyx":758
 *         :rtype: int
 *         '''
 *         return self.CppSelf.pivotRow()             # <<<<<<<<<<<<<<
 * 
 *     def setPivotRow(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->pivotRow()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.pivotRow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33setPivotRow(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32setPivotRow[] = "CyClpSimplex.setPivotRow(self, v)\n\n        Set the ``v``\\ 'th variable of the basis as the leaving variable.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33setPivotRow(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPivotRow (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32setPivotRow(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_v));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":760
 *         return self.CppSelf.pivotRow()
 * 
 *     def setPivotRow(self, v):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the ``v``\ 'th variable of the basis as the leaving variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32setPivotRow(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPivotRow", 0);
  __Pyx_TraceCall("setPivotRow", __pyx_f[0], 760);

  /* "CyLP/cy/CyClpSimplex.pyx":764
 *         Set the ``v``\ 'th variable of the basis as the leaving variable.
 *         '''
 *         self.CppSelf.setPivotRow(v)             # <<<<<<<<<<<<<<
 * 
 *     def sequenceIn(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setPivotRow(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPivotRow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35sequenceIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34sequenceIn[] = "CyClpSimplex.sequenceIn(self)\n\n        Return the index of the entering variable.\n\n        :rtype: int\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35sequenceIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sequenceIn (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34sequenceIn(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":766
 *         self.CppSelf.setPivotRow(v)
 * 
 *     def sequenceIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index of the entering variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34sequenceIn(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("sequenceIn", 0);
  __Pyx_TraceCall("sequenceIn", __pyx_f[0], 766);

  /* "CyLP/cy/CyClpSimplex.pyx":772
 *         :rtype: int
 *         '''
 *         return self.CppSelf.sequenceIn()             # <<<<<<<<<<<<<<
 * 
 *     def setSequenceIn(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->sequenceIn()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.sequenceIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37setSequenceIn(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36setSequenceIn[] = "CyClpSimplex.setSequenceIn(self, v)\n\n        Set the variable index ``v`` as the entering variable.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37setSequenceIn(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSequenceIn (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36setSequenceIn(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_v));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":774
 *         return self.CppSelf.sequenceIn()
 * 
 *     def setSequenceIn(self, v):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the variable index ``v`` as the entering variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36setSequenceIn(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setSequenceIn", 0);
  __Pyx_TraceCall("setSequenceIn", __pyx_f[0], 774);

  /* "CyLP/cy/CyClpSimplex.pyx":778
 *         Set the variable index ``v`` as the entering variable.
 *         '''
 *         self.CppSelf.setSequenceIn(v)             # <<<<<<<<<<<<<<
 * 
 * ##    def dualTolerance(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setSequenceIn(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setSequenceIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":788
 * ##        return self.CppSelf.dualTolerance()
 * 
 *     cdef double* rowLower(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the lower bounds of the constraints as a double*.
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowLower(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("rowLower", 0);
  __Pyx_TraceCall("rowLower", __pyx_f[0], 788);

  /* "CyLP/cy/CyClpSimplex.pyx":793
 *         This can be used only in Cython.
 *         '''
 *         return self.CppSelf.rowLower()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* rowUpper(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->rowLower();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":795
 *         return self.CppSelf.rowLower()
 * 
 *     cdef double* rowUpper(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the upper bounds of the constraints as a double*.
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowUpper(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("rowUpper", 0);
  __Pyx_TraceCall("rowUpper", __pyx_f[0], 795);

  /* "CyLP/cy/CyClpSimplex.pyx":800
 *         This can be used only in Cython.
 *         '''
 *         return self.CppSelf.rowUpper()             # <<<<<<<<<<<<<<
 * 
 *     def getVariableNames(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->rowUpper();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39getVariableNames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVariableNames[] = "CyClpSimplex.getVariableNames(self)\n\n        Return the variable name. (e.g. that was set in the mps file)\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39getVariableNames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVariableNames (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVariableNames(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":802
 *         return self.CppSelf.rowUpper()
 * 
 *     def getVariableNames(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the variable name. (e.g. that was set in the mps file)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVariableNames(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  std::vector<std::string> __pyx_v_names;
  PyObject *__pyx_v_ret = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVariableNames", 0);
  __Pyx_TraceCall("getVariableNames", __pyx_f[0], 802);

  /* "CyLP/cy/CyClpSimplex.pyx":806
 *         Return the variable name. (e.g. that was set in the mps file)
 *         '''
 *         cdef vector[string] names = self.CppSelf.getVariableNames()             # <<<<<<<<<<<<<<
 *         ret = []
 *         for i in range(names.size()):
 */
  __pyx_v_names = __pyx_v_self->CppSelf->getVariableNames();

  /* "CyLP/cy/CyClpSimplex.pyx":807
 *         '''
 *         cdef vector[string] names = self.CppSelf.getVariableNames()
 *         ret = []             # <<<<<<<<<<<<<<
 *         for i in range(names.size()):
 *             ret.append(names[i].c_str())
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":808
 *         cdef vector[string] names = self.CppSelf.getVariableNames()
 *         ret = []
 *         for i in range(names.size()):             # <<<<<<<<<<<<<<
 *             ret.append(names[i].c_str())
 *         return ret
 */
  __pyx_t_2 = __pyx_v_names.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "CyLP/cy/CyClpSimplex.pyx":809
 *         ret = []
 *         for i in range(names.size()):
 *             ret.append(names[i].c_str())             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_1 = PyBytes_FromString((__pyx_v_names[__pyx_v_i]).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":810
 *         for i in range(names.size()):
 *             ret.append(names[i].c_str())
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef setVariableName(self, varInd, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVariableNames", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":812
 *         return ret
 * 
 *     cpdef setVariableName(self, varInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of variable index ``varInd`` to ``name``.
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41setVariableName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setVariableName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd, PyObject *__pyx_v_name, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setVariableName", 0);
  __Pyx_TraceCall("setVariableName", __pyx_f[0], 812);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setVariableName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41setVariableName)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_varInd);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_varInd);
      __Pyx_GIVEREF(__pyx_v_varInd);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":822
 * 
 *         '''
 *         self.CppSelf.setVariableName(varInd, name)             # <<<<<<<<<<<<<<
 * 
 *     cpdef setConstraintName(self, constInd, name):
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_varInd); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = PyBytes_AsString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setVariableName(__pyx_t_4, __pyx_t_5);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41setVariableName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40setVariableName[] = "CyClpSimplex.setVariableName(self, varInd, name)\n\n        Set the name of variable index ``varInd`` to ``name``.\n\n        :arg varInd: variable index\n        :type varInd: integer\n        :arg name: desired name for the variable\n        :type name: string\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41setVariableName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_varInd = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVariableName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__varInd,&__pyx_n_s__name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__varInd)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVariableName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setVariableName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_varInd = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setVariableName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40setVariableName(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_varInd, __pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":812
 *         return ret
 * 
 *     cpdef setVariableName(self, varInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of variable index ``varInd`` to ``name``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40setVariableName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setVariableName", 0);
  __Pyx_TraceCall("setVariableName", __pyx_f[0], 812);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setVariableName(__pyx_v_self, __pyx_v_varInd, __pyx_v_name, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":824
 *         self.CppSelf.setVariableName(varInd, name)
 * 
 *     cpdef setConstraintName(self, constInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of constraint index ``constInd`` to ``name``.
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43setConstraintName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setConstraintName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_constInd, PyObject *__pyx_v_name, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setConstraintName", 0);
  __Pyx_TraceCall("setConstraintName", __pyx_f[0], 824);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setConstraintName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43setConstraintName)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_constInd);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_constInd);
      __Pyx_GIVEREF(__pyx_v_constInd);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":834
 * 
 *         '''
 *         self.CppSelf.setConstraintName(constInd, name)             # <<<<<<<<<<<<<<
 * 
 *     cdef int* pivotVariable(self):
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_constInd); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = PyBytes_AsString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setConstraintName(__pyx_t_4, __pyx_t_5);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43setConstraintName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42setConstraintName[] = "CyClpSimplex.setConstraintName(self, constInd, name)\n\n        Set the name of constraint index ``constInd`` to ``name``.\n\n        :arg constInd: constraint index\n        :type constInd: integer\n        :arg name: desired name for the constraint\n        :type name: string\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43setConstraintName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_constInd = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConstraintName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__constInd,&__pyx_n_s__name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__constInd)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConstraintName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setConstraintName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_constInd = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConstraintName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42setConstraintName(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_constInd, __pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":824
 *         self.CppSelf.setVariableName(varInd, name)
 * 
 *     cpdef setConstraintName(self, constInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of constraint index ``constInd`` to ``name``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42setConstraintName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_constInd, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setConstraintName", 0);
  __Pyx_TraceCall("setConstraintName", __pyx_f[0], 824);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setConstraintName(__pyx_v_self, __pyx_v_constInd, __pyx_v_name, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":836
 *         self.CppSelf.setConstraintName(constInd, name)
 * 
 *     cdef int* pivotVariable(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index set of the basic variables.
 */

static int *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_pivotVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("pivotVariable", 0);
  __Pyx_TraceCall("pivotVariable", __pyx_f[0], 836);

  /* "CyLP/cy/CyClpSimplex.pyx":842
 *         :rtype: int*
 *         '''
 *         return self.CppSelf.pivotVariable()             # <<<<<<<<<<<<<<
 * 
 *     cpdef  getPivotVariable(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->pivotVariable();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":844
 *         return self.CppSelf.pivotVariable()
 * 
 *     cpdef  getPivotVariable(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index set of the basic variables.
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45getPivotVariable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getPivotVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getPivotVariable", 0);
  __Pyx_TraceCall("getPivotVariable", __pyx_f[0], 844);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getPivotVariable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45getPivotVariable)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":850
 *         :rtype: Numpy array
 *         '''
 *         return <object>self.CppSelf.getPivotVariable()             # <<<<<<<<<<<<<<
 * 
 *     cpdef CLP_getVarStatus(self, int sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getPivotVariable();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getPivotVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45getPivotVariable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44getPivotVariable[] = "CyClpSimplex.getPivotVariable(self)\n\n        Return the index set of the basic variables.\n\n        :rtype: Numpy array\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45getPivotVariable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPivotVariable (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44getPivotVariable(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":844
 *         return self.CppSelf.pivotVariable()
 * 
 *     cpdef  getPivotVariable(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index set of the basic variables.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44getPivotVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getPivotVariable", 0);
  __Pyx_TraceCall("getPivotVariable", __pyx_f[0], 844);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->getPivotVariable(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getPivotVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":852
 *         return <object>self.CppSelf.getPivotVariable()
 * 
 *     cpdef CLP_getVarStatus(self, int sequence):             # <<<<<<<<<<<<<<
 *         '''
 *         get the status of a variable
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47CLP_getVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_CLP_getVarStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_sequence, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_getVarStatus", 0);
  __Pyx_TraceCall("CLP_getVarStatus", __pyx_f[0], 852);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__CLP_getVarStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47CLP_getVarStatus)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_sequence); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":865
 *         :rtype: int
 *         '''
 *         return self.CppSelf.getStatus(sequence)             # <<<<<<<<<<<<<<
 * 
 *     cpdef CLP_setVarStatus(self, int sequence, int status):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getStatus(__pyx_v_sequence)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_getVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47CLP_getVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46CLP_getVarStatus[] = "CyClpSimplex.CLP_getVarStatus(self, int sequence)\n\n        get the status of a variable\n\n        * free : 0\n        * basic : 1\n        * atUpperBound : 2\n        * atLowerBound : 3\n        * superBasic : 4\n        * fixed : 5\n\n        :rtype: int\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47CLP_getVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence) {
  int __pyx_v_sequence;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CLP_getVarStatus (wrapper)", 0);
  assert(__pyx_arg_sequence); {
    __pyx_v_sequence = __Pyx_PyInt_AsInt(__pyx_arg_sequence); if (unlikely((__pyx_v_sequence == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_getVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46CLP_getVarStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((int)__pyx_v_sequence));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":852
 *         return <object>self.CppSelf.getPivotVariable()
 * 
 *     cpdef CLP_getVarStatus(self, int sequence):             # <<<<<<<<<<<<<<
 *         '''
 *         get the status of a variable
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46CLP_getVarStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_sequence) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_getVarStatus", 0);
  __Pyx_TraceCall("CLP_getVarStatus", __pyx_f[0], 852);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->CLP_getVarStatus(__pyx_v_self, __pyx_v_sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_getVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":867
 *         return self.CppSelf.getStatus(sequence)
 * 
 *     cpdef CLP_setVarStatus(self, int sequence, int status):             # <<<<<<<<<<<<<<
 *         '''
 *         set the status of a variable
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49CLP_setVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_CLP_setVarStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_sequence, int __pyx_v_status, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  enum IClpSimplex::Status __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_setVarStatus", 0);
  __Pyx_TraceCall("CLP_setVarStatus", __pyx_f[0], 867);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__CLP_setVarStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49CLP_setVarStatus)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_sequence); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":879
 * 
 *         '''
 *         self.CppSelf.setStatus(sequence, CLP_variableStatusEnum[status])             # <<<<<<<<<<<<<<
 * 
 *     def setVariableStatus(self, arg, status):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_13); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_status, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((enum IClpSimplex::Status)PyInt_AsLong(__pyx_t_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->CppSelf->setStatus(__pyx_v_sequence, __pyx_t_5);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_setVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49CLP_setVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48CLP_setVarStatus[] = "CyClpSimplex.CLP_setVarStatus(self, int sequence, int status)\n\n        set the status of a variable\n\n        * free : 0\n        * basic : 1\n        * atUpperBound : 2\n        * atLowerBound : 3\n        * superBasic : 4\n        * fixed : 5\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49CLP_setVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_sequence;
  int __pyx_v_status;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CLP_setVarStatus (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sequence,&__pyx_n_s__status,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sequence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__status)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_setVarStatus", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "CLP_setVarStatus") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sequence = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_sequence == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_status = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_status == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CLP_setVarStatus", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_setVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48CLP_setVarStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_sequence, __pyx_v_status);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":867
 *         return self.CppSelf.getStatus(sequence)
 * 
 *     cpdef CLP_setVarStatus(self, int sequence, int status):             # <<<<<<<<<<<<<<
 *         '''
 *         set the status of a variable
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48CLP_setVarStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_sequence, int __pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_setVarStatus", 0);
  __Pyx_TraceCall("CLP_setVarStatus", __pyx_f[0], 867);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->CLP_setVarStatus(__pyx_v_self, __pyx_v_sequence, __pyx_v_status, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_setVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51setVariableStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50setVariableStatus[] = "CyClpSimplex.setVariableStatus(self, arg, status)\n\n        Set the status of a variable.\n\n        :arg arg: Specifies the variable to change (a CyLPVar, or an index)\n        :type status: CyLPVar, int\n        :arg status: 'basic', 'atUpperBound', 'atLowerBound', 'superBasic', 'fixed'\n        :type status: string\n\n\n        Example:\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex\n        >>> s = CyClpSimplex()\n        >>> x = s.addVariable('x', 4)\n        >>> # Using CyLPVars:\n        >>> s.setVariableStatus(x[1:3], 'basic')\n        >>> s.getVariableStatus(x[1])\n        'basic'\n        >>> # Using a variable index directly\n        >>> s.setVariableStatus(1, 'atLowerBound')\n        >>> s.getVariableStatus(x[1])\n        'atLowerBound'\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51setVariableStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_status = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVariableStatus (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,&__pyx_n_s__status,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__status)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVariableStatus", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setVariableStatus") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg = values[0];
    __pyx_v_status = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setVariableStatus", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50setVariableStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_arg, __pyx_v_status);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":881
 *         self.CppSelf.setStatus(sequence, CLP_variableStatusEnum[status])
 * 
 *     def setVariableStatus(self, arg, status):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the status of a variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50setVariableStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_status) {
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_varName = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  enum IClpSimplex::Status __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setVariableStatus", 0);
  __Pyx_TraceCall("setVariableStatus", __pyx_f[0], 881);
  __Pyx_INCREF(__pyx_v_status);

  /* "CyLP/cy/CyClpSimplex.pyx":906
 * 
 *         '''
 *         status = CLP_variableStatusEnum[StatusToInt[status]]             # <<<<<<<<<<<<<<
 *         if isinstance(arg, (int, long)):
 *             self.CppSelf.setStatus(arg, status)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_13); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__StatusToInt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_v_status); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_v_status);
  __pyx_v_status = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":907
 *         '''
 *         status = CLP_variableStatusEnum[StatusToInt[status]]
 *         if isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *             self.CppSelf.setStatus(arg, status)
 *         elif True:  # isinstance(arg, CyLPVar):
 */
  __Pyx_INCREF(__pyx_v_arg);
  __pyx_t_2 = __pyx_v_arg;
  __pyx_t_4 = PyInt_Check(__pyx_t_2); 
  if (!__pyx_t_4) {
    __pyx_t_5 = PyLong_Check(__pyx_t_2); 
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "CyLP/cy/CyClpSimplex.pyx":908
 *         status = CLP_variableStatusEnum[StatusToInt[status]]
 *         if isinstance(arg, (int, long)):
 *             self.CppSelf.setStatus(arg, status)             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_arg); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = ((enum IClpSimplex::Status)PyInt_AsLong(__pyx_v_status)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->CppSelf->setStatus(__pyx_t_7, __pyx_t_8);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":910
 *             self.CppSelf.setStatus(arg, status)
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of setVarStatus can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_self->cyLPModel, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "CyLP/cy/CyClpSimplex.pyx":911
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_2 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "CyLP/cy/CyClpSimplex.pyx":914
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             var = arg             # <<<<<<<<<<<<<<
 *             model = self.cyLPModel
 *             inds = model.inds
 */
    __Pyx_INCREF(__pyx_v_arg);
    __pyx_v_var = __pyx_v_arg;

    /* "CyLP/cy/CyClpSimplex.pyx":915
 *                                 'using a CyLPModel.')
 *             var = arg
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             varName = var.name
 */
    __pyx_t_2 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_model = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":916
 *             var = arg
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             varName = var.name
 *             if not inds.hasVar(varName):
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_inds = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":917
 *             model = self.cyLPModel
 *             inds = model.inds
 *             varName = var.name             # <<<<<<<<<<<<<<
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_varName = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":918
 *             inds = model.inds
 *             varName = var.name
 *             if not inds.hasVar(varName):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_varName);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_varName);
    __Pyx_GIVEREF(__pyx_v_varName);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (!__pyx_t_6);
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":919
 *             varName = var.name
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)             # <<<<<<<<<<<<<<
 *             x = inds.varIndex[varName]
 *             if var.parent:
 */
      __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_16), __pyx_v_varName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "CyLP/cy/CyClpSimplex.pyx":920
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]             # <<<<<<<<<<<<<<
 *             if var.parent:
 *                 for i in var.indices:
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_v_varName); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":921
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 *             if var.parent:             # <<<<<<<<<<<<<<
 *                 for i in var.indices:
 *                     self.CppSelf.setStatus(x[i], status)
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":922
 *             x = inds.varIndex[varName]
 *             if var.parent:
 *                 for i in var.indices:             # <<<<<<<<<<<<<<
 *                     self.CppSelf.setStatus(x[i], status)
 *             else:
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__indices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = Py_TYPE(__pyx_t_1)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_1)) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_1)) {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_3 = __pyx_t_10(__pyx_t_1);
          if (unlikely(!__pyx_t_3)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":923
 *             if var.parent:
 *                 for i in var.indices:
 *                     self.CppSelf.setStatus(x[i], status)             # <<<<<<<<<<<<<<
 *             else:
 *                 for i in xrange(var.dim):
 */
        __pyx_t_3 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = ((enum IClpSimplex::Status)PyInt_AsLong(__pyx_v_status)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->CppSelf->setStatus(__pyx_t_7, __pyx_t_8);
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":925
 *                     self.CppSelf.setStatus(x[i], status)
 *             else:
 *                 for i in xrange(var.dim):             # <<<<<<<<<<<<<<
 *                     self.CppSelf.setStatus(x[i], status)
 * 
 */
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_3)) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_3)) {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_1 = __pyx_t_10(__pyx_t_3);
          if (unlikely(!__pyx_t_1)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":926
 *             else:
 *                 for i in xrange(var.dim):
 *                     self.CppSelf.setStatus(x[i], status)             # <<<<<<<<<<<<<<
 * 
 *     def getVariableStatus(self, arg):
 */
        __pyx_t_1 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = ((enum IClpSimplex::Status)PyInt_AsLong(__pyx_v_status)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->CppSelf->setStatus(__pyx_t_7, __pyx_t_8);
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L6:;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_varName);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53getVariableStatus(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52getVariableStatus[] = "CyClpSimplex.getVariableStatus(self, arg)\n\n        Get the status of a variable.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53getVariableStatus(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVariableStatus (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52getVariableStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_arg));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":928
 *                     self.CppSelf.setStatus(x[i], status)
 * 
 *     def getVariableStatus(self, arg):             # <<<<<<<<<<<<<<
 *         '''
 *         Get the status of a variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52getVariableStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_varName = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVariableStatus", 0);
  __Pyx_TraceCall("getVariableStatus", __pyx_f[0], 928);

  /* "CyLP/cy/CyClpSimplex.pyx":932
 *         Get the status of a variable.
 *         '''
 *         if isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *             return IntToStatus[self.CppSelf.getStatus(arg)]
 *         elif True:  # isinstance(arg, CyLPVar):
 */
  __Pyx_INCREF(__pyx_v_arg);
  __pyx_t_1 = __pyx_v_arg;
  __pyx_t_2 = PyInt_Check(__pyx_t_1); 
  if (!__pyx_t_2) {
    __pyx_t_3 = PyLong_Check(__pyx_t_1); 
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "CyLP/cy/CyClpSimplex.pyx":933
 *         '''
 *         if isinstance(arg, (int, long)):
 *             return IntToStatus[self.CppSelf.getStatus(arg)]             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__IntToStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_arg); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = PyInt_FromLong(__pyx_v_self->CppSelf->getStatus(__pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_GetItem(__pyx_t_1, __pyx_t_6); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":935
 *             return IntToStatus[self.CppSelf.getStatus(arg)]
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of getVarStatus can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_self->cyLPModel, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":936
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of getVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_18), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "CyLP/cy/CyClpSimplex.pyx":939
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             var = arg             # <<<<<<<<<<<<<<
 *             model = self.cyLPModel
 *             inds = model.inds
 */
    __Pyx_INCREF(__pyx_v_arg);
    __pyx_v_var = __pyx_v_arg;

    /* "CyLP/cy/CyClpSimplex.pyx":940
 *                                 'using a CyLPModel.')
 *             var = arg
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             varName = var.name
 */
    __pyx_t_7 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_v_model = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":941
 *             var = arg
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             varName = var.name
 *             if not inds.hasVar(varName):
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_inds = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":942
 *             model = self.cyLPModel
 *             inds = model.inds
 *             varName = var.name             # <<<<<<<<<<<<<<
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_varName = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":943
 *             inds = model.inds
 *             varName = var.name
 *             if not inds.hasVar(varName):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_varName);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_varName);
    __Pyx_GIVEREF(__pyx_v_varName);
    __pyx_t_1 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":944
 *             varName = var.name
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)             # <<<<<<<<<<<<<<
 *             x = inds.varIndex[varName]
 *             if var.parent:
 */
      __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_16), __pyx_v_varName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "CyLP/cy/CyClpSimplex.pyx":945
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]             # <<<<<<<<<<<<<<
 *             if var.parent:
 *                 s = np.array([IntToStatus[
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_1, __pyx_v_varName); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":946
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 *             if var.parent:             # <<<<<<<<<<<<<<
 *                 s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(x[i])]
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":947
 *             x = inds.varIndex[varName]
 *             if var.parent:
 *                 s = np.array([IntToStatus[             # <<<<<<<<<<<<<<
 *                             self.CppSelf.getStatus(x[i])]
 *                             for i in var.indices])
 */
      __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);

      /* "CyLP/cy/CyClpSimplex.pyx":949
 *                 s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(x[i])]
 *                             for i in var.indices])             # <<<<<<<<<<<<<<
 *             else:
 *                 s = np.array([IntToStatus[
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__indices); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_8)) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_8)) {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_10(__pyx_t_8);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":947
 *             x = inds.varIndex[varName]
 *             if var.parent:
 *                 s = np.array([IntToStatus[             # <<<<<<<<<<<<<<
 *                             self.CppSelf.getStatus(x[i])]
 *                             for i in var.indices])
 */
        __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__IntToStatus); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);

        /* "CyLP/cy/CyClpSimplex.pyx":948
 *             if var.parent:
 *                 s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(x[i])]             # <<<<<<<<<<<<<<
 *                             for i in var.indices])
 *             else:
 */
        __pyx_t_11 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_11) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_11); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyInt_FromLong(__pyx_v_self->CppSelf->getStatus(__pyx_t_5)); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyObject_GetItem(__pyx_t_7, __pyx_t_11); if (!__pyx_t_12) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(__Pyx_PyList_Append(__pyx_t_6, (PyObject*)__pyx_t_12))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_t_6));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_6));
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __pyx_v_s = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":951
 *                             for i in var.indices])
 *             else:
 *                 s = np.array([IntToStatus[             # <<<<<<<<<<<<<<
 *                             self.CppSelf.getStatus(x[i])]
 *                             for i in xrange(var.dim)])
 */
      __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__array); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);

      /* "CyLP/cy/CyClpSimplex.pyx":953
 *                 s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(x[i])]
 *                             for i in xrange(var.dim)])             # <<<<<<<<<<<<<<
 *             if len(s) == 1:
 *                 return s[0]
 */
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_12), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_12)); __pyx_t_12 = 0;
      if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_12 = __pyx_t_1; __Pyx_INCREF(__pyx_t_12); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = Py_TYPE(__pyx_t_12)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_12)) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_12)) {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_1 = __pyx_t_10(__pyx_t_12);
          if (unlikely(!__pyx_t_1)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":951
 *                             for i in var.indices])
 *             else:
 *                 s = np.array([IntToStatus[             # <<<<<<<<<<<<<<
 *                             self.CppSelf.getStatus(x[i])]
 *                             for i in xrange(var.dim)])
 */
        __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__IntToStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);

        /* "CyLP/cy/CyClpSimplex.pyx":952
 *             else:
 *                 s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(x[i])]             # <<<<<<<<<<<<<<
 *                             for i in xrange(var.dim)])
 *             if len(s) == 1:
 */
        __pyx_t_11 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_11) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_11); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyInt_FromLong(__pyx_v_self->CppSelf->getStatus(__pyx_t_5)); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = PyObject_GetItem(__pyx_t_1, __pyx_t_11); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(__Pyx_PyList_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)__pyx_t_6));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_6));
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_12), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_12)); __pyx_t_12 = 0;
      __pyx_v_s = __pyx_t_6;
      __pyx_t_6 = 0;
    }
    __pyx_L6:;

    /* "CyLP/cy/CyClpSimplex.pyx":954
 *                             self.CppSelf.getStatus(x[i])]
 *                             for i in xrange(var.dim)])
 *             if len(s) == 1:             # <<<<<<<<<<<<<<
 *                 return s[0]
 *             return s
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_s); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = (__pyx_t_9 == 1);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":955
 *                             for i in xrange(var.dim)])
 *             if len(s) == 1:
 *                 return s[0]             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_s, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "CyLP/cy/CyClpSimplex.pyx":956
 *             if len(s) == 1:
 *                 return s[0]
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     def setConstraintStatus(self, arg, status):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_s);
    __pyx_r = __pyx_v_s;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVariableStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_varName);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55setConstraintStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54setConstraintStatus[] = "CyClpSimplex.setConstraintStatus(self, arg, status)\n\n        Set the status of a constraint.\n\n        :arg arg: Specifies the constraint to change (name or index)\n        :type status: string,int\n        :arg status: 'basic', 'atUpperBound', 'atLowerBound', 'superBasic', 'fixed'\n        :type status: string\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex\n        >>> s = CyClpSimplex()\n        >>> x = s.addVariable('x', 4)\n        >>> s.addConstraint(0 <= x[0] + x[1] <= 1, 'const1')\n        >>> # Using constraint name:\n        >>> s.setConstraintStatus('const1', 'atUpperBound')\n        >>> s.getConstraintStatus('const1')\n        'atUpperBound'\n        >>> # Using constraint index directly\n        >>> s.setConstraintStatus(0, 'atLowerBound')\n        >>> s.getConstraintStatus('const1')\n        'atLowerBound'\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55setConstraintStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_status = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConstraintStatus (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,&__pyx_n_s__status,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__status)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConstraintStatus", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setConstraintStatus") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg = values[0];
    __pyx_v_status = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConstraintStatus", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54setConstraintStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_arg, __pyx_v_status);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":958
 *             return s
 * 
 *     def setConstraintStatus(self, arg, status):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the status of a constraint.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54setConstraintStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_status) {
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_constName = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_cInds = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  enum IClpSimplex::Status __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setConstraintStatus", 0);
  __Pyx_TraceCall("setConstraintStatus", __pyx_f[0], 958);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_INCREF(__pyx_v_status);

  /* "CyLP/cy/CyClpSimplex.pyx":980
 *         'atLowerBound'
 *         '''
 *         status = CLP_variableStatusEnum[StatusToInt[status]]             # <<<<<<<<<<<<<<
 *         if isinstance(arg, (int, long)):
 *             arg += self.nVariables
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_13); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__StatusToInt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_v_status); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_v_status);
  __pyx_v_status = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":981
 *         '''
 *         status = CLP_variableStatusEnum[StatusToInt[status]]
 *         if isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *             arg += self.nVariables
 *             self.CppSelf.setStatus(arg, status)
 */
  __Pyx_INCREF(__pyx_v_arg);
  __pyx_t_2 = __pyx_v_arg;
  __pyx_t_4 = PyInt_Check(__pyx_t_2); 
  if (!__pyx_t_4) {
    __pyx_t_5 = PyLong_Check(__pyx_t_2); 
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "CyLP/cy/CyClpSimplex.pyx":982
 *         status = CLP_variableStatusEnum[StatusToInt[status]]
 *         if isinstance(arg, (int, long)):
 *             arg += self.nVariables             # <<<<<<<<<<<<<<
 *             self.CppSelf.setStatus(arg, status)
 *         elif True:  # isinstance(arg, CyLPVar):
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_arg, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_v_arg);
    __pyx_v_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":983
 *         if isinstance(arg, (int, long)):
 *             arg += self.nVariables
 *             self.CppSelf.setStatus(arg, status)             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_arg); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = ((enum IClpSimplex::Status)PyInt_AsLong(__pyx_v_status)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->CppSelf->setStatus(__pyx_t_7, __pyx_t_8);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":985
 *             self.CppSelf.setStatus(arg, status)
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of setVarStatus can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->cyLPModel, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {

      /* "CyLP/cy/CyClpSimplex.pyx":986
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "CyLP/cy/CyClpSimplex.pyx":989
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             constName = arg
 */
    __pyx_t_3 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_model = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":990
 *                                 'using a CyLPModel.')
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             constName = arg
 *             if not inds.hasConst(constName):
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_inds = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":991
 *             model = self.cyLPModel
 *             inds = model.inds
 *             constName = arg             # <<<<<<<<<<<<<<
 *             if not inds.hasConst(constName):
 *                 raise Exception('No such constraint: %s' % constName)
 */
    __Pyx_INCREF(__pyx_v_arg);
    __pyx_v_constName = __pyx_v_arg;

    /* "CyLP/cy/CyClpSimplex.pyx":992
 *             inds = model.inds
 *             constName = arg
 *             if not inds.hasConst(constName):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such constraint: %s' % constName)
 *             c = inds.constIndex[constName]
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasConst); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_constName);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_constName);
    __Pyx_GIVEREF(__pyx_v_constName);
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (!__pyx_t_6);
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":993
 *             constName = arg
 *             if not inds.hasConst(constName):
 *                 raise Exception('No such constraint: %s' % constName)             # <<<<<<<<<<<<<<
 *             c = inds.constIndex[constName]
 *             cInds = c + self.nVariables
 */
      __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_20), __pyx_v_constName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "CyLP/cy/CyClpSimplex.pyx":994
 *             if not inds.hasConst(constName):
 *                 raise Exception('No such constraint: %s' % constName)
 *             c = inds.constIndex[constName]             # <<<<<<<<<<<<<<
 *             cInds = c + self.nVariables
 *             for i in xrange(len(cInds)):
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_constName); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_c = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":995
 *                 raise Exception('No such constraint: %s' % constName)
 *             c = inds.constIndex[constName]
 *             cInds = c + self.nVariables             # <<<<<<<<<<<<<<
 *             for i in xrange(len(cInds)):
 *                 self.CppSelf.setStatus(cInds[i], status)
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Add(__pyx_v_c, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_cInds = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":996
 *             c = inds.constIndex[constName]
 *             cInds = c + self.nVariables
 *             for i in xrange(len(cInds)):             # <<<<<<<<<<<<<<
 *                 self.CppSelf.setStatus(cInds[i], status)
 * 
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_cInds); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF(__pyx_v_i);
      __pyx_v_i = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":997
 *             cInds = c + self.nVariables
 *             for i in xrange(len(cInds)):
 *                 self.CppSelf.setStatus(cInds[i], status)             # <<<<<<<<<<<<<<
 * 
 *     def getConstraintStatus(self, arg):
 */
      __pyx_t_1 = PyObject_GetItem(__pyx_v_cInds, __pyx_v_i); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = ((enum IClpSimplex::Status)PyInt_AsLong(__pyx_v_status)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_self->CppSelf->setStatus(__pyx_t_7, __pyx_t_8);
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_constName);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_cInds);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57getConstraintStatus(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56getConstraintStatus[] = "CyClpSimplex.getConstraintStatus(self, arg)\n\n        Get the status of a constraint.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57getConstraintStatus(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConstraintStatus (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56getConstraintStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_arg));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":999
 *                 self.CppSelf.setStatus(cInds[i], status)
 * 
 *     def getConstraintStatus(self, arg):             # <<<<<<<<<<<<<<
 *         '''
 *         Get the status of a constraint.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56getConstraintStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_constName = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_cInds = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getConstraintStatus", 0);
  __Pyx_TraceCall("getConstraintStatus", __pyx_f[0], 999);
  __Pyx_INCREF(__pyx_v_arg);

  /* "CyLP/cy/CyClpSimplex.pyx":1003
 *         Get the status of a constraint.
 *         '''
 *         if isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *             arg += self.nVariables
 *             return IntToStatus[self.CppSelf.getStatus(arg)]
 */
  __Pyx_INCREF(__pyx_v_arg);
  __pyx_t_1 = __pyx_v_arg;
  __pyx_t_2 = PyInt_Check(__pyx_t_1); 
  if (!__pyx_t_2) {
    __pyx_t_3 = PyLong_Check(__pyx_t_1); 
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "CyLP/cy/CyClpSimplex.pyx":1004
 *         '''
 *         if isinstance(arg, (int, long)):
 *             arg += self.nVariables             # <<<<<<<<<<<<<<
 *             return IntToStatus[self.CppSelf.getStatus(arg)]
 *         elif True:  # isinstance(arg, CyLPVar):
 */
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_arg, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_arg);
    __pyx_v_arg = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1005
 *         if isinstance(arg, (int, long)):
 *             arg += self.nVariables
 *             return IntToStatus[self.CppSelf.getStatus(arg)]             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__IntToStatus); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_arg); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getStatus(__pyx_t_6)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_GetItem(__pyx_t_5, __pyx_t_1); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1007
 *             return IntToStatus[self.CppSelf.getStatus(arg)]
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of setVarStatus can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_self->cyLPModel, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":1008
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "CyLP/cy/CyClpSimplex.pyx":1011
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             constName = arg
 */
    __pyx_t_7 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_v_model = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1012
 *                                 'using a CyLPModel.')
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             constName = arg
 *             if not inds.hasConst(constName):
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1012; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_inds = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1013
 *             model = self.cyLPModel
 *             inds = model.inds
 *             constName = arg             # <<<<<<<<<<<<<<
 *             if not inds.hasConst(constName):
 *                 raise Exception('No such constraint: %s' % constName)
 */
    __Pyx_INCREF(__pyx_v_arg);
    __pyx_v_constName = __pyx_v_arg;

    /* "CyLP/cy/CyClpSimplex.pyx":1014
 *             inds = model.inds
 *             constName = arg
 *             if not inds.hasConst(constName):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such constraint: %s' % constName)
 *             c = inds.constIndex[constName]
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasConst); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_constName);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_constName);
    __Pyx_GIVEREF(__pyx_v_constName);
    __pyx_t_5 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1015
 *             constName = arg
 *             if not inds.hasConst(constName):
 *                 raise Exception('No such constraint: %s' % constName)             # <<<<<<<<<<<<<<
 *             c = inds.constIndex[constName]
 *             cInds = c + self.nVariables
 */
      __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_20), __pyx_v_constName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_5));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "CyLP/cy/CyClpSimplex.pyx":1016
 *             if not inds.hasConst(constName):
 *                 raise Exception('No such constraint: %s' % constName)
 *             c = inds.constIndex[constName]             # <<<<<<<<<<<<<<
 *             cInds = c + self.nVariables
 *             s = np.array([IntToStatus[
 */
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_5, __pyx_v_constName); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_c = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1017
 *                 raise Exception('No such constraint: %s' % constName)
 *             c = inds.constIndex[constName]
 *             cInds = c + self.nVariables             # <<<<<<<<<<<<<<
 *             s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(cInds[i])]
 */
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Add(__pyx_v_c, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_cInds = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1018
 *             c = inds.constIndex[constName]
 *             cInds = c + self.nVariables
 *             s = np.array([IntToStatus[             # <<<<<<<<<<<<<<
 *                             self.CppSelf.getStatus(cInds[i])]
 *                             for i in xrange(len(cInds))])
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);

    /* "CyLP/cy/CyClpSimplex.pyx":1020
 *             s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(cInds[i])]
 *                             for i in xrange(len(cInds))])             # <<<<<<<<<<<<<<
 *             if len(s) == 1:
 *                 return s[0]
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_cInds); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
    if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_9 = __pyx_t_7; __Pyx_INCREF(__pyx_t_9); __pyx_t_8 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_9)) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_9, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_9)) {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_9, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_7 = __pyx_t_10(__pyx_t_9);
        if (unlikely(!__pyx_t_7)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF(__pyx_v_i);
      __pyx_v_i = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1018
 *             c = inds.constIndex[constName]
 *             cInds = c + self.nVariables
 *             s = np.array([IntToStatus[             # <<<<<<<<<<<<<<
 *                             self.CppSelf.getStatus(cInds[i])]
 *                             for i in xrange(len(cInds))])
 */
      __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__IntToStatus); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);

      /* "CyLP/cy/CyClpSimplex.pyx":1019
 *             cInds = c + self.nVariables
 *             s = np.array([IntToStatus[
 *                             self.CppSelf.getStatus(cInds[i])]             # <<<<<<<<<<<<<<
 *                             for i in xrange(len(cInds))])
 *             if len(s) == 1:
 */
      __pyx_t_11 = PyObject_GetItem(__pyx_v_cInds, __pyx_v_i); if (!__pyx_t_11) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_11); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyInt_FromLong(__pyx_v_self->CppSelf->getStatus(__pyx_t_6)); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyObject_GetItem(__pyx_t_7, __pyx_t_11); if (!__pyx_t_12) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(__Pyx_PyList_Append(__pyx_t_5, (PyObject*)__pyx_t_12))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_t_5));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
    __pyx_v_s = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1021
 *                             self.CppSelf.getStatus(cInds[i])]
 *                             for i in xrange(len(cInds))])
 *             if len(s) == 1:             # <<<<<<<<<<<<<<
 *                 return s[0]
 *             return s
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_s); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = (__pyx_t_8 == 1);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1022
 *                             for i in xrange(len(cInds))])
 *             if len(s) == 1:
 *                 return s[0]             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "CyLP/cy/CyClpSimplex.pyx":1023
 *             if len(s) == 1:
 *                 return s[0]
 *             return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_s);
    __pyx_r = __pyx_v_s;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getConstraintStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_constName);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_cInds);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59setColumnUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnUpper); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58setColumnUpperArray[] = "CyClpSimplex.setColumnUpperArray(self, ndarray columnUpper)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59setColumnUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnUpper) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setColumnUpperArray (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnUpper), __pyx_ptype_5numpy_ndarray, 1, "columnUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58setColumnUpperArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_columnUpper));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1026
 * 
 * 
 *     def setColumnUpperArray(self, np.ndarray[np.double_t, ndim=1] columnUpper):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setColumnUpperArray(<double*>columnUpper.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58setColumnUpperArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_columnUpper) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_columnUpper;
  __Pyx_Buffer __pyx_pybuffer_columnUpper;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnUpperArray", 0);
  __Pyx_TraceCall("setColumnUpperArray", __pyx_f[0], 1026);
  __pyx_pybuffer_columnUpper.pybuffer.buf = NULL;
  __pyx_pybuffer_columnUpper.refcount = 0;
  __pyx_pybuffernd_columnUpper.data = NULL;
  __pyx_pybuffernd_columnUpper.rcbuffer = &__pyx_pybuffer_columnUpper;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_columnUpper.rcbuffer->pybuffer, (PyObject*)__pyx_v_columnUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_columnUpper.diminfo[0].strides = __pyx_pybuffernd_columnUpper.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_columnUpper.diminfo[0].shape = __pyx_pybuffernd_columnUpper.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1027
 * 
 *     def setColumnUpperArray(self, np.ndarray[np.double_t, ndim=1] columnUpper):
 *         self.CppSelf.setColumnUpperArray(<double*>columnUpper.data)             # <<<<<<<<<<<<<<
 * 
 *     def setColumnLowerArray(self, np.ndarray[np.double_t, ndim=1] columnLower):
 */
  __pyx_v_self->CppSelf->setColumnUpperArray(((double *)__pyx_v_columnUpper->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnUpper.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnUpperArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnUpper.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61setColumnLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnLower); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60setColumnLowerArray[] = "CyClpSimplex.setColumnLowerArray(self, ndarray columnLower)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61setColumnLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnLower) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setColumnLowerArray (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnLower), __pyx_ptype_5numpy_ndarray, 1, "columnLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60setColumnLowerArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_columnLower));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1029
 *         self.CppSelf.setColumnUpperArray(<double*>columnUpper.data)
 * 
 *     def setColumnLowerArray(self, np.ndarray[np.double_t, ndim=1] columnLower):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setColumnLowerArray(<double*>columnLower.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60setColumnLowerArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_columnLower) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_columnLower;
  __Pyx_Buffer __pyx_pybuffer_columnLower;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnLowerArray", 0);
  __Pyx_TraceCall("setColumnLowerArray", __pyx_f[0], 1029);
  __pyx_pybuffer_columnLower.pybuffer.buf = NULL;
  __pyx_pybuffer_columnLower.refcount = 0;
  __pyx_pybuffernd_columnLower.data = NULL;
  __pyx_pybuffernd_columnLower.rcbuffer = &__pyx_pybuffer_columnLower;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_columnLower.rcbuffer->pybuffer, (PyObject*)__pyx_v_columnLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_columnLower.diminfo[0].strides = __pyx_pybuffernd_columnLower.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_columnLower.diminfo[0].shape = __pyx_pybuffernd_columnLower.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1030
 * 
 *     def setColumnLowerArray(self, np.ndarray[np.double_t, ndim=1] columnLower):
 *         self.CppSelf.setColumnLowerArray(<double*>columnLower.data)             # <<<<<<<<<<<<<<
 * 
 *     def setRowUpperArray(self, np.ndarray[np.double_t, ndim=1] rowUpper):
 */
  __pyx_v_self->CppSelf->setColumnLowerArray(((double *)__pyx_v_columnLower->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnLower.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnLowerArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnLower.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setRowUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowUpper); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setRowUpperArray[] = "CyClpSimplex.setRowUpperArray(self, ndarray rowUpper)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setRowUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowUpper) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRowUpperArray (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowUpper), __pyx_ptype_5numpy_ndarray, 1, "rowUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setRowUpperArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_rowUpper));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1032
 *         self.CppSelf.setColumnLowerArray(<double*>columnLower.data)
 * 
 *     def setRowUpperArray(self, np.ndarray[np.double_t, ndim=1] rowUpper):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setRowUpperArray(<double*>rowUpper.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setRowUpperArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rowUpper) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowUpper;
  __Pyx_Buffer __pyx_pybuffer_rowUpper;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowUpperArray", 0);
  __Pyx_TraceCall("setRowUpperArray", __pyx_f[0], 1032);
  __pyx_pybuffer_rowUpper.pybuffer.buf = NULL;
  __pyx_pybuffer_rowUpper.refcount = 0;
  __pyx_pybuffernd_rowUpper.data = NULL;
  __pyx_pybuffernd_rowUpper.rcbuffer = &__pyx_pybuffer_rowUpper;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowUpper.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowUpper.diminfo[0].strides = __pyx_pybuffernd_rowUpper.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowUpper.diminfo[0].shape = __pyx_pybuffernd_rowUpper.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1033
 * 
 *     def setRowUpperArray(self, np.ndarray[np.double_t, ndim=1] rowUpper):
 *         self.CppSelf.setRowUpperArray(<double*>rowUpper.data)             # <<<<<<<<<<<<<<
 * 
 *     def setRowLowerArray(self, np.ndarray[np.double_t, ndim=1] rowLower):
 */
  __pyx_v_self->CppSelf->setRowUpperArray(((double *)__pyx_v_rowUpper->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowUpper.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowUpperArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowUpper.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65setRowLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowLower); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setRowLowerArray[] = "CyClpSimplex.setRowLowerArray(self, ndarray rowLower)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65setRowLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowLower) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRowLowerArray (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowLower), __pyx_ptype_5numpy_ndarray, 1, "rowLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setRowLowerArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_rowLower));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1035
 *         self.CppSelf.setRowUpperArray(<double*>rowUpper.data)
 * 
 *     def setRowLowerArray(self, np.ndarray[np.double_t, ndim=1] rowLower):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setRowLowerArray(<double*>rowLower.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setRowLowerArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_rowLower) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowLower;
  __Pyx_Buffer __pyx_pybuffer_rowLower;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowLowerArray", 0);
  __Pyx_TraceCall("setRowLowerArray", __pyx_f[0], 1035);
  __pyx_pybuffer_rowLower.pybuffer.buf = NULL;
  __pyx_pybuffer_rowLower.refcount = 0;
  __pyx_pybuffernd_rowLower.data = NULL;
  __pyx_pybuffernd_rowLower.rcbuffer = &__pyx_pybuffer_rowLower;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowLower.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowLower.diminfo[0].strides = __pyx_pybuffernd_rowLower.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowLower.diminfo[0].shape = __pyx_pybuffernd_rowLower.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1036
 * 
 *     def setRowLowerArray(self, np.ndarray[np.double_t, ndim=1] rowLower):
 *         self.CppSelf.setRowLowerArray(<double*>rowLower.data)             # <<<<<<<<<<<<<<
 * 
 *     def setObjectiveArray(self, np.ndarray[np.double_t, ndim=1] objective):
 */
  __pyx_v_self->CppSelf->setRowLowerArray(((double *)__pyx_v_rowLower->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowLower.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowLowerArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowLower.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67setObjectiveArray(PyObject *__pyx_v_self, PyObject *__pyx_v_objective); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveArray[] = "CyClpSimplex.setObjectiveArray(self, ndarray objective)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67setObjectiveArray(PyObject *__pyx_v_self, PyObject *__pyx_v_objective) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setObjectiveArray (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objective), __pyx_ptype_5numpy_ndarray, 1, "objective", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_objective));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1038
 *         self.CppSelf.setRowLowerArray(<double*>rowLower.data)
 * 
 *     def setObjectiveArray(self, np.ndarray[np.double_t, ndim=1] objective):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setObjectiveArray(<double*>objective.data, len(objective))
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_objective) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_objective;
  __Pyx_Buffer __pyx_pybuffer_objective;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setObjectiveArray", 0);
  __Pyx_TraceCall("setObjectiveArray", __pyx_f[0], 1038);
  __pyx_pybuffer_objective.pybuffer.buf = NULL;
  __pyx_pybuffer_objective.refcount = 0;
  __pyx_pybuffernd_objective.data = NULL;
  __pyx_pybuffernd_objective.rcbuffer = &__pyx_pybuffer_objective;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_objective.rcbuffer->pybuffer, (PyObject*)__pyx_v_objective, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_objective.diminfo[0].strides = __pyx_pybuffernd_objective.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_objective.diminfo[0].shape = __pyx_pybuffernd_objective.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1039
 * 
 *     def setObjectiveArray(self, np.ndarray[np.double_t, ndim=1] objective):
 *         self.CppSelf.setObjectiveArray(<double*>objective.data, len(objective))             # <<<<<<<<<<<<<<
 * 
 *     cdef double* primalColumnSolution(self):
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_objective)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setObjectiveArray(((double *)__pyx_v_objective->data), __pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_objective.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setObjectiveArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_objective.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1041
 *         self.CppSelf.setObjectiveArray(<double*>objective.data, len(objective))
 * 
 *     cdef double* primalColumnSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.primalColumnSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalColumnSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primalColumnSolution", 0);
  __Pyx_TraceCall("primalColumnSolution", __pyx_f[0], 1041);

  /* "CyLP/cy/CyClpSimplex.pyx":1042
 * 
 *     cdef double* primalColumnSolution(self):
 *         return self.CppSelf.primalColumnSolution()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* dualColumnSolution(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->primalColumnSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1044
 *         return self.CppSelf.primalColumnSolution()
 * 
 *     cdef double* dualColumnSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.dualColumnSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualColumnSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("dualColumnSolution", 0);
  __Pyx_TraceCall("dualColumnSolution", __pyx_f[0], 1044);

  /* "CyLP/cy/CyClpSimplex.pyx":1045
 * 
 *     cdef double* dualColumnSolution(self):
 *         return self.CppSelf.dualColumnSolution()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* primalRowSolution(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->dualColumnSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1047
 *         return self.CppSelf.dualColumnSolution()
 * 
 *     cdef double* primalRowSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.primalRowSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRowSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primalRowSolution", 0);
  __Pyx_TraceCall("primalRowSolution", __pyx_f[0], 1047);

  /* "CyLP/cy/CyClpSimplex.pyx":1048
 * 
 *     cdef double* primalRowSolution(self):
 *         return self.CppSelf.primalRowSolution()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* dualRowSolution(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->primalRowSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1050
 *         return self.CppSelf.primalRowSolution()
 * 
 *     cdef double* dualRowSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.dualRowSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualRowSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("dualRowSolution", 0);
  __Pyx_TraceCall("dualRowSolution", __pyx_f[0], 1050);

  /* "CyLP/cy/CyClpSimplex.pyx":1051
 * 
 *     cdef double* dualRowSolution(self):
 *         return self.CppSelf.dualRowSolution()             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __pyx_r = __pyx_v_self->CppSelf->dualRowSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69initialSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68initialSolve[] = "CyClpSimplex.initialSolve(self)\n\n        Run CLP's initialSolve. It does a presolve and uses primal or dual\n        Simplex to solve a problem.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69initialSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialSolve (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68initialSolve(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1057
 *     #############################################
 * 
 *     def initialSolve(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run CLP's initialSolve. It does a presolve and uses primal or dual
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68initialSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("initialSolve", 0);
  __Pyx_TraceCall("initialSolve", __pyx_f[0], 1057);

  /* "CyLP/cy/CyClpSimplex.pyx":1075
 * 
 *         '''
 *         return problemStatus[self.CppSelf.initialSolve()]             # <<<<<<<<<<<<<<
 * 
 *     def initialPrimalSolve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_self->CppSelf->initialSolve();
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.initialSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71initialPrimalSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70initialPrimalSolve[] = "CyClpSimplex.initialPrimalSolve(self)\n\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of primal Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialPrimalSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71initialPrimalSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialPrimalSolve (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70initialPrimalSolve(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1077
 *         return problemStatus[self.CppSelf.initialSolve()]
 * 
 *     def initialPrimalSolve(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70initialPrimalSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("initialPrimalSolve", 0);
  __Pyx_TraceCall("initialPrimalSolve", __pyx_f[0], 1077);

  /* "CyLP/cy/CyClpSimplex.pyx":1095
 * 
 *         '''
 *         return problemStatus[self.CppSelf.initialPrimalSolve()]             # <<<<<<<<<<<<<<
 * 
 *     def initialDualSolve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_self->CppSelf->initialPrimalSolve();
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.initialPrimalSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73initialDualSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72initialDualSolve[] = "CyClpSimplex.initialDualSolve(self)\n\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of dual Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialDualSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73initialDualSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialDualSolve (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72initialDualSolve(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1097
 *         return problemStatus[self.CppSelf.initialPrimalSolve()]
 * 
 *     def initialDualSolve(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72initialDualSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("initialDualSolve", 0);
  __Pyx_TraceCall("initialDualSolve", __pyx_f[0], 1097);

  /* "CyLP/cy/CyClpSimplex.pyx":1115
 * 
 *         '''
 *         return problemStatus[self.CppSelf.initialDualSolve()]             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, cons):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_self->CppSelf->initialDualSolve();
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.initialDualSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_cons); /*proto*/
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_cons) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74__iadd__(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_cons));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1117
 *         return problemStatus[self.CppSelf.initialDualSolve()]
 * 
 *     def __iadd__(self, cons):             # <<<<<<<<<<<<<<
 *         self.addConstraint(cons)
 *         return self
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74__iadd__(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cons) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__iadd__", 0);
  __Pyx_TraceCall("__iadd__", __pyx_f[0], 1117);

  /* "CyLP/cy/CyClpSimplex.pyx":1118
 * 
 *     def __iadd__(self, cons):
 *         self.addConstraint(cons)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__addConstraint); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_cons);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_cons);
  __Pyx_GIVEREF(__pyx_v_cons);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1119
 *     def __iadd__(self, cons):
 *         self.addConstraint(cons)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def addConstraint(self, cons, name=''):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_77addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76addConstraint[] = "CyClpSimplex.addConstraint(self, cons, name='')\n\n        Adds constraints ``cons``  to the problem. Example for the value\n        of ``cons`` is ``0 <= A * x <= b`` where ``A`` is a Numpy matrix and\n        b is a :py:class:`CyLPArray`.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_77addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cons = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addConstraint (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cons,&__pyx_n_s__name,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_kp_s_22);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cons)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addConstraint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cons = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addConstraint", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76addConstraint(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_cons, __pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1121
 *         return self
 * 
 *     def addConstraint(self, cons, name=''):             # <<<<<<<<<<<<<<
 *         '''
 *         Adds constraints ``cons``  to the problem. Example for the value
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76addConstraint(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cons, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_nVarsBefore = NULL;
  PyObject *__pyx_v_nConsBefore = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_dim = NULL;
  PyObject *__pyx_v_varinds = NULL;
  PyObject *__pyx_v_lb = NULL;
  PyObject *__pyx_v_ub = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_mainCoef = NULL;
  PyObject *__pyx_v_varName = NULL;
  PyObject *__pyx_v_coef = NULL;
  PyObject *__pyx_v_keys = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addConstraint", 0);
  __Pyx_TraceCall("addConstraint", __pyx_f[0], 1121);

  /* "CyLP/cy/CyClpSimplex.pyx":1127
 *         b is a :py:class:`CyLPArray`.
 *         '''
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             m = self.cyLPModel
 *             nVarsBefore = m.nVars
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":1128
 *         '''
 *         if self.cyLPModel:
 *             m = self.cyLPModel             # <<<<<<<<<<<<<<
 *             nVarsBefore = m.nVars
 *             nConsBefore = m.nCons
 */
    __pyx_t_2 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_m = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1129
 *         if self.cyLPModel:
 *             m = self.cyLPModel
 *             nVarsBefore = m.nVars             # <<<<<<<<<<<<<<
 *             nConsBefore = m.nCons
 *             c = m.addConstraint(cons, name)
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__nVars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_nVarsBefore = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1130
 *             m = self.cyLPModel
 *             nVarsBefore = m.nVars
 *             nConsBefore = m.nCons             # <<<<<<<<<<<<<<
 *             c = m.addConstraint(cons, name)
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__nCons); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_nConsBefore = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1131
 *             nVarsBefore = m.nVars
 *             nConsBefore = m.nCons
 *             c = m.addConstraint(cons, name)             # <<<<<<<<<<<<<<
 * 
 *             # If the dimension is changing, load from scartch
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__addConstraint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_cons);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_cons);
    __Pyx_GIVEREF(__pyx_v_cons);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_v_c = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1134
 * 
 *             # If the dimension is changing, load from scartch
 *             if nConsBefore == 0 or m.nVars - nVarsBefore != 0:             # <<<<<<<<<<<<<<
 *                 self.loadFromCyLPModel(self.cyLPModel)
 * 
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_nConsBefore, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_1) {
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__nVars); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_v_nVarsBefore); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __pyx_t_5;
    } else {
      __pyx_t_6 = __pyx_t_1;
    }
    if (__pyx_t_6) {

      /* "CyLP/cy/CyClpSimplex.pyx":1135
 *             # If the dimension is changing, load from scartch
 *             if nConsBefore == 0 or m.nVars - nVarsBefore != 0:
 *                 self.loadFromCyLPModel(self.cyLPModel)             # <<<<<<<<<<<<<<
 * 
 *             # If the constraing to be added is just a variable range
 */
      __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_self->cyLPModel);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->cyLPModel);
      __Pyx_GIVEREF(__pyx_v_self->cyLPModel);
      __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4;
    }

    /* "CyLP/cy/CyClpSimplex.pyx":1138
 * 
 *             # If the constraing to be added is just a variable range
 *             elif c.isRange:             # <<<<<<<<<<<<<<
 *                 var = c.variables[0]
 *                 dim = var.parentDim
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__isRange); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "CyLP/cy/CyClpSimplex.pyx":1139
 *             # If the constraing to be added is just a variable range
 *             elif c.isRange:
 *                 var = c.variables[0]             # <<<<<<<<<<<<<<
 *                 dim = var.parentDim
 *                 varinds = m.inds.varIndex[var.name]
 */
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__variables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_var = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1140
 *             elif c.isRange:
 *                 var = c.variables[0]
 *                 dim = var.parentDim             # <<<<<<<<<<<<<<
 *                 varinds = m.inds.varIndex[var.name]
 * 
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parentDim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_dim = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1141
 *                 var = c.variables[0]
 *                 dim = var.parentDim
 *                 varinds = m.inds.varIndex[var.name]             # <<<<<<<<<<<<<<
 * 
 *                 lb = var.parent.lower if var.parent else var.lower
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_varinds = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1143
 *                 varinds = m.inds.varIndex[var.name]
 * 
 *                 lb = var.parent.lower if var.parent else var.lower             # <<<<<<<<<<<<<<
 *                 ub = var.parent.upper if var.parent else var.upper
 * 
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        __pyx_t_3 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__lower); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_4 = __pyx_t_2;
        __pyx_t_2 = 0;
      } else {
        __pyx_t_2 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__lower); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __pyx_t_2;
        __pyx_t_2 = 0;
      }
      __pyx_v_lb = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1144
 * 
 *                 lb = var.parent.lower if var.parent else var.lower
 *                 ub = var.parent.upper if var.parent else var.upper             # <<<<<<<<<<<<<<
 * 
 *                 for i in var.indices:
 */
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_6) {
        __pyx_t_2 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__upper); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_4 = __pyx_t_3;
        __pyx_t_3 = 0;
      } else {
        __pyx_t_3 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__upper); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __pyx_t_3;
        __pyx_t_3 = 0;
      }
      __pyx_v_ub = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1146
 *                 ub = var.parent.upper if var.parent else var.upper
 * 
 *                 for i in var.indices:             # <<<<<<<<<<<<<<
 *                     self.setColumnLower(varinds[i], lb[i])
 *                     self.setColumnUpper(varinds[i], ub[i])
 */
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__indices); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_3)) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_3)) {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1147
 * 
 *                 for i in var.indices:
 *                     self.setColumnLower(varinds[i], lb[i])             # <<<<<<<<<<<<<<
 *                     self.setColumnUpper(varinds[i], ub[i])
 * 
 */
        __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setColumnLower); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyObject_GetItem(__pyx_v_varinds, __pyx_v_i); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PyObject_GetItem(__pyx_v_lb, __pyx_v_i); if (!__pyx_t_9) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        __pyx_t_2 = 0;
        __pyx_t_9 = 0;
        __pyx_t_9 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1148
 *                 for i in var.indices:
 *                     self.setColumnLower(varinds[i], lb[i])
 *                     self.setColumnUpper(varinds[i], ub[i])             # <<<<<<<<<<<<<<
 * 
 *             # If the constraint is a "real" constraint, but no
 */
        __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setColumnUpper); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyObject_GetItem(__pyx_v_varinds, __pyx_v_i); if (!__pyx_t_10) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = PyObject_GetItem(__pyx_v_ub, __pyx_v_i); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_10 = 0;
        __pyx_t_4 = 0;
        __pyx_t_4 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":1153
 *             # dimension changes required
 *             else:
 *                 mainCoef = None             # <<<<<<<<<<<<<<
 *                 for varName in m.varNames:
 *                     dim = m.pvdims[varName]
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_mainCoef = Py_None;

      /* "CyLP/cy/CyClpSimplex.pyx":1154
 *             else:
 *                 mainCoef = None
 *                 for varName in m.varNames:             # <<<<<<<<<<<<<<
 *                     dim = m.pvdims[varName]
 *                     coef = sparse.coo_matrix((c.nRows, dim))
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__varNames); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_3 = __pyx_t_8(__pyx_t_4);
          if (unlikely(!__pyx_t_3)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF(__pyx_v_varName);
        __pyx_v_varName = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1155
 *                 mainCoef = None
 *                 for varName in m.varNames:
 *                     dim = m.pvdims[varName]             # <<<<<<<<<<<<<<
 *                     coef = sparse.coo_matrix((c.nRows, dim))
 *                     keys = [k for k in c.varCoefs.keys() if k.name == varName]
 */
        __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__pvdims); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_varName); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_v_dim);
        __pyx_v_dim = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1156
 *                 for varName in m.varNames:
 *                     dim = m.pvdims[varName]
 *                     coef = sparse.coo_matrix((c.nRows, dim))             # <<<<<<<<<<<<<<
 *                     keys = [k for k in c.varCoefs.keys() if k.name == varName]
 *                     for var in keys:
 */
        __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__coo_matrix); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__nRows); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_dim);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_dim);
        __Pyx_GIVEREF(__pyx_v_dim);
        __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_9));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_9));
        __pyx_t_9 = 0;
        __pyx_t_9 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_v_coef);
        __pyx_v_coef = __pyx_t_9;
        __pyx_t_9 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1157
 *                     dim = m.pvdims[varName]
 *                     coef = sparse.coo_matrix((c.nRows, dim))
 *                     keys = [k for k in c.varCoefs.keys() if k.name == varName]             # <<<<<<<<<<<<<<
 *                     for var in keys:
 *                         coef = coef + c.varCoefs[var]
 */
        __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__varCoefs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__keys); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
          __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;
          __pyx_t_12 = NULL;
        } else {
          __pyx_t_11 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        for (;;) {
          if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_3)) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_2); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_3)) {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_2); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            __pyx_t_2 = __pyx_t_12(__pyx_t_3);
            if (unlikely(!__pyx_t_2)) {
              if (PyErr_Occurred()) {
                if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XDECREF(__pyx_v_k);
          __pyx_v_k = __pyx_t_2;
          __pyx_t_2 = 0;
          __pyx_t_2 = PyObject_GetAttr(__pyx_v_k, __pyx_n_s__name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = PyObject_RichCompare(__pyx_t_2, __pyx_v_varName, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_6) {
            if (unlikely(__Pyx_PyList_Append(__pyx_t_9, (PyObject*)__pyx_v_k))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            goto __pyx_L11;
          }
          __pyx_L11:;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = ((PyObject *)__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
        __Pyx_XDECREF(((PyObject *)__pyx_v_keys));
        __pyx_v_keys = ((PyObject*)__pyx_t_3);
        __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1158
 *                     coef = sparse.coo_matrix((c.nRows, dim))
 *                     keys = [k for k in c.varCoefs.keys() if k.name == varName]
 *                     for var in keys:             # <<<<<<<<<<<<<<
 *                         coef = coef + c.varCoefs[var]
 *                     mainCoef = sparseConcat(mainCoef, coef, 'h')
 */
        __pyx_t_3 = ((PyObject *)__pyx_v_keys); __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;
        for (;;) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
          __Pyx_XDECREF(__pyx_v_var);
          __pyx_v_var = __pyx_t_9;
          __pyx_t_9 = 0;

          /* "CyLP/cy/CyClpSimplex.pyx":1159
 *                     keys = [k for k in c.varCoefs.keys() if k.name == varName]
 *                     for var in keys:
 *                         coef = coef + c.varCoefs[var]             # <<<<<<<<<<<<<<
 *                     mainCoef = sparseConcat(mainCoef, coef, 'h')
 * 
 */
          __pyx_t_9 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__varCoefs); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = PyObject_GetItem(__pyx_t_9, __pyx_v_var); if (!__pyx_t_10) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = PyNumber_Add(__pyx_v_coef, __pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_v_coef);
          __pyx_v_coef = __pyx_t_9;
          __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1160
 *                     for var in keys:
 *                         coef = coef + c.varCoefs[var]
 *                     mainCoef = sparseConcat(mainCoef, coef, 'h')             # <<<<<<<<<<<<<<
 * 
 *                 self.addConstraints(c.nRows,
 */
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparseConcat); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_v_mainCoef);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_mainCoef);
        __Pyx_GIVEREF(__pyx_v_mainCoef);
        __Pyx_INCREF(__pyx_v_coef);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_coef);
        __Pyx_GIVEREF(__pyx_v_coef);
        __Pyx_INCREF(((PyObject *)__pyx_n_s__h));
        PyTuple_SET_ITEM(__pyx_t_9, 2, ((PyObject *)__pyx_n_s__h));
        __Pyx_GIVEREF(((PyObject *)__pyx_n_s__h));
        __pyx_t_10 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_v_mainCoef);
        __pyx_v_mainCoef = __pyx_t_10;
        __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1162
 *                     mainCoef = sparseConcat(mainCoef, coef, 'h')
 * 
 *                 self.addConstraints(c.nRows,             # <<<<<<<<<<<<<<
 *                         c.lower, c.upper, mainCoef.indptr,
 *                         mainCoef.indices, mainCoef.data)
 */
      __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__addConstraints); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__nRows); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);

      /* "CyLP/cy/CyClpSimplex.pyx":1163
 * 
 *                 self.addConstraints(c.nRows,
 *                         c.lower, c.upper, mainCoef.indptr,             # <<<<<<<<<<<<<<
 *                         mainCoef.indices, mainCoef.data)
 *         else:
 */
      __pyx_t_9 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__lower); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_c, __pyx_n_s__upper); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_mainCoef, __pyx_n_s__indptr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);

      /* "CyLP/cy/CyClpSimplex.pyx":1164
 *                 self.addConstraints(c.nRows,
 *                         c.lower, c.upper, mainCoef.indptr,
 *                         mainCoef.indices, mainCoef.data)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception('To add a constraint you must set ' \
 */
      __pyx_t_13 = PyObject_GetAttr(__pyx_v_mainCoef, __pyx_n_s__indices); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyObject_GetAttr(__pyx_v_mainCoef, __pyx_n_s__data); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyTuple_New(6); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_14 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_15), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_15)); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1166
 *                         mainCoef.indices, mainCoef.data)
 *         else:
 *             raise Exception('To add a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
    __pyx_t_14 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_Raise(__pyx_t_14, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_nVarsBefore);
  __Pyx_XDECREF(__pyx_v_nConsBefore);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_dim);
  __Pyx_XDECREF(__pyx_v_varinds);
  __Pyx_XDECREF(__pyx_v_lb);
  __Pyx_XDECREF(__pyx_v_ub);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_mainCoef);
  __Pyx_XDECREF(__pyx_v_varName);
  __Pyx_XDECREF(__pyx_v_coef);
  __Pyx_XDECREF(__pyx_v_keys);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_79removeConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_78removeConstraint[] = "CyClpSimplex.removeConstraint(self, name)\n\n        Removes constraint named ``name`` from the problem.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_79removeConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeConstraint (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_78removeConstraint(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_name));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1169
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def removeConstraint(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Removes constraint named ``name`` from the problem.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_78removeConstraint(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_indsOfRemovedConstriants = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("removeConstraint", 0);
  __Pyx_TraceCall("removeConstraint", __pyx_f[0], 1169);

  /* "CyLP/cy/CyClpSimplex.pyx":1173
 *         Removes constraint named ``name`` from the problem.
 *         '''
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             indsOfRemovedConstriants = self.cyLPModel.removeConstraint(name)
 *             self.CLP_deleteConstraints(indsOfRemovedConstriants)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":1174
 *         '''
 *         if self.cyLPModel:
 *             indsOfRemovedConstriants = self.cyLPModel.removeConstraint(name)             # <<<<<<<<<<<<<<
 *             self.CLP_deleteConstraints(indsOfRemovedConstriants)
 *             #self.loadFromCyLPModel(self.cyLPModel)
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__removeConstraint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_v_indsOfRemovedConstriants = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1175
 *         if self.cyLPModel:
 *             indsOfRemovedConstriants = self.cyLPModel.removeConstraint(name)
 *             self.CLP_deleteConstraints(indsOfRemovedConstriants)             # <<<<<<<<<<<<<<
 *             #self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 */
    __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_25); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_indsOfRemovedConstriants);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_indsOfRemovedConstriants);
    __Pyx_GIVEREF(__pyx_v_indsOfRemovedConstriants);
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1178
 *             #self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.removeConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indsOfRemovedConstriants);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_81addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_80addVariable[] = "CyClpSimplex.addVariable(self, varname, dim, isInt=False)\n\n        Add variable ``var`` to the problem.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_81addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_varname = 0;
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_v_isInt = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addVariable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__varname,&__pyx_n_s__dim,&__pyx_n_s__isInt,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k_28;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__varname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariable", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__isInt);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addVariable") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_varname = values[0];
    __pyx_v_dim = values[1];
    __pyx_v_isInt = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addVariable", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_80addVariable(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_varname, __pyx_v_dim, __pyx_v_isInt);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1181
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def addVariable(self, varname, dim, isInt=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Add variable ``var`` to the problem.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_80addVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varname, PyObject *__pyx_v_dim, PyObject *__pyx_v_isInt) {
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addVariable", 0);
  __Pyx_TraceCall("addVariable", __pyx_f[0], 1181);

  /* "CyLP/cy/CyClpSimplex.pyx":1185
 *         Add variable ``var`` to the problem.
 *         '''
 *         if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *             self.cyLPModel = CyLPModel()
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1186
 *         '''
 *         if not self.cyLPModel:
 *             self.cyLPModel = CyLPModel()             # <<<<<<<<<<<<<<
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 *         self.loadFromCyLPModel(self.cyLPModel)
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->cyLPModel);
    __Pyx_DECREF(__pyx_v_self->cyLPModel);
    __pyx_v_self->cyLPModel = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1187
 *         if not self.cyLPModel:
 *             self.cyLPModel = CyLPModel()
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)             # <<<<<<<<<<<<<<
 *         self.loadFromCyLPModel(self.cyLPModel)
 *         return var
 */
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_varname);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_varname);
  __Pyx_GIVEREF(__pyx_v_varname);
  __Pyx_INCREF(__pyx_v_dim);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_dim);
  __Pyx_GIVEREF(__pyx_v_dim);
  __Pyx_INCREF(__pyx_v_isInt);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_isInt);
  __Pyx_GIVEREF(__pyx_v_isInt);
  __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_var = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1188
 *             self.cyLPModel = CyLPModel()
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 *         self.loadFromCyLPModel(self.cyLPModel)             # <<<<<<<<<<<<<<
 *         return var
 *         #else:
 */
  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->cyLPModel);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->cyLPModel);
  __Pyx_GIVEREF(__pyx_v_self->cyLPModel);
  __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1189
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 *         self.loadFromCyLPModel(self.cyLPModel)
 *         return var             # <<<<<<<<<<<<<<
 *         #else:
 *         #    raise Exception('To add a variable you must set ' \
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_var);
  __pyx_r = __pyx_v_var;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_83removeVariable(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_82removeVariable[] = "CyClpSimplex.removeVariable(self, name)\n\n        Removes variable named ``name`` from the problem.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_83removeVariable(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeVariable (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_82removeVariable(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_name));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1194
 *         #                    'CyLPSimplex.cyLPModel first.')
 * 
 *     def removeVariable(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Removes variable named ``name`` from the problem.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_82removeVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("removeVariable", 0);
  __Pyx_TraceCall("removeVariable", __pyx_f[0], 1194);

  /* "CyLP/cy/CyClpSimplex.pyx":1198
 *         Removes variable named ``name`` from the problem.
 *         '''
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             self.cyLPModel.removeVariable(name)
 *             self.loadFromCyLPModel(self.cyLPModel)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":1199
 *         '''
 *         if self.cyLPModel:
 *             self.cyLPModel.removeVariable(name)             # <<<<<<<<<<<<<<
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__removeVariable); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1200
 *         if self.cyLPModel:
 *             self.cyLPModel.removeVariable(name)
 *             self.loadFromCyLPModel(self.cyLPModel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception('To remove a variable you must set ' \
 */
    __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_self->cyLPModel);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->cyLPModel);
    __Pyx_GIVEREF(__pyx_v_self->cyLPModel);
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1202
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a variable you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_30), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.removeVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_85getVarByName(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_84getVarByName[] = "CyClpSimplex.getVarByName(self, name)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_85getVarByName(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVarByName (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_84getVarByName(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_name));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1205
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def getVarByName(self, name):             # <<<<<<<<<<<<<<
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_84getVarByName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVarByName", 0);
  __Pyx_TraceCall("getVarByName", __pyx_f[0], 1205);

  /* "CyLP/cy/CyClpSimplex.pyx":1206
 * 
 *     def getVarByName(self, name):
 *         if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.getVarByName(name)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1207
 *     def getVarByName(self, name):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.getVarByName(name)
 * 
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_32), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1208
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.getVarByName(name)             # <<<<<<<<<<<<<<
 * 
 *     def getVarNameByIndex(self, ind):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__getVarByName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVarByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_87getVarNameByIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_ind); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_86getVarNameByIndex[] = "CyClpSimplex.getVarNameByIndex(self, ind)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_87getVarNameByIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_ind) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVarNameByIndex (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_86getVarNameByIndex(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_ind));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1210
 *         return self.cyLPModel.getVarByName(name)
 * 
 *     def getVarNameByIndex(self, ind):             # <<<<<<<<<<<<<<
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_86getVarNameByIndex(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ind) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVarNameByIndex", 0);
  __Pyx_TraceCall("getVarNameByIndex", __pyx_f[0], 1210);

  /* "CyLP/cy/CyClpSimplex.pyx":1211
 * 
 *     def getVarNameByIndex(self, ind):
 *         if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1212
 *     def getVarNameByIndex(self, ind):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 * 
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_33), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1213
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.inds.reverseVarSearch(ind)             # <<<<<<<<<<<<<<
 * 
 *     def CLP_addConstraint(self, numberInRow,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self->cyLPModel, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__reverseVarSearch); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_ind);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ind);
  __Pyx_GIVEREF(__pyx_v_ind);
  __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVarNameByIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_89CLP_addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_88CLP_addConstraint[] = "CyClpSimplex.CLP_addConstraint(self, numberInRow, ndarray columns, ndarray elements, rowLower, rowUpper)\n\n        Add a constraint to the problem, CLP style. See CLP documentation.\n        Not commonly used in CyLP.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_89CLP_addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_numberInRow = 0;
  PyArrayObject *__pyx_v_columns = 0;
  PyArrayObject *__pyx_v_elements = 0;
  PyObject *__pyx_v_rowLower = 0;
  PyObject *__pyx_v_rowUpper = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CLP_addConstraint (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__numberInRow,&__pyx_n_s__columns,&__pyx_n_s__elements,&__pyx_n_s__rowLower,&__pyx_n_s__rowUpper,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberInRow)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columns)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowLower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowUpper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "CLP_addConstraint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_numberInRow = values[0];
    __pyx_v_columns = ((PyArrayObject *)values[1]);
    __pyx_v_elements = ((PyArrayObject *)values[2]);
    __pyx_v_rowLower = values[3];
    __pyx_v_rowUpper = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columns), __pyx_ptype_5numpy_ndarray, 1, "columns", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_88CLP_addConstraint(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_numberInRow, __pyx_v_columns, __pyx_v_elements, __pyx_v_rowLower, __pyx_v_rowUpper);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1215
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 * 
 *     def CLP_addConstraint(self, numberInRow,             # <<<<<<<<<<<<<<
 *                     np.ndarray[np.int32_t, ndim=1] columns,
 *                     np.ndarray[np.double_t, ndim=1] elements,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_88CLP_addConstraint(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_numberInRow, PyArrayObject *__pyx_v_columns, PyArrayObject *__pyx_v_elements, PyObject *__pyx_v_rowLower, PyObject *__pyx_v_rowUpper) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_columns;
  __Pyx_Buffer __pyx_pybuffer_columns;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_elements;
  __Pyx_Buffer __pyx_pybuffer_elements;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_addConstraint", 0);
  __Pyx_TraceCall("CLP_addConstraint", __pyx_f[0], 1215);
  __pyx_pybuffer_columns.pybuffer.buf = NULL;
  __pyx_pybuffer_columns.refcount = 0;
  __pyx_pybuffernd_columns.data = NULL;
  __pyx_pybuffernd_columns.rcbuffer = &__pyx_pybuffer_columns;
  __pyx_pybuffer_elements.pybuffer.buf = NULL;
  __pyx_pybuffer_elements.refcount = 0;
  __pyx_pybuffernd_elements.data = NULL;
  __pyx_pybuffernd_elements.rcbuffer = &__pyx_pybuffer_elements;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_columns.rcbuffer->pybuffer, (PyObject*)__pyx_v_columns, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_columns.diminfo[0].strides = __pyx_pybuffernd_columns.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_columns.diminfo[0].shape = __pyx_pybuffernd_columns.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_elements.rcbuffer->pybuffer, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_elements.diminfo[0].strides = __pyx_pybuffernd_elements.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_elements.diminfo[0].shape = __pyx_pybuffernd_elements.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1227
 *         # TODO: This makes adding a row real slower,
 *         # but it is better than a COIN EXCEPTION!
 *         if (columns >= self.nVariables).any():             # <<<<<<<<<<<<<<
 *             raise Exception('CyClpSimplex.pyx:addConstraint: Column ' \
 *                     'index out of range (number of columns: ' \
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_columns), __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__any); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "CyLP/cy/CyClpSimplex.pyx":1230
 *             raise Exception('CyClpSimplex.pyx:addConstraint: Column ' \
 *                     'index out of range (number of columns: ' \
 *                                 '%d)' % (self.nVariables))             # <<<<<<<<<<<<<<
 *         self.CppSelf.addRow(numberInRow, <int*>columns.data,
 *                             <double*>elements.data, rowLower, rowUpper)
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_34), __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1231
 *                     'index out of range (number of columns: ' \
 *                                 '%d)' % (self.nVariables))
 *         self.CppSelf.addRow(numberInRow, <int*>columns.data,             # <<<<<<<<<<<<<<
 *                             <double*>elements.data, rowLower, rowUpper)
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_numberInRow); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1232
 *                                 '%d)' % (self.nVariables))
 *         self.CppSelf.addRow(numberInRow, <int*>columns.data,
 *                             <double*>elements.data, rowLower, rowUpper)             # <<<<<<<<<<<<<<
 * 
 *     def CLP_deleteConstraints(self, np.ndarray[np.int32_t, ndim=1] which):
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_rowLower); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_rowUpper); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->addRow(__pyx_t_4, ((int *)__pyx_v_columns->data), ((double *)__pyx_v_elements->data), __pyx_t_5, __pyx_t_6);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columns.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columns.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_91CLP_deleteConstraints(PyObject *__pyx_v_self, PyObject *__pyx_v_which); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_90CLP_deleteConstraints[] = "CyClpSimplex.CLP_deleteConstraints(self, ndarray which)\n\n        Delete constraints indexed by ``which`` from the LP.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_91CLP_deleteConstraints(PyObject *__pyx_v_self, PyObject *__pyx_v_which) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CLP_deleteConstraints (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_which), __pyx_ptype_5numpy_ndarray, 1, "which", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_90CLP_deleteConstraints(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_which));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1234
 *                             <double*>elements.data, rowLower, rowUpper)
 * 
 *     def CLP_deleteConstraints(self, np.ndarray[np.int32_t, ndim=1] which):             # <<<<<<<<<<<<<<
 *         '''
 *         Delete constraints indexed by ``which`` from the LP.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_90CLP_deleteConstraints(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_which) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_which;
  __Pyx_Buffer __pyx_pybuffer_which;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_deleteConstraints", 0);
  __Pyx_TraceCall("CLP_deleteConstraints", __pyx_f[0], 1234);
  __pyx_pybuffer_which.pybuffer.buf = NULL;
  __pyx_pybuffer_which.refcount = 0;
  __pyx_pybuffernd_which.data = NULL;
  __pyx_pybuffernd_which.rcbuffer = &__pyx_pybuffer_which;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_which.rcbuffer->pybuffer, (PyObject*)__pyx_v_which, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_which.diminfo[0].strides = __pyx_pybuffernd_which.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_which.diminfo[0].shape = __pyx_pybuffernd_which.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1238
 *         Delete constraints indexed by ``which`` from the LP.
 *         '''
 *         if (which >= self.nConstraints).any():             # <<<<<<<<<<<<<<
 *             raise Exception('CyClpSimplex.pyx:deleteConstraints: Constraint ' \
 *                     'index out of range (number of constraints: ' \
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_which), __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__any); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "CyLP/cy/CyClpSimplex.pyx":1241
 *             raise Exception('CyClpSimplex.pyx:deleteConstraints: Constraint ' \
 *                     'index out of range (number of constraints: ' \
 *                                 '%d)' % (self.nConstraints))             # <<<<<<<<<<<<<<
 *         self.CppSelf.deleteRows(len(which), <int*>which.data)
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_35), __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1242
 *                     'index out of range (number of constraints: ' \
 *                                 '%d)' % (self.nConstraints))
 *         self.CppSelf.deleteRows(len(which), <int*>which.data)             # <<<<<<<<<<<<<<
 * 
 *     def CLP_deleteVariables(self, np.ndarray[np.int32_t, ndim=1] which):
 */
  __pyx_t_4 = PyObject_Length(((PyObject *)__pyx_v_which)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->deleteRows(__pyx_t_4, ((int *)__pyx_v_which->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_deleteConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_93CLP_deleteVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_which); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_92CLP_deleteVariables[] = "CyClpSimplex.CLP_deleteVariables(self, ndarray which)\n\n        Delete variables indexed by ``which`` from the LP.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_93CLP_deleteVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_which) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CLP_deleteVariables (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_which), __pyx_ptype_5numpy_ndarray, 1, "which", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_92CLP_deleteVariables(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_which));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1244
 *         self.CppSelf.deleteRows(len(which), <int*>which.data)
 * 
 *     def CLP_deleteVariables(self, np.ndarray[np.int32_t, ndim=1] which):             # <<<<<<<<<<<<<<
 *         '''
 *         Delete variables indexed by ``which`` from the LP.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_92CLP_deleteVariables(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_which) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_which;
  __Pyx_Buffer __pyx_pybuffer_which;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_deleteVariables", 0);
  __Pyx_TraceCall("CLP_deleteVariables", __pyx_f[0], 1244);
  __pyx_pybuffer_which.pybuffer.buf = NULL;
  __pyx_pybuffer_which.refcount = 0;
  __pyx_pybuffernd_which.data = NULL;
  __pyx_pybuffernd_which.rcbuffer = &__pyx_pybuffer_which;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_which.rcbuffer->pybuffer, (PyObject*)__pyx_v_which, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_which.diminfo[0].strides = __pyx_pybuffernd_which.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_which.diminfo[0].shape = __pyx_pybuffernd_which.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1248
 *         Delete variables indexed by ``which`` from the LP.
 *         '''
 *         if (which >= self.nVariables).any():             # <<<<<<<<<<<<<<
 *             raise Exception('CyClpSimplex.pyx:deleteVariables: variable ' \
 *                     'index out of range (number of variables: ' \
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_which), __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__any); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "CyLP/cy/CyClpSimplex.pyx":1251
 *             raise Exception('CyClpSimplex.pyx:deleteVariables: variable ' \
 *                     'index out of range (number of variables: ' \
 *                                 '%d)' % (self.nVariables))             # <<<<<<<<<<<<<<
 *         self.CppSelf.deleteColumns(len(which), <int*>which.data)
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_36), __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1252
 *                     'index out of range (number of variables: ' \
 *                                 '%d)' % (self.nVariables))
 *         self.CppSelf.deleteColumns(len(which), <int*>which.data)             # <<<<<<<<<<<<<<
 * 
 *     def CLP_addVariable(self, numberInColumn,
 */
  __pyx_t_4 = PyObject_Length(((PyObject *)__pyx_v_which)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->deleteColumns(__pyx_t_4, ((int *)__pyx_v_which->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_deleteVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_95CLP_addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_94CLP_addVariable[] = "CyClpSimplex.CLP_addVariable(self, numberInColumn, ndarray rows, ndarray elements, columnLower, columnUpper, objective)\n\n        Add a variable to the problem, CLP style. See CLP documentation.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_95CLP_addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_numberInColumn = 0;
  PyArrayObject *__pyx_v_rows = 0;
  PyArrayObject *__pyx_v_elements = 0;
  PyObject *__pyx_v_columnLower = 0;
  PyObject *__pyx_v_columnUpper = 0;
  PyObject *__pyx_v_objective = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CLP_addVariable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__numberInColumn,&__pyx_n_s__rows,&__pyx_n_s__elements,&__pyx_n_s__columnLower,&__pyx_n_s__columnUpper,&__pyx_n_s__objective,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberInColumn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnLower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnUpper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__objective)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "CLP_addVariable") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_numberInColumn = values[0];
    __pyx_v_rows = ((PyArrayObject *)values[1]);
    __pyx_v_elements = ((PyArrayObject *)values[2]);
    __pyx_v_columnLower = values[3];
    __pyx_v_columnUpper = values[4];
    __pyx_v_objective = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rows), __pyx_ptype_5numpy_ndarray, 1, "rows", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_94CLP_addVariable(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_numberInColumn, __pyx_v_rows, __pyx_v_elements, __pyx_v_columnLower, __pyx_v_columnUpper, __pyx_v_objective);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1254
 *         self.CppSelf.deleteColumns(len(which), <int*>which.data)
 * 
 *     def CLP_addVariable(self, numberInColumn,             # <<<<<<<<<<<<<<
 *                         np.ndarray[np.int32_t, ndim=1] rows,
 *                         np.ndarray[np.double_t, ndim=1] elements,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_94CLP_addVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_numberInColumn, PyArrayObject *__pyx_v_rows, PyArrayObject *__pyx_v_elements, PyObject *__pyx_v_columnLower, PyObject *__pyx_v_columnUpper, PyObject *__pyx_v_objective) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_elements;
  __Pyx_Buffer __pyx_pybuffer_elements;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rows;
  __Pyx_Buffer __pyx_pybuffer_rows;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_addVariable", 0);
  __Pyx_TraceCall("CLP_addVariable", __pyx_f[0], 1254);
  __pyx_pybuffer_rows.pybuffer.buf = NULL;
  __pyx_pybuffer_rows.refcount = 0;
  __pyx_pybuffernd_rows.data = NULL;
  __pyx_pybuffernd_rows.rcbuffer = &__pyx_pybuffer_rows;
  __pyx_pybuffer_elements.pybuffer.buf = NULL;
  __pyx_pybuffer_elements.refcount = 0;
  __pyx_pybuffernd_elements.data = NULL;
  __pyx_pybuffernd_elements.rcbuffer = &__pyx_pybuffer_elements;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rows.rcbuffer->pybuffer, (PyObject*)__pyx_v_rows, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rows.diminfo[0].strides = __pyx_pybuffernd_rows.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rows.diminfo[0].shape = __pyx_pybuffernd_rows.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_elements.rcbuffer->pybuffer, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_elements.diminfo[0].strides = __pyx_pybuffernd_elements.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_elements.diminfo[0].shape = __pyx_pybuffernd_elements.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1266
 *         # TODO: This makes adding a column real slower,
 *         # but it is better than a COIN EXCEPTION!
 *         if (rows >= self.nConstraints).any():             # <<<<<<<<<<<<<<
 *             raise Exception('CyClpSimplex.pyx:addColumn: Row '\
 *                     'index out of range (number of rows:  ' \
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_rows), __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__any); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "CyLP/cy/CyClpSimplex.pyx":1269
 *             raise Exception('CyClpSimplex.pyx:addColumn: Row '\
 *                     'index out of range (number of rows:  ' \
 *                         '%d)' % (self.nConstraints))             # <<<<<<<<<<<<<<
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,
 *                 <double*> elements.data, columnLower,
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_37), __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1270
 *                     'index out of range (number of rows:  ' \
 *                         '%d)' % (self.nConstraints))
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,             # <<<<<<<<<<<<<<
 *                 <double*> elements.data, columnLower,
 *                                columnUpper, objective)
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_numberInColumn); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1271
 *                         '%d)' % (self.nConstraints))
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,
 *                 <double*> elements.data, columnLower,             # <<<<<<<<<<<<<<
 *                                columnUpper, objective)
 * 
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_columnLower); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1272
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,
 *                 <double*> elements.data, columnLower,
 *                                columnUpper, objective)             # <<<<<<<<<<<<<<
 * 
 *     def addVariables(self, number,
 */
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_columnUpper); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_objective); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->addColumn(__pyx_t_4, ((int *)__pyx_v_rows->data), ((double *)__pyx_v_elements->data), __pyx_t_5, __pyx_t_6, __pyx_t_7);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rows.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rows.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_97addVariables(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_96addVariables[] = "CyClpSimplex.addVariables(self, number, ndarray columnLower, ndarray columnUpper, ndarray objective, ndarray columnStarts, ndarray rows, ndarray elements)\n\n        Add ``number`` variables at once, CLP style.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_97addVariables(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_number = 0;
  PyArrayObject *__pyx_v_columnLower = 0;
  PyArrayObject *__pyx_v_columnUpper = 0;
  PyArrayObject *__pyx_v_objective = 0;
  PyArrayObject *__pyx_v_columnStarts = 0;
  PyArrayObject *__pyx_v_rows = 0;
  PyArrayObject *__pyx_v_elements = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addVariables (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__number,&__pyx_n_s__columnLower,&__pyx_n_s__columnUpper,&__pyx_n_s__objective,&__pyx_n_s__columnStarts,&__pyx_n_s__rows,&__pyx_n_s__elements,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__number)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnLower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnUpper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__objective)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnStarts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addVariables") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_number = values[0];
    __pyx_v_columnLower = ((PyArrayObject *)values[1]);
    __pyx_v_columnUpper = ((PyArrayObject *)values[2]);
    __pyx_v_objective = ((PyArrayObject *)values[3]);
    __pyx_v_columnStarts = ((PyArrayObject *)values[4]);
    __pyx_v_rows = ((PyArrayObject *)values[5]);
    __pyx_v_elements = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnLower), __pyx_ptype_5numpy_ndarray, 1, "columnLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnUpper), __pyx_ptype_5numpy_ndarray, 1, "columnUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objective), __pyx_ptype_5numpy_ndarray, 1, "objective", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnStarts), __pyx_ptype_5numpy_ndarray, 1, "columnStarts", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rows), __pyx_ptype_5numpy_ndarray, 1, "rows", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_96addVariables(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_number, __pyx_v_columnLower, __pyx_v_columnUpper, __pyx_v_objective, __pyx_v_columnStarts, __pyx_v_rows, __pyx_v_elements);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1274
 *                                columnUpper, objective)
 * 
 *     def addVariables(self, number,             # <<<<<<<<<<<<<<
 *                         np.ndarray[np.double_t, ndim=1] columnLower,
 *                         np.ndarray[np.double_t, ndim=1] columnUpper,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_96addVariables(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_number, PyArrayObject *__pyx_v_columnLower, PyArrayObject *__pyx_v_columnUpper, PyArrayObject *__pyx_v_objective, PyArrayObject *__pyx_v_columnStarts, PyArrayObject *__pyx_v_rows, PyArrayObject *__pyx_v_elements) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_columnLower;
  __Pyx_Buffer __pyx_pybuffer_columnLower;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_columnStarts;
  __Pyx_Buffer __pyx_pybuffer_columnStarts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_columnUpper;
  __Pyx_Buffer __pyx_pybuffer_columnUpper;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_elements;
  __Pyx_Buffer __pyx_pybuffer_elements;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_objective;
  __Pyx_Buffer __pyx_pybuffer_objective;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rows;
  __Pyx_Buffer __pyx_pybuffer_rows;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addVariables", 0);
  __Pyx_TraceCall("addVariables", __pyx_f[0], 1274);
  __pyx_pybuffer_columnLower.pybuffer.buf = NULL;
  __pyx_pybuffer_columnLower.refcount = 0;
  __pyx_pybuffernd_columnLower.data = NULL;
  __pyx_pybuffernd_columnLower.rcbuffer = &__pyx_pybuffer_columnLower;
  __pyx_pybuffer_columnUpper.pybuffer.buf = NULL;
  __pyx_pybuffer_columnUpper.refcount = 0;
  __pyx_pybuffernd_columnUpper.data = NULL;
  __pyx_pybuffernd_columnUpper.rcbuffer = &__pyx_pybuffer_columnUpper;
  __pyx_pybuffer_objective.pybuffer.buf = NULL;
  __pyx_pybuffer_objective.refcount = 0;
  __pyx_pybuffernd_objective.data = NULL;
  __pyx_pybuffernd_objective.rcbuffer = &__pyx_pybuffer_objective;
  __pyx_pybuffer_columnStarts.pybuffer.buf = NULL;
  __pyx_pybuffer_columnStarts.refcount = 0;
  __pyx_pybuffernd_columnStarts.data = NULL;
  __pyx_pybuffernd_columnStarts.rcbuffer = &__pyx_pybuffer_columnStarts;
  __pyx_pybuffer_rows.pybuffer.buf = NULL;
  __pyx_pybuffer_rows.refcount = 0;
  __pyx_pybuffernd_rows.data = NULL;
  __pyx_pybuffernd_rows.rcbuffer = &__pyx_pybuffer_rows;
  __pyx_pybuffer_elements.pybuffer.buf = NULL;
  __pyx_pybuffer_elements.refcount = 0;
  __pyx_pybuffernd_elements.data = NULL;
  __pyx_pybuffernd_elements.rcbuffer = &__pyx_pybuffer_elements;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_columnLower.rcbuffer->pybuffer, (PyObject*)__pyx_v_columnLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_columnLower.diminfo[0].strides = __pyx_pybuffernd_columnLower.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_columnLower.diminfo[0].shape = __pyx_pybuffernd_columnLower.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_columnUpper.rcbuffer->pybuffer, (PyObject*)__pyx_v_columnUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_columnUpper.diminfo[0].strides = __pyx_pybuffernd_columnUpper.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_columnUpper.diminfo[0].shape = __pyx_pybuffernd_columnUpper.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_objective.rcbuffer->pybuffer, (PyObject*)__pyx_v_objective, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_objective.diminfo[0].strides = __pyx_pybuffernd_objective.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_objective.diminfo[0].shape = __pyx_pybuffernd_objective.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_columnStarts.rcbuffer->pybuffer, (PyObject*)__pyx_v_columnStarts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_columnStarts.diminfo[0].strides = __pyx_pybuffernd_columnStarts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_columnStarts.diminfo[0].shape = __pyx_pybuffernd_columnStarts.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rows.rcbuffer->pybuffer, (PyObject*)__pyx_v_rows, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rows.diminfo[0].strides = __pyx_pybuffernd_rows.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rows.diminfo[0].shape = __pyx_pybuffernd_rows.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_elements.rcbuffer->pybuffer, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_elements.diminfo[0].strides = __pyx_pybuffernd_elements.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_elements.diminfo[0].shape = __pyx_pybuffernd_elements.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1285
 *         For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.
 *         '''
 *         self.CppSelf.addColumns(number, <double*>columnLower.data,             # <<<<<<<<<<<<<<
 *                                         <double*>columnUpper.data,
 *                                         <double*>objective.data,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_number); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1290
 *                                         <int*>columnStarts.data,
 *                                         <int*>rows.data,
 *                                         <double*>elements.data)             # <<<<<<<<<<<<<<
 * 
 *     def addConstraints(self, number,
 */
  __pyx_v_self->CppSelf->addColumns(__pyx_t_1, ((double *)__pyx_v_columnLower->data), ((double *)__pyx_v_columnUpper->data), ((double *)__pyx_v_objective->data), ((int *)__pyx_v_columnStarts->data), ((int *)__pyx_v_rows->data), ((double *)__pyx_v_elements->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnLower.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnStarts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnUpper.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_objective.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rows.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnLower.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnStarts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columnUpper.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_objective.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rows.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_99addConstraints(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_98addConstraints[] = "CyClpSimplex.addConstraints(self, number, ndarray rowLower, ndarray rowUpper, ndarray rowStarts, ndarray columns, ndarray elements)\n\n        Add ``number`` constraints at once, CLP style.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_99addConstraints(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_number = 0;
  PyArrayObject *__pyx_v_rowLower = 0;
  PyArrayObject *__pyx_v_rowUpper = 0;
  PyArrayObject *__pyx_v_rowStarts = 0;
  PyArrayObject *__pyx_v_columns = 0;
  PyArrayObject *__pyx_v_elements = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addConstraints (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__number,&__pyx_n_s__rowLower,&__pyx_n_s__rowUpper,&__pyx_n_s__rowStarts,&__pyx_n_s__columns,&__pyx_n_s__elements,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__number)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowLower)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowUpper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowStarts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columns)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addConstraints") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_number = values[0];
    __pyx_v_rowLower = ((PyArrayObject *)values[1]);
    __pyx_v_rowUpper = ((PyArrayObject *)values[2]);
    __pyx_v_rowStarts = ((PyArrayObject *)values[3]);
    __pyx_v_columns = ((PyArrayObject *)values[4]);
    __pyx_v_elements = ((PyArrayObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowLower), __pyx_ptype_5numpy_ndarray, 1, "rowLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowUpper), __pyx_ptype_5numpy_ndarray, 1, "rowUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowStarts), __pyx_ptype_5numpy_ndarray, 1, "rowStarts", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columns), __pyx_ptype_5numpy_ndarray, 1, "columns", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_98addConstraints(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_number, __pyx_v_rowLower, __pyx_v_rowUpper, __pyx_v_rowStarts, __pyx_v_columns, __pyx_v_elements);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1292
 *                                         <double*>elements.data)
 * 
 *     def addConstraints(self, number,             # <<<<<<<<<<<<<<
 *                         np.ndarray[np.double_t, ndim=1] rowLower,
 *                         np.ndarray[np.double_t, ndim=1] rowUpper,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_98addConstraints(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_number, PyArrayObject *__pyx_v_rowLower, PyArrayObject *__pyx_v_rowUpper, PyArrayObject *__pyx_v_rowStarts, PyArrayObject *__pyx_v_columns, PyArrayObject *__pyx_v_elements) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_columns;
  __Pyx_Buffer __pyx_pybuffer_columns;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_elements;
  __Pyx_Buffer __pyx_pybuffer_elements;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowLower;
  __Pyx_Buffer __pyx_pybuffer_rowLower;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowStarts;
  __Pyx_Buffer __pyx_pybuffer_rowStarts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowUpper;
  __Pyx_Buffer __pyx_pybuffer_rowUpper;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addConstraints", 0);
  __Pyx_TraceCall("addConstraints", __pyx_f[0], 1292);
  __pyx_pybuffer_rowLower.pybuffer.buf = NULL;
  __pyx_pybuffer_rowLower.refcount = 0;
  __pyx_pybuffernd_rowLower.data = NULL;
  __pyx_pybuffernd_rowLower.rcbuffer = &__pyx_pybuffer_rowLower;
  __pyx_pybuffer_rowUpper.pybuffer.buf = NULL;
  __pyx_pybuffer_rowUpper.refcount = 0;
  __pyx_pybuffernd_rowUpper.data = NULL;
  __pyx_pybuffernd_rowUpper.rcbuffer = &__pyx_pybuffer_rowUpper;
  __pyx_pybuffer_rowStarts.pybuffer.buf = NULL;
  __pyx_pybuffer_rowStarts.refcount = 0;
  __pyx_pybuffernd_rowStarts.data = NULL;
  __pyx_pybuffernd_rowStarts.rcbuffer = &__pyx_pybuffer_rowStarts;
  __pyx_pybuffer_columns.pybuffer.buf = NULL;
  __pyx_pybuffer_columns.refcount = 0;
  __pyx_pybuffernd_columns.data = NULL;
  __pyx_pybuffernd_columns.rcbuffer = &__pyx_pybuffer_columns;
  __pyx_pybuffer_elements.pybuffer.buf = NULL;
  __pyx_pybuffer_elements.refcount = 0;
  __pyx_pybuffernd_elements.data = NULL;
  __pyx_pybuffernd_elements.rcbuffer = &__pyx_pybuffer_elements;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowLower.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowLower.diminfo[0].strides = __pyx_pybuffernd_rowLower.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowLower.diminfo[0].shape = __pyx_pybuffernd_rowLower.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowUpper.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowUpper.diminfo[0].strides = __pyx_pybuffernd_rowUpper.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowUpper.diminfo[0].shape = __pyx_pybuffernd_rowUpper.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowStarts.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowStarts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowStarts.diminfo[0].strides = __pyx_pybuffernd_rowStarts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowStarts.diminfo[0].shape = __pyx_pybuffernd_rowStarts.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_columns.rcbuffer->pybuffer, (PyObject*)__pyx_v_columns, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_columns.diminfo[0].strides = __pyx_pybuffernd_columns.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_columns.diminfo[0].shape = __pyx_pybuffernd_columns.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_elements.rcbuffer->pybuffer, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_elements.diminfo[0].strides = __pyx_pybuffernd_elements.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_elements.diminfo[0].shape = __pyx_pybuffernd_elements.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1302
 *         For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.
 *         '''
 *         self.CppSelf.addRows(number, <double*>rowLower.data,             # <<<<<<<<<<<<<<
 *                                     <double*>rowUpper.data,
 *                                     <int*>rowStarts.data,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_number); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1306
 *                                     <int*>rowStarts.data,
 *                                     <int*>columns.data,
 *                                     <double*>elements.data)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,
 */
  __pyx_v_self->CppSelf->addRows(__pyx_t_1, ((double *)__pyx_v_rowLower->data), ((double *)__pyx_v_rowUpper->data), ((int *)__pyx_v_rowStarts->data), ((int *)__pyx_v_columns->data), ((double *)__pyx_v_elements->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columns.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowLower.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowStarts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowUpper.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_columns.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_elements.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowLower.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowStarts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowUpper.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1308
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_101readMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, char *__pyx_v_filename, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps *__pyx_optional_args) {
  int __pyx_v_keepNames = ((int)0);

  /* "CyLP/cy/CyClpSimplex.pyx":1309
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,
 *             int ignoreErrors=False) except *:             # <<<<<<<<<<<<<<
 *         '''
 *         Read an mps file. See this :ref:`modeling example <modeling-usage>`.
 */
  int __pyx_v_ignoreErrors = ((int)0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("readMps", 0);
  __Pyx_TraceCall("readMps", __pyx_f[0], 1308);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_keepNames = __pyx_optional_args->keepNames;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_ignoreErrors = __pyx_optional_args->ignoreErrors;
      }
    }
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1308
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readMps); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_101readMps)) {
      __pyx_t_2 = PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyInt_FromLong(__pyx_v_keepNames); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_ignoreErrors); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1319
 * 
 *         #if ext == '.mps':
 *         return self.CppSelf.readMps(filename, keepNames, ignoreErrors)             # <<<<<<<<<<<<<<
 *         #else:
 *         #    return self.CppSelf.readMps(filename, keepNames, ignoreErrors)
 */
  __pyx_r = __pyx_v_self->CppSelf->readMps(__pyx_v_filename, __pyx_v_keepNames, __pyx_v_ignoreErrors);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("CyLP.cy.CyClpSimplex.CyClpSimplex.readMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_101readMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_100readMps[] = "CyClpSimplex.readMps(self, char *filename, int keepNames=False, int ignoreErrors=False) -> int\n\n        Read an mps file. See this :ref:`modeling example <modeling-usage>`.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_101readMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  int __pyx_v_keepNames;
  int __pyx_v_ignoreErrors;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readMps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__keepNames,&__pyx_n_s__ignoreErrors,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__keepNames);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ignoreErrors);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readMps") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_keepNames = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_keepNames == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "CyLP/cy/CyClpSimplex.pyx":1308
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */
      __pyx_v_keepNames = ((int)0);
    }
    if (values[2]) {
      __pyx_v_ignoreErrors = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_ignoreErrors == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "CyLP/cy/CyClpSimplex.pyx":1309
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,
 *             int ignoreErrors=False) except *:             # <<<<<<<<<<<<<<
 *         '''
 *         Read an mps file. See this :ref:`modeling example <modeling-usage>`.
 */
      __pyx_v_ignoreErrors = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readMps", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.readMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_100readMps(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_filename, __pyx_v_keepNames, __pyx_v_ignoreErrors);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1308
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_100readMps(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, char *__pyx_v_filename, int __pyx_v_keepNames, int __pyx_v_ignoreErrors) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("readMps", 0);
  __Pyx_TraceCall("readMps", __pyx_f[0], 1308);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.keepNames = __pyx_v_keepNames;
  __pyx_t_2.ignoreErrors = __pyx_v_ignoreErrors;
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->readMps(__pyx_v_self, __pyx_v_filename, 1, &__pyx_t_2); 
  __pyx_t_3 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.readMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_103extractCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_102extractCyLPModel[] = "CyClpSimplex.extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_103extractCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fileName = 0;
  PyObject *__pyx_v_keepNames = 0;
  PyObject *__pyx_v_ignoreErrors = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extractCyLPModel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fileName,&__pyx_n_s__keepNames,&__pyx_n_s__ignoreErrors,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k_38;
    values[2] = __pyx_k_39;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fileName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__keepNames);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ignoreErrors);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "extractCyLPModel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fileName = values[0];
    __pyx_v_keepNames = values[1];
    __pyx_v_ignoreErrors = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extractCyLPModel", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.extractCyLPModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_102extractCyLPModel(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_fileName, __pyx_v_keepNames, __pyx_v_ignoreErrors);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1330
 *             #return ret
 * 
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):             # <<<<<<<<<<<<<<
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_102extractCyLPModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_fileName, PyObject *__pyx_v_keepNames, PyObject *__pyx_v_ignoreErrors) {
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_c_up = NULL;
  PyObject *__pyx_v_c_low = NULL;
  PyObject *__pyx_v_mat = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_x_up = NULL;
  PyObject *__pyx_v_x_low = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("extractCyLPModel", 0);
  __Pyx_TraceCall("extractCyLPModel", __pyx_f[0], 1330);

  /* "CyLP/cy/CyClpSimplex.pyx":1331
 * 
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:             # <<<<<<<<<<<<<<
 *             return None
 *         m = CyLPModel()
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_fileName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_keepNames); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_ignoreErrors); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5.__pyx_n = 2;
  __pyx_t_5.keepNames = __pyx_t_2;
  __pyx_t_5.ignoreErrors = __pyx_t_3;
  __pyx_t_4 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->readMps(__pyx_v_self, __pyx_t_1, 0, &__pyx_t_5); 
  __pyx_t_6 = (__pyx_t_4 != 0);
  if (__pyx_t_6) {

    /* "CyLP/cy/CyClpSimplex.pyx":1332
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None             # <<<<<<<<<<<<<<
 *         m = CyLPModel()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1333
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None
 *         m = CyLPModel()             # <<<<<<<<<<<<<<
 * 
 *         x = m.addVariable('x', self.nVariables)
 */
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_m = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1335
 *         m = CyLPModel()
 * 
 *         x = m.addVariable('x', self.nVariables)             # <<<<<<<<<<<<<<
 * 
 *         # Copy is crucial. Memory space should be different than
 */
  __pyx_t_8 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__x));
  PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_n_s__x));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__x));
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
  __pyx_v_x = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1339
 *         # Copy is crucial. Memory space should be different than
 *         # that of Clp. Else, a resize will ruin these.
 *         c_up = CyLPArray(self.constraintsUpper).copy()             # <<<<<<<<<<<<<<
 *         c_low = CyLPArray(self.constraintsLower).copy()
 * 
 */
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__constraintsUpper); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__copy); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_c_up = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1340
 *         # that of Clp. Else, a resize will ruin these.
 *         c_up = CyLPArray(self.constraintsUpper).copy()
 *         c_low = CyLPArray(self.constraintsLower).copy()             # <<<<<<<<<<<<<<
 * 
 *         mat = self.matrix
 */
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__constraintsLower); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__copy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_c_low = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1342
 *         c_low = CyLPArray(self.constraintsLower).copy()
 * 
 *         mat = self.matrix             # <<<<<<<<<<<<<<
 *         C = csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),
 *                              shape=(self.nConstraints, self.nVariables))
 */
  __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__matrix); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_mat = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1343
 * 
 *         mat = self.matrix
 *         C = csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),             # <<<<<<<<<<<<<<
 *                              shape=(self.nConstraints, self.nVariables))
 * 
 */
  __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__csc_matrixPlus); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__elements); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__indices); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__vectorStarts); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_7 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_t_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_11));
  __pyx_t_11 = 0;
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_11));

  /* "CyLP/cy/CyClpSimplex.pyx":1344
 *         mat = self.matrix
 *         C = csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),
 *                              shape=(self.nConstraints, self.nVariables))             # <<<<<<<<<<<<<<
 * 
 *         m += c_low <= C * x <= c_up
 */
  __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_9 = 0;
  __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_11, ((PyObject *)__pyx_n_s__shape), ((PyObject *)__pyx_t_12)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_12)); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_10), ((PyObject *)__pyx_t_11)); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
  __pyx_v_C = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1346
 *                              shape=(self.nConstraints, self.nVariables))
 * 
 *         m += c_low <= C * x <= c_up             # <<<<<<<<<<<<<<
 * 
 *         x_up = CyLPArray(self.variablesUpper).copy()
 */
  __pyx_t_12 = PyNumber_Multiply(__pyx_v_C, __pyx_v_x); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = PyObject_RichCompare(__pyx_v_c_low, __pyx_t_12, Py_LE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_PyObject_IsTrue(__pyx_t_11)) {
    __Pyx_DECREF(__pyx_t_11);
    __pyx_t_11 = PyObject_RichCompare(__pyx_t_12, __pyx_v_c_up, Py_LE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_m, __pyx_t_11); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_v_m);
  __pyx_v_m = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1348
 *         m += c_low <= C * x <= c_up
 * 
 *         x_up = CyLPArray(self.variablesUpper).copy()             # <<<<<<<<<<<<<<
 *         x_low = CyLPArray(self.variablesLower).copy()
 * 
 */
  __pyx_t_12 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__variablesUpper); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_12, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__copy); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_10, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_x_up = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1349
 * 
 *         x_up = CyLPArray(self.variablesUpper).copy()
 *         x_low = CyLPArray(self.variablesLower).copy()             # <<<<<<<<<<<<<<
 * 
 *         m += x_low <= x <= x_up
 */
  __pyx_t_11 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__variablesLower); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_t_12), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_12)); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_GetAttr(__pyx_t_10, __pyx_n_s__copy); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_12, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_x_low = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1351
 *         x_low = CyLPArray(self.variablesLower).copy()
 * 
 *         m += x_low <= x <= x_up             # <<<<<<<<<<<<<<
 * 
 *         m.objective = self.objective
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_x_low, __pyx_v_x, Py_LE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_PyObject_IsTrue(__pyx_t_10)) {
    __Pyx_DECREF(__pyx_t_10);
    __pyx_t_10 = PyObject_RichCompare(__pyx_v_x, __pyx_v_x_up, Py_LE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_m, __pyx_t_10); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_v_m);
  __pyx_v_m = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1353
 *         m += x_low <= x <= x_up
 * 
 *         m.objective = self.objective             # <<<<<<<<<<<<<<
 * 
 *         self.cyLPModel = m
 */
  __pyx_t_12 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__objective); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  if (PyObject_SetAttr(__pyx_v_m, __pyx_n_s__objective, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1355
 *         m.objective = self.objective
 * 
 *         self.cyLPModel = m             # <<<<<<<<<<<<<<
 *         return m
 * 
 */
  __Pyx_INCREF(__pyx_v_m);
  __Pyx_GIVEREF(__pyx_v_m);
  __Pyx_GOTREF(__pyx_v_self->cyLPModel);
  __Pyx_DECREF(__pyx_v_self->cyLPModel);
  __pyx_v_self->cyLPModel = __pyx_v_m;

  /* "CyLP/cy/CyClpSimplex.pyx":1356
 * 
 *         self.cyLPModel = m
 *         return m             # <<<<<<<<<<<<<<
 * 
 *     def _extractStartFinish(self, startFinishOptions):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_m);
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.extractCyLPModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_c_up);
  __Pyx_XDECREF(__pyx_v_c_low);
  __Pyx_XDECREF(__pyx_v_mat);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_x_up);
  __Pyx_XDECREF(__pyx_v_x_low);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_105_extractStartFinish(PyObject *__pyx_v_self, PyObject *__pyx_v_startFinishOptions); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_104_extractStartFinish[] = "CyClpSimplex._extractStartFinish(self, startFinishOptions)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_105_extractStartFinish(PyObject *__pyx_v_self, PyObject *__pyx_v_startFinishOptions) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_extractStartFinish (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_104_extractStartFinish(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_startFinishOptions));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1358
 *         return m
 * 
 *     def _extractStartFinish(self, startFinishOptions):             # <<<<<<<<<<<<<<
 *         if isinstance(startFinishOptions, int):
 *             sf = startFinishOptions
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_104_extractStartFinish(CYTHON_UNUSED struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_startFinishOptions) {
  PyObject *__pyx_v_sf = NULL;
  PyObject *__pyx_v_option = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("_extractStartFinish", 0);
  __Pyx_TraceCall("_extractStartFinish", __pyx_f[0], 1358);

  /* "CyLP/cy/CyClpSimplex.pyx":1359
 * 
 *     def _extractStartFinish(self, startFinishOptions):
 *         if isinstance(startFinishOptions, int):             # <<<<<<<<<<<<<<
 *             sf = startFinishOptions
 *         else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyInt_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_startFinishOptions, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1360
 *     def _extractStartFinish(self, startFinishOptions):
 *         if isinstance(startFinishOptions, int):
 *             sf = startFinishOptions             # <<<<<<<<<<<<<<
 *         else:
 *             sf = 0
 */
    __Pyx_INCREF(__pyx_v_startFinishOptions);
    __pyx_v_sf = __pyx_v_startFinishOptions;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1362
 *             sf = startFinishOptions
 *         else:
 *             sf = 0             # <<<<<<<<<<<<<<
 *             for option in startFinishOptions:
 *                 sf = sf | startFinishOptionsDic[option]
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_sf = __pyx_int_0;

    /* "CyLP/cy/CyClpSimplex.pyx":1363
 *         else:
 *             sf = 0
 *             for option in startFinishOptions:             # <<<<<<<<<<<<<<
 *                 sf = sf | startFinishOptionsDic[option]
 *         return sf
 */
    if (PyList_CheckExact(__pyx_v_startFinishOptions) || PyTuple_CheckExact(__pyx_v_startFinishOptions)) {
      __pyx_t_1 = __pyx_v_startFinishOptions; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_startFinishOptions); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_1)) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_1)) {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_1);
        if (unlikely(!__pyx_t_5)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF(__pyx_v_option);
      __pyx_v_option = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1364
 *             sf = 0
 *             for option in startFinishOptions:
 *                 sf = sf | startFinishOptionsDic[option]             # <<<<<<<<<<<<<<
 *         return sf
 * 
 */
      __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s_40); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_GetItem(__pyx_t_5, __pyx_v_option); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Or(__pyx_v_sf, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_sf);
      __pyx_v_sf = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1365
 *             for option in startFinishOptions:
 *                 sf = sf | startFinishOptionsDic[option]
 *         return sf             # <<<<<<<<<<<<<<
 * 
 *     def primal(self, ifValuesPass=0, startFinishOptions=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_sf);
  __pyx_r = __pyx_v_sf;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex._extractStartFinish", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sf);
  __Pyx_XDECREF(__pyx_v_option);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_107primal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_106primal[] = "CyClpSimplex.primal(self, ifValuesPass=0, startFinishOptions=0)\n\n        Solve the problem using the primal simplex algorithm.\n        See this :ref:`usage example <simple-run>`.\n\n        startFinishOptions is a string containing one or\n        more of the following characters:\n        'x': do not delete work areas\n        'f': use old factorization if possible\n        's': skip initialization of work areas\n        So one might call ``self.primal(startFinishOptions='sx')``\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_107primal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifValuesPass = 0;
  PyObject *__pyx_v_startFinishOptions = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("primal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ifValuesPass,&__pyx_n_s__startFinishOptions,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ifValuesPass);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__startFinishOptions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "primal") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifValuesPass = values[0];
    __pyx_v_startFinishOptions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("primal", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_106primal(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ifValuesPass, __pyx_v_startFinishOptions);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1367
 *         return sf
 * 
 *     def primal(self, ifValuesPass=0, startFinishOptions=0):             # <<<<<<<<<<<<<<
 *         '''
 *         Solve the problem using the primal simplex algorithm.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_106primal(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ifValuesPass, PyObject *__pyx_v_startFinishOptions) {
  PyObject *__pyx_v_sf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primal", 0);
  __Pyx_TraceCall("primal", __pyx_f[0], 1367);

  /* "CyLP/cy/CyClpSimplex.pyx":1379
 *         So one might call ``self.primal(startFinishOptions='sx')``
 *         '''
 *         sf = self._extractStartFinish(startFinishOptions)             # <<<<<<<<<<<<<<
 *         return problemStatus[self.CppSelf.primal(
 *                              ifValuesPass, sf)]
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s___extractStartFinish); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_startFinishOptions);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_startFinishOptions);
  __Pyx_GIVEREF(__pyx_v_startFinishOptions);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_sf = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1380
 *         '''
 *         sf = self._extractStartFinish(startFinishOptions)
 *         return problemStatus[self.CppSelf.primal(             # <<<<<<<<<<<<<<
 *                              ifValuesPass, sf)]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "CyLP/cy/CyClpSimplex.pyx":1381
 *         sf = self._extractStartFinish(startFinishOptions)
 *         return problemStatus[self.CppSelf.primal(
 *                              ifValuesPass, sf)]             # <<<<<<<<<<<<<<
 * 
 *     def dual(self, ifValuesPass=0, startFinishOptions=0):
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_ifValuesPass); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_sf); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_v_self->CppSelf->primal(__pyx_t_4, __pyx_t_5);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_6, sizeof(int), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_109dual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_108dual[] = "CyClpSimplex.dual(self, ifValuesPass=0, startFinishOptions=0)\n\n        Runs CLP dual simplex.\n\n        **Usage Example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.dual()\n        'optimal'\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_109dual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifValuesPass = 0;
  PyObject *__pyx_v_startFinishOptions = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dual (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ifValuesPass,&__pyx_n_s__startFinishOptions,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ifValuesPass);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__startFinishOptions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dual") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifValuesPass = values[0];
    __pyx_v_startFinishOptions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dual", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_108dual(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ifValuesPass, __pyx_v_startFinishOptions);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1383
 *                              ifValuesPass, sf)]
 * 
 *     def dual(self, ifValuesPass=0, startFinishOptions=0):             # <<<<<<<<<<<<<<
 *         '''
 *         Runs CLP dual simplex.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_108dual(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_ifValuesPass, PyObject *__pyx_v_startFinishOptions) {
  PyObject *__pyx_v_sf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("dual", 0);
  __Pyx_TraceCall("dual", __pyx_f[0], 1383);

  /* "CyLP/cy/CyClpSimplex.pyx":1398
 * 
 *         '''
 *         sf = self._extractStartFinish(startFinishOptions)             # <<<<<<<<<<<<<<
 *         return problemStatus[self.CppSelf.dual(
 *                             ifValuesPass, sf)]
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s___extractStartFinish); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_startFinishOptions);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_startFinishOptions);
  __Pyx_GIVEREF(__pyx_v_startFinishOptions);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_sf = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1399
 *         '''
 *         sf = self._extractStartFinish(startFinishOptions)
 *         return problemStatus[self.CppSelf.dual(             # <<<<<<<<<<<<<<
 *                             ifValuesPass, sf)]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "CyLP/cy/CyClpSimplex.pyx":1400
 *         sf = self._extractStartFinish(startFinishOptions)
 *         return problemStatus[self.CppSelf.dual(
 *                             ifValuesPass, sf)]             # <<<<<<<<<<<<<<
 * 
 *     def setPerturbation(self, value):
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_ifValuesPass); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_sf); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_v_self->CppSelf->dual(__pyx_t_4, __pyx_t_5);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_6, sizeof(int), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_111setPerturbation(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_110setPerturbation[] = "CyClpSimplex.setPerturbation(self, value)\n\n        Perturb the problem by ``value``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_111setPerturbation(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPerturbation (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_110setPerturbation(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1402
 *                             ifValuesPass, sf)]
 * 
 *     def setPerturbation(self, value):             # <<<<<<<<<<<<<<
 *         '''
 *         Perturb the problem by ``value``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_110setPerturbation(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPerturbation", 0);
  __Pyx_TraceCall("setPerturbation", __pyx_f[0], 1402);

  /* "CyLP/cy/CyClpSimplex.pyx":1406
 *         Perturb the problem by ``value``.
 *         '''
 *         self.CppSelf.setPerturbation(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef setPrimalColumnPivotAlgorithm(self, void* choice):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setPerturbation(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPerturbation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1408
 *         self.CppSelf.setPerturbation(value)
 * 
 *     cdef setPrimalColumnPivotAlgorithm(self, void* choice):             # <<<<<<<<<<<<<<
 *         '''
 *         Set primal simplex's pivot rule to ``choice``
 */

static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setPrimalColumnPivotAlgorithm(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, void *__pyx_v_choice) {
  ClpPrimalColumnPivot *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithm", 0);
  __Pyx_TraceCall("setPrimalColumnPivotAlgorithm", __pyx_f[0], 1408);

  /* "CyLP/cy/CyClpSimplex.pyx":1413
 *         This is used when setting a pivot rule in Cython
 *         '''
 *         cdef CppClpPrimalColumnPivot* c = <CppClpPrimalColumnPivot*> choice             # <<<<<<<<<<<<<<
 *         self.CppSelf.setPrimalColumnPivotAlgorithm(c)
 * 
 */
  __pyx_v_c = ((ClpPrimalColumnPivot *)__pyx_v_choice);

  /* "CyLP/cy/CyClpSimplex.pyx":1414
 *         '''
 *         cdef CppClpPrimalColumnPivot* c = <CppClpPrimalColumnPivot*> choice
 *         self.CppSelf.setPrimalColumnPivotAlgorithm(c)             # <<<<<<<<<<<<<<
 * 
 *     cdef setDualRowPivotAlgorithm(self, void* choice):
 */
  __pyx_v_self->CppSelf->setPrimalColumnPivotAlgorithm(__pyx_v_c);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1416
 *         self.CppSelf.setPrimalColumnPivotAlgorithm(c)
 * 
 *     cdef setDualRowPivotAlgorithm(self, void* choice):             # <<<<<<<<<<<<<<
 *         '''
 *         Set dual simplex's pivot rule to ``choice``
 */

static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setDualRowPivotAlgorithm(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, void *__pyx_v_choice) {
  ClpDualRowPivot *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setDualRowPivotAlgorithm", 0);
  __Pyx_TraceCall("setDualRowPivotAlgorithm", __pyx_f[0], 1416);

  /* "CyLP/cy/CyClpSimplex.pyx":1421
 *         This is used when setting a pivot rule in Cython
 *         '''
 *         cdef CppClpDualRowPivot* c = <CppClpDualRowPivot*> choice             # <<<<<<<<<<<<<<
 *         self.CppSelf.setDualRowPivotAlgorithm(c)
 * 
 */
  __pyx_v_c = ((ClpDualRowPivot *)__pyx_v_choice);

  /* "CyLP/cy/CyClpSimplex.pyx":1422
 *         '''
 *         cdef CppClpDualRowPivot* c = <CppClpDualRowPivot*> choice
 *         self.CppSelf.setDualRowPivotAlgorithm(c)             # <<<<<<<<<<<<<<
 * 
 *     def resize(self, newNumberRows, newNumberColumns):
 */
  __pyx_v_self->CppSelf->setDualRowPivotAlgorithm(__pyx_v_c);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_113resize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_112resize[] = "CyClpSimplex.resize(self, newNumberRows, newNumberColumns)\n\n        Resize the problem. After a call to ``resize`` the problem will have\n        ``newNumberRows`` constraints and ``newNumberColumns`` variables.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_113resize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_newNumberRows = 0;
  PyObject *__pyx_v_newNumberColumns = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__newNumberRows,&__pyx_n_s__newNumberColumns,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newNumberRows)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newNumberColumns)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("resize", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "resize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_newNumberRows = values[0];
    __pyx_v_newNumberColumns = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_112resize(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_newNumberRows, __pyx_v_newNumberColumns);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1424
 *         self.CppSelf.setDualRowPivotAlgorithm(c)
 * 
 *     def resize(self, newNumberRows, newNumberColumns):             # <<<<<<<<<<<<<<
 *         '''
 *         Resize the problem. After a call to ``resize`` the problem will have
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_112resize(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_newNumberRows, PyObject *__pyx_v_newNumberColumns) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("resize", 0);
  __Pyx_TraceCall("resize", __pyx_f[0], 1424);

  /* "CyLP/cy/CyClpSimplex.pyx":1429
 *         ``newNumberRows`` constraints and ``newNumberColumns`` variables.
 *         '''
 *         self.CppSelf.resize(newNumberRows, newNumberColumns)             # <<<<<<<<<<<<<<
 * 
 *     def getBInvACol(self, col, np.ndarray[np.double_t, ndim=1] cl):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_newNumberRows); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_newNumberColumns); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->resize(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_115getBInvACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_114getBInvACol[] = "CyClpSimplex.getBInvACol(self, col, ndarray cl)\n\n        Compute :math:`A_B^{-1}A_{col}` and store the result in ``cl``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_115getBInvACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_col = 0;
  PyArrayObject *__pyx_v_cl = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBInvACol (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__col,&__pyx_n_s__cl,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__col)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getBInvACol", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getBInvACol") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_col = values[0];
    __pyx_v_cl = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getBInvACol", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getBInvACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cl), __pyx_ptype_5numpy_ndarray, 1, "cl", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_114getBInvACol(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_col, __pyx_v_cl);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1431
 *         self.CppSelf.resize(newNumberRows, newNumberColumns)
 * 
 *     def getBInvACol(self, col, np.ndarray[np.double_t, ndim=1] cl):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute :math:`A_B^{-1}A_{col}` and store the result in ``cl``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_114getBInvACol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_col, PyArrayObject *__pyx_v_cl) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cl;
  __Pyx_Buffer __pyx_pybuffer_cl;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getBInvACol", 0);
  __Pyx_TraceCall("getBInvACol", __pyx_f[0], 1431);
  __pyx_pybuffer_cl.pybuffer.buf = NULL;
  __pyx_pybuffer_cl.refcount = 0;
  __pyx_pybuffernd_cl.data = NULL;
  __pyx_pybuffernd_cl.rcbuffer = &__pyx_pybuffer_cl;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cl.rcbuffer->pybuffer, (PyObject*)__pyx_v_cl, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_cl.diminfo[0].strides = __pyx_pybuffernd_cl.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cl.diminfo[0].shape = __pyx_pybuffernd_cl.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1435
 *         Compute :math:`A_B^{-1}A_{col}` and store the result in ``cl``.
 *         '''
 *         self.CppSelf.getBInvACol(col, <double*>cl.data)             # <<<<<<<<<<<<<<
 * 
 *     def getBInvCol(self, col, np.ndarray[np.double_t, ndim=1] cl):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_col); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->getBInvACol(__pyx_t_1, ((double *)__pyx_v_cl->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cl.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getBInvACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cl.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_117getBInvCol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_116getBInvCol[] = "CyClpSimplex.getBInvCol(self, col, ndarray cl)\n\n        Return :math:`A_B^{-1}_{col}` and store the result in ``cl``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_117getBInvCol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_col = 0;
  PyArrayObject *__pyx_v_cl = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBInvCol (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__col,&__pyx_n_s__cl,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__col)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getBInvCol", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getBInvCol") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_col = values[0];
    __pyx_v_cl = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getBInvCol", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getBInvCol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cl), __pyx_ptype_5numpy_ndarray, 1, "cl", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_116getBInvCol(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_col, __pyx_v_cl);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1437
 *         self.CppSelf.getBInvACol(col, <double*>cl.data)
 * 
 *     def getBInvCol(self, col, np.ndarray[np.double_t, ndim=1] cl):             # <<<<<<<<<<<<<<
 *         '''
 *         Return :math:`A_B^{-1}_{col}` and store the result in ``cl``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_116getBInvCol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_col, PyArrayObject *__pyx_v_cl) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cl;
  __Pyx_Buffer __pyx_pybuffer_cl;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getBInvCol", 0);
  __Pyx_TraceCall("getBInvCol", __pyx_f[0], 1437);
  __pyx_pybuffer_cl.pybuffer.buf = NULL;
  __pyx_pybuffer_cl.refcount = 0;
  __pyx_pybuffernd_cl.data = NULL;
  __pyx_pybuffernd_cl.rcbuffer = &__pyx_pybuffer_cl;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cl.rcbuffer->pybuffer, (PyObject*)__pyx_v_cl, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_cl.diminfo[0].strides = __pyx_pybuffernd_cl.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cl.diminfo[0].shape = __pyx_pybuffernd_cl.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1441
 *         Return :math:`A_B^{-1}_{col}` and store the result in ``cl``.
 *         '''
 *         self.CppSelf.getBInvCol(col, <double*>cl.data)             # <<<<<<<<<<<<<<
 * 
 *     def transposeTimes(self, scalar, CyCoinIndexedVector x,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_col); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->getBInvCol(__pyx_t_1, ((double *)__pyx_v_cl->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cl.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getBInvCol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cl.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_119transposeTimes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_118transposeTimes[] = "CyClpSimplex.transposeTimes(self, scalar, CyCoinIndexedVector x, CyCoinIndexedVector y, CyCoinIndexedVector z)\n\n        Compute :math:`x * scalar * A + y` and store the result in ``z``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_119transposeTimes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_scalar = 0;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_x = 0;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_y = 0;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_z = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transposeTimes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__scalar,&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__z,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__scalar)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimes", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimes", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimes", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transposeTimes") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_scalar = values[0];
    __pyx_v_x = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[1]);
    __pyx_v_y = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[2]);
    __pyx_v_z = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transposeTimes", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_z), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "z", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_118transposeTimes(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_scalar, __pyx_v_x, __pyx_v_y, __pyx_v_z);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1443
 *         self.CppSelf.getBInvCol(col, <double*>cl.data)
 * 
 *     def transposeTimes(self, scalar, CyCoinIndexedVector x,             # <<<<<<<<<<<<<<
 *                        CyCoinIndexedVector y, CyCoinIndexedVector z):
 *         '''
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_118transposeTimes(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_scalar, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_x, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_y, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("transposeTimes", 0);
  __Pyx_TraceCall("transposeTimes", __pyx_f[0], 1443);

  /* "CyLP/cy/CyClpSimplex.pyx":1448
 *         Compute :math:`x * scalar * A + y` and store the result in ``z``.
 *         '''
 *         self.CppSelf.transposeTimes(self.CppSelf, scalar,             # <<<<<<<<<<<<<<
 *                                     x.CppSelf, y.CppSelf, z.CppSelf)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_scalar); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1449
 *         '''
 *         self.CppSelf.transposeTimes(self.CppSelf, scalar,
 *                                     x.CppSelf, y.CppSelf, z.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def transposeTimesSubset(self, number,
 */
  __pyx_v_self->CppSelf->transposeTimes(__pyx_v_self->CppSelf, __pyx_t_1, __pyx_v_x->CppSelf, __pyx_v_y->CppSelf, __pyx_v_z->CppSelf);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_121transposeTimesSubset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_120transposeTimesSubset[] = "CyClpSimplex.transposeTimesSubset(self, number, ndarray which, ndarray pi, ndarray y)\n\n        Compute :math:`y_{which} - pi^{T}A_{which}` where ``which`` is a\n        variable index set. Store the result in ``y``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_121transposeTimesSubset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_number = 0;
  PyArrayObject *__pyx_v_which = 0;
  PyArrayObject *__pyx_v_pi = 0;
  PyArrayObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transposeTimesSubset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__number,&__pyx_n_s__which,&__pyx_n_s__pi,&__pyx_n_s__y,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__number)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__which)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transposeTimesSubset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_number = values[0];
    __pyx_v_which = ((PyArrayObject *)values[1]);
    __pyx_v_pi = ((PyArrayObject *)values[2]);
    __pyx_v_y = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_which), __pyx_ptype_5numpy_ndarray, 1, "which", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), __pyx_ptype_5numpy_ndarray, 1, "pi", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_120transposeTimesSubset(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_number, __pyx_v_which, __pyx_v_pi, __pyx_v_y);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1451
 *                                     x.CppSelf, y.CppSelf, z.CppSelf)
 * 
 *     def transposeTimesSubset(self, number,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.int64_t, ndim=1] which,
 *                              np.ndarray[np.double_t, ndim=1] pi,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_120transposeTimesSubset(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_number, PyArrayObject *__pyx_v_which, PyArrayObject *__pyx_v_pi, PyArrayObject *__pyx_v_y) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pi;
  __Pyx_Buffer __pyx_pybuffer_pi;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_which;
  __Pyx_Buffer __pyx_pybuffer_which;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("transposeTimesSubset", 0);
  __Pyx_TraceCall("transposeTimesSubset", __pyx_f[0], 1451);
  __pyx_pybuffer_which.pybuffer.buf = NULL;
  __pyx_pybuffer_which.refcount = 0;
  __pyx_pybuffernd_which.data = NULL;
  __pyx_pybuffernd_which.rcbuffer = &__pyx_pybuffer_which;
  __pyx_pybuffer_pi.pybuffer.buf = NULL;
  __pyx_pybuffer_pi.refcount = 0;
  __pyx_pybuffernd_pi.data = NULL;
  __pyx_pybuffernd_pi.rcbuffer = &__pyx_pybuffer_pi;
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_which.rcbuffer->pybuffer, (PyObject*)__pyx_v_which, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_which.diminfo[0].strides = __pyx_pybuffernd_which.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_which.diminfo[0].shape = __pyx_pybuffernd_which.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pi.rcbuffer->pybuffer, (PyObject*)__pyx_v_pi, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_pi.diminfo[0].strides = __pyx_pybuffernd_pi.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pi.diminfo[0].shape = __pyx_pybuffernd_pi.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1459
 *         variable index set. Store the result in ``y``.
 *         '''
 *         self.CppSelf.transposeTimesSubset(number, <int*>which.data,             # <<<<<<<<<<<<<<
 *                                           <double*>pi.data, <double*>y.data)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_number); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1460
 *         '''
 *         self.CppSelf.transposeTimesSubset(number, <int*>which.data,
 *                                           <double*>pi.data, <double*>y.data)             # <<<<<<<<<<<<<<
 * 
 *     def transposeTimesSubsetAll(self,
 */
  __pyx_v_self->CppSelf->transposeTimesSubset(__pyx_t_1, ((int *)__pyx_v_which->data), ((double *)__pyx_v_pi->data), ((double *)__pyx_v_y->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pi.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pi.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_123transposeTimesSubsetAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_122transposeTimesSubsetAll[] = "CyClpSimplex.transposeTimesSubsetAll(self, ndarray which, ndarray pi, ndarray y)\n\n        Same as :func:`transposeTimesSubset` but here ``which``\n        can also address slack variables.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_123transposeTimesSubsetAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_which = 0;
  PyArrayObject *__pyx_v_pi = 0;
  PyArrayObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transposeTimesSubsetAll (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__which,&__pyx_n_s__pi,&__pyx_n_s__y,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__which)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubsetAll", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubsetAll", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transposeTimesSubsetAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_which = ((PyArrayObject *)values[0]);
    __pyx_v_pi = ((PyArrayObject *)values[1]);
    __pyx_v_y = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transposeTimesSubsetAll", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubsetAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_which), __pyx_ptype_5numpy_ndarray, 1, "which", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), __pyx_ptype_5numpy_ndarray, 1, "pi", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_122transposeTimesSubsetAll(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_which, __pyx_v_pi, __pyx_v_y);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1462
 *                                           <double*>pi.data, <double*>y.data)
 * 
 *     def transposeTimesSubsetAll(self,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.int64_t, ndim=1] which,
 *                              np.ndarray[np.double_t, ndim=1] pi,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_122transposeTimesSubsetAll(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_which, PyArrayObject *__pyx_v_pi, PyArrayObject *__pyx_v_y) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pi;
  __Pyx_Buffer __pyx_pybuffer_pi;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_which;
  __Pyx_Buffer __pyx_pybuffer_which;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("transposeTimesSubsetAll", 0);
  __Pyx_TraceCall("transposeTimesSubsetAll", __pyx_f[0], 1462);
  __pyx_pybuffer_which.pybuffer.buf = NULL;
  __pyx_pybuffer_which.refcount = 0;
  __pyx_pybuffernd_which.data = NULL;
  __pyx_pybuffernd_which.rcbuffer = &__pyx_pybuffer_which;
  __pyx_pybuffer_pi.pybuffer.buf = NULL;
  __pyx_pybuffer_pi.refcount = 0;
  __pyx_pybuffernd_pi.data = NULL;
  __pyx_pybuffernd_pi.rcbuffer = &__pyx_pybuffer_pi;
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_which.rcbuffer->pybuffer, (PyObject*)__pyx_v_which, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_which.diminfo[0].strides = __pyx_pybuffernd_which.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_which.diminfo[0].shape = __pyx_pybuffernd_which.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pi.rcbuffer->pybuffer, (PyObject*)__pyx_v_pi, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_pi.diminfo[0].strides = __pyx_pybuffernd_pi.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pi.diminfo[0].shape = __pyx_pybuffernd_pi.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1470
 *         can also address slack variables.
 *         '''
 *         self.CppSelf.transposeTimesSubsetAll(len(which),             # <<<<<<<<<<<<<<
 *                                             <long long int*>which.data,
 *                                             <double*>pi.data,
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_which)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1473
 *                                             <long long int*>which.data,
 *                                             <double*>pi.data,
 *                                             <double*>y.data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->CppSelf->transposeTimesSubsetAll(__pyx_t_1, ((PY_LONG_LONG *)__pyx_v_which->data), ((double *)__pyx_v_pi->data), ((double *)__pyx_v_y->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pi.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubsetAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pi.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_which.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_125setInteger(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_124setInteger[] = "CyClpSimplex.setInteger(self, arg)\n\n        if ``arg`` is an integer: mark variable index ``arg`` as integer.\n        if ``arg`` is a :class:`CyLPVar` object: mark variable\n        ``arg`` as integer. Here is an example of the latter:\n\n        >>> import numpy as np\n        >>> from CyLP.cy import CyClpSimplex\n        >>> from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray\n        >>> model = CyLPModel()\n        >>>\n        >>> x = model.addVariable('x', 3)\n        >>> y = model.addVariable('y', 2)\n        >>>\n        >>> A = np.matrix([[1., 2., 0],[1., 0, 1.]])\n        >>> B = np.matrix([[1., 0, 0], [0, 0, 1.]])\n        >>> D = np.matrix([[1., 2.],[0, 1]])\n        >>> a = CyLPArray([5, 2.5])\n        >>> b = CyLPArray([4.2, 3])\n        >>> x_u= CyLPArray([2., 3.5])\n        >>>\n        >>> model += A*x <= a\n        >>> model += 2 <= B * x + D * y <= b\n        >>> model += y >= 0\n        >>> model += 1.1 <= x[1:3] <= x_u\n        >>>\n        >>> c = CyLPArray([1., -2., 3.])\n        >>> model.objective = c * x + 2 * y.sum()\n        >>>\n        >>>\n        >>> s = CyClpSimplex(model)\n        >>> s.setInteger(x[1:3])\n        >>>\n        >>> cbcModel = s.getCbcModel()\n        >>> cbcModel.branchAndBound()\n        'solution'\n        >>>\n        >>> sol_x = cbcModel.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.5, 2, 2]) ) <= 10**-6).all()\n        True\n        >>> sol_y = cbcModel.primalVariableSolution['y']\n        >>> (abs(sol_y -\n        ...     np.array([0, 0.75]) ) <= 10**-6).all()\n        True\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_125setInteger(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setInteger (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_124setInteger(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_arg));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1476
 * 
 * 
 *     def setInteger(self, arg):             # <<<<<<<<<<<<<<
 *         '''
 *         if ``arg`` is an integer: mark variable index ``arg`` as integer.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_124setInteger(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_varName = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setInteger", 0);
  __Pyx_TraceCall("setInteger", __pyx_f[0], 1476);

  /* "CyLP/cy/CyClpSimplex.pyx":1524
 *         '''
 * 
 *         if isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *             self.CppSelf.setInteger(arg)
 *         elif True:  # isinstance(arg, CyLPVar):
 */
  __Pyx_INCREF(__pyx_v_arg);
  __pyx_t_1 = __pyx_v_arg;
  __pyx_t_2 = PyInt_Check(__pyx_t_1); 
  if (!__pyx_t_2) {
    __pyx_t_3 = PyLong_Check(__pyx_t_1); 
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "CyLP/cy/CyClpSimplex.pyx":1525
 * 
 *         if isinstance(arg, (int, long)):
 *             self.CppSelf.setInteger(arg)             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_arg); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->CppSelf->setInteger(__pyx_t_5);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1527
 *             self.CppSelf.setInteger(arg)
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of setInteger can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->cyLPModel, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":1528
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_42), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "CyLP/cy/CyClpSimplex.pyx":1531
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             var = arg             # <<<<<<<<<<<<<<
 *             model = self.cyLPModel
 *             inds = model.inds
 */
    __Pyx_INCREF(__pyx_v_arg);
    __pyx_v_var = __pyx_v_arg;

    /* "CyLP/cy/CyClpSimplex.pyx":1532
 *                                 'using a CyLPModel.')
 *             var = arg
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             varName = var.name
 */
    __pyx_t_1 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_model = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1533
 *             var = arg
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             varName = var.name
 *             if not inds.hasVar(varName):
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_inds = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1534
 *             model = self.cyLPModel
 *             inds = model.inds
 *             varName = var.name             # <<<<<<<<<<<<<<
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_varName = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1535
 *             inds = model.inds
 *             varName = var.name
 *             if not inds.hasVar(varName):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_varName);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_varName);
    __Pyx_GIVEREF(__pyx_v_varName);
    __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1536
 *             varName = var.name
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)             # <<<<<<<<<<<<<<
 *             x = inds.varIndex[varName]
 *             if var.parent:
 */
      __pyx_t_7 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_16), __pyx_v_varName); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_7));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_7));
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "CyLP/cy/CyClpSimplex.pyx":1537
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]             # <<<<<<<<<<<<<<
 *             if var.parent:
 *                 for i in var.indices:
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_v_varName); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_x = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1538
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 *             if var.parent:             # <<<<<<<<<<<<<<
 *                 for i in var.indices:
 *                     self.CppSelf.setInteger(x[i])
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1539
 *             x = inds.varIndex[varName]
 *             if var.parent:
 *                 for i in var.indices:             # <<<<<<<<<<<<<<
 *                     self.CppSelf.setInteger(x[i])
 *             else:
 */
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__indices); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyList_CheckExact(__pyx_t_6) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_7 = __pyx_t_6; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (!__pyx_t_9 && PyList_CheckExact(__pyx_t_7)) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_9 && PyTuple_CheckExact(__pyx_t_7)) {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_6 = __pyx_t_9(__pyx_t_7);
          if (unlikely(!__pyx_t_6)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1540
 *             if var.parent:
 *                 for i in var.indices:
 *                     self.CppSelf.setInteger(x[i])             # <<<<<<<<<<<<<<
 *             else:
 *                 for i in xrange(var.dim):
 */
        __pyx_t_6 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_6); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_self->CppSelf->setInteger(__pyx_t_5);
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":1542
 *                     self.CppSelf.setInteger(x[i])
 *             else:
 *                 for i in xrange(var.dim):             # <<<<<<<<<<<<<<
 *                     self.CppSelf.setInteger(x[i])
 * 
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (!__pyx_t_9 && PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_9 && PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_9(__pyx_t_6);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1543
 *             else:
 *                 for i in xrange(var.dim):
 *                     self.CppSelf.setInteger(x[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_7 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_7); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_self->CppSelf->setInteger(__pyx_t_5);
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L6:;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setInteger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_varName);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_127copyInIntegerInformation(PyObject *__pyx_v_self, PyObject *__pyx_v_colType); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_126copyInIntegerInformation[] = "CyClpSimplex.copyInIntegerInformation(self, ndarray colType)\n\n        Take in a character array containing 0-1 specifying whether or not\n        a variable is integer\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_127copyInIntegerInformation(PyObject *__pyx_v_self, PyObject *__pyx_v_colType) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copyInIntegerInformation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_colType), __pyx_ptype_5numpy_ndarray, 1, "colType", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_126copyInIntegerInformation(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_colType));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1546
 * 
 * 
 *     def copyInIntegerInformation(self, np.ndarray[np.uint8_t, ndim=1] colType):             # <<<<<<<<<<<<<<
 *         '''
 *         Take in a character array containing 0-1 specifying whether or not
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_126copyInIntegerInformation(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_colType) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_colType;
  __Pyx_Buffer __pyx_pybuffer_colType;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("copyInIntegerInformation", 0);
  __Pyx_TraceCall("copyInIntegerInformation", __pyx_f[0], 1546);
  __pyx_pybuffer_colType.pybuffer.buf = NULL;
  __pyx_pybuffer_colType.refcount = 0;
  __pyx_pybuffernd_colType.data = NULL;
  __pyx_pybuffernd_colType.rcbuffer = &__pyx_pybuffer_colType;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_colType.rcbuffer->pybuffer, (PyObject*)__pyx_v_colType, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_colType.diminfo[0].strides = __pyx_pybuffernd_colType.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_colType.diminfo[0].shape = __pyx_pybuffernd_colType.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1551
 *         a variable is integer
 *         '''
 *         self.CppSelf.copyInIntegerInformation(<char*>colType.data)             # <<<<<<<<<<<<<<
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):
 */
  __pyx_v_self->CppSelf->copyInIntegerInformation(((char *)__pyx_v_colType->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_colType.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.copyInIntegerInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_colType.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_129replaceMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_128replaceMatrix[] = "CyClpSimplex.replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_129replaceMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix = 0;
  PyObject *__pyx_v_deleteCurrent = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replaceMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__matrix,&__pyx_n_s__deleteCurrent,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k_43;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__matrix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__deleteCurrent);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "replaceMatrix") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_matrix = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)values[0]);
    __pyx_v_deleteCurrent = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replaceMatrix", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.replaceMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix, 1, "matrix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_128replaceMatrix(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_matrix, __pyx_v_deleteCurrent);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1553
 *         self.CppSelf.copyInIntegerInformation(<char*>colType.data)
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):             # <<<<<<<<<<<<<<
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_128replaceMatrix(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix, PyObject *__pyx_v_deleteCurrent) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("replaceMatrix", 0);
  __Pyx_TraceCall("replaceMatrix", __pyx_f[0], 1553);

  /* "CyLP/cy/CyClpSimplex.pyx":1554
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)             # <<<<<<<<<<<<<<
 * 
 *     def loadQuadraticObjective(self, CyCoinPackedMatrix matrix):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_deleteCurrent); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->replaceMatrix(__pyx_v_matrix->CppSelf, __pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.replaceMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_131loadQuadraticObjective(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_130loadQuadraticObjective[] = "CyClpSimplex.loadQuadraticObjective(self, CyCoinPackedMatrix matrix)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_131loadQuadraticObjective(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadQuadraticObjective (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix, 1, "matrix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_130loadQuadraticObjective(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_v_matrix));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1556
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)
 * 
 *     def loadQuadraticObjective(self, CyCoinPackedMatrix matrix):             # <<<<<<<<<<<<<<
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_130loadQuadraticObjective(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadQuadraticObjective", 0);
  __Pyx_TraceCall("loadQuadraticObjective", __pyx_f[0], 1556);

  /* "CyLP/cy/CyClpSimplex.pyx":1557
 * 
 *     def loadQuadraticObjective(self, CyCoinPackedMatrix matrix):
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def preSolve(self, feasibilityTolerance=0.0,
 */
  __pyx_v_self->CppSelf->loadQuadraticObjective(__pyx_v_matrix->CppSelf);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_133preSolve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_132preSolve[] = "CyClpSimplex.preSolve(self, feasibilityTolerance=0.0, keepIntegers=0, numberPasses=5, dropNames=0, doRowObjective=0)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_133preSolve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_feasibilityTolerance = 0;
  PyObject *__pyx_v_keepIntegers = 0;
  PyObject *__pyx_v_numberPasses = 0;
  PyObject *__pyx_v_dropNames = 0;
  PyObject *__pyx_v_doRowObjective = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("preSolve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_44,&__pyx_n_s__keepIntegers,&__pyx_n_s__numberPasses,&__pyx_n_s__dropNames,&__pyx_n_s__doRowObjective,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = __pyx_k_45;
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_5);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_44);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__keepIntegers);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberPasses);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dropNames);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__doRowObjective);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "preSolve") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_feasibilityTolerance = values[0];
    __pyx_v_keepIntegers = values[1];
    __pyx_v_numberPasses = values[2];
    __pyx_v_dropNames = values[3];
    __pyx_v_doRowObjective = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("preSolve", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.preSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_132preSolve(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_feasibilityTolerance, __pyx_v_keepIntegers, __pyx_v_numberPasses, __pyx_v_dropNames, __pyx_v_doRowObjective);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1559
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)
 * 
 *     def preSolve(self, feasibilityTolerance=0.0,             # <<<<<<<<<<<<<<
 *                  keepIntegers=0, numberPasses=5,
 *                  dropNames=0, doRowObjective=0):
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_132preSolve(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_feasibilityTolerance, PyObject *__pyx_v_keepIntegers, PyObject *__pyx_v_numberPasses, PyObject *__pyx_v_dropNames, PyObject *__pyx_v_doRowObjective) {
  IClpSimplex *__pyx_v_model;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("preSolve", 0);
  __Pyx_TraceCall("preSolve", __pyx_f[0], 1559);

  /* "CyLP/cy/CyClpSimplex.pyx":1563
 *                  dropNames=0, doRowObjective=0):
 *         cdef CppIClpSimplex* model = self.CppSelf.preSolve(self.CppSelf,
 *                                 feasibilityTolerance, keepIntegers,             # <<<<<<<<<<<<<<
 *                                 numberPasses, dropNames, doRowObjective)
 *         if model == NULL:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_feasibilityTolerance); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_keepIntegers); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1564
 *         cdef CppIClpSimplex* model = self.CppSelf.preSolve(self.CppSelf,
 *                                 feasibilityTolerance, keepIntegers,
 *                                 numberPasses, dropNames, doRowObjective)             # <<<<<<<<<<<<<<
 *         if model == NULL:
 *             print "Presolve says problem infeasible."
 */
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_numberPasses); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_dropNames); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_doRowObjective); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_model = __pyx_v_self->CppSelf->preSolve(__pyx_v_self->CppSelf, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);

  /* "CyLP/cy/CyClpSimplex.pyx":1565
 *                                 feasibilityTolerance, keepIntegers,
 *                                 numberPasses, dropNames, doRowObjective)
 *         if model == NULL:             # <<<<<<<<<<<<<<
 *             print "Presolve says problem infeasible."
 *             return
 */
  __pyx_t_5 = (__pyx_v_model == NULL);
  if (__pyx_t_5) {

    /* "CyLP/cy/CyClpSimplex.pyx":1566
 *                                 numberPasses, dropNames, doRowObjective)
 *         if model == NULL:
 *             print "Presolve says problem infeasible."             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_46)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "CyLP/cy/CyClpSimplex.pyx":1567
 *         if model == NULL:
 *             print "Presolve says problem infeasible."
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.setCppSelf(model)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1569
 *             return
 * 
 *         self.setCppSelf(model)             # <<<<<<<<<<<<<<
 * 
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setCppSelf(__pyx_v_self, __pyx_v_model); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.preSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_135writeMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_134writeMps[] = "CyClpSimplex.writeMps(self, filename, formatType=0, numberAcross=2, objSense=0)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_135writeMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_formatType = 0;
  PyObject *__pyx_v_numberAcross = 0;
  PyObject *__pyx_v_objSense = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeMps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__formatType,&__pyx_n_s__numberAcross,&__pyx_n_s__objSense,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_2);
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__formatType);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberAcross);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__objSense);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeMps") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_formatType = values[1];
    __pyx_v_numberAcross = values[2];
    __pyx_v_objSense = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeMps", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.writeMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_134writeMps(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_filename, __pyx_v_formatType, __pyx_v_numberAcross, __pyx_v_objSense);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1571
 *         self.setCppSelf(model)
 * 
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):             # <<<<<<<<<<<<<<
 *         try:
 *             f = open(filename, 'w')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_134writeMps(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_formatType, PyObject *__pyx_v_numberAcross, PyObject *__pyx_v_objSense) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_varinds = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_con = NULL;
  PyObject *__pyx_v_coninds = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  char *__pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  double __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("writeMps", 0);
  __Pyx_TraceCall("writeMps", __pyx_f[0], 1571);

  /* "CyLP/cy/CyClpSimplex.pyx":1572
 * 
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):
 *         try:             # <<<<<<<<<<<<<<
 *             f = open(filename, 'w')
 *             f.close()
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":1573
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):
 *         try:
 *             f = open(filename, 'w')             # <<<<<<<<<<<<<<
 *             f.close()
 *         except:
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      __Pyx_INCREF(((PyObject *)__pyx_n_s__w));
      PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_n_s__w));
      __Pyx_GIVEREF(((PyObject *)__pyx_n_s__w));
      __pyx_t_5 = PyObject_Call(__pyx_builtin_open, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_v_f = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1574
 *         try:
 *             f = open(filename, 'w')
 *             f.close()             # <<<<<<<<<<<<<<
 *         except:
 *             raise Exception('No write access for %s or an intermediate \
 */
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_f, __pyx_n_s__close); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1575
 *             f = open(filename, 'w')
 *             f.close()
 *         except:             # <<<<<<<<<<<<<<
 *             raise Exception('No write access for %s or an intermediate \
 *                             directory does not exist.' % filename)
 */
    /*except:*/ {
      __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.writeMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1575; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "CyLP/cy/CyClpSimplex.pyx":1577
 *         except:
 *             raise Exception('No write access for %s or an intermediate \
 *                             directory does not exist.' % filename)             # <<<<<<<<<<<<<<
 * 
 *         m = self.cyLPModel
 */
      __pyx_t_7 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_47), __pyx_v_filename); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1577; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_t_7));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_7));
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1579
 *                             directory does not exist.' % filename)
 * 
 *         m = self.cyLPModel             # <<<<<<<<<<<<<<
 *         if m:
 *             inds = m.inds
 */
  __pyx_t_6 = __pyx_v_self->cyLPModel;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_v_m = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1580
 * 
 *         m = self.cyLPModel
 *         if m:             # <<<<<<<<<<<<<<
 *             inds = m.inds
 *             for var in m.variables:
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_m); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_9) {

    /* "CyLP/cy/CyClpSimplex.pyx":1581
 *         m = self.cyLPModel
 *         if m:
 *             inds = m.inds             # <<<<<<<<<<<<<<
 *             for var in m.variables:
 *                 varinds = inds.varIndex[var.name]
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_inds = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1582
 *         if m:
 *             inds = m.inds
 *             for var in m.variables:             # <<<<<<<<<<<<<<
 *                 varinds = inds.varIndex[var.name]
 *                 for i in xrange(var.dim):
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__variables); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (PyList_CheckExact(__pyx_t_6) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_5)) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_5)) {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_6 = __pyx_t_11(__pyx_t_5);
        if (unlikely(!__pyx_t_6)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF(__pyx_v_var);
      __pyx_v_var = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1583
 *             inds = m.inds
 *             for var in m.variables:
 *                 varinds = inds.varIndex[var.name]             # <<<<<<<<<<<<<<
 *                 for i in xrange(var.dim):
 *                     self.setVariableName(varinds[i], var.mpsNames[i])
 */
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_6, __pyx_t_4); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_v_varinds);
      __pyx_v_varinds = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1584
 *             for var in m.variables:
 *                 varinds = inds.varIndex[var.name]
 *                 for i in xrange(var.dim):             # <<<<<<<<<<<<<<
 *                     self.setVariableName(varinds[i], var.mpsNames[i])
 * 
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (!__pyx_t_13 && PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_13 && PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_13(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1585
 *                 varinds = inds.varIndex[var.name]
 *                 for i in xrange(var.dim):
 *                     self.setVariableName(varinds[i], var.mpsNames[i])             # <<<<<<<<<<<<<<
 * 
 *             for con in m.constraints:
 */
        __pyx_t_7 = PyObject_GetItem(__pyx_v_varinds, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__mpsNames); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyObject_GetItem(__pyx_t_6, __pyx_v_i); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setVariableName(__pyx_v_self, __pyx_t_7, __pyx_t_8, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1587
 *                     self.setVariableName(varinds[i], var.mpsNames[i])
 * 
 *             for con in m.constraints:             # <<<<<<<<<<<<<<
 *                 coninds = inds.constIndex[con.name]
 *                 for i in xrange(con.nRows):
 */
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__constraints); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_5 = __pyx_t_11(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF(__pyx_v_con);
      __pyx_v_con = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1588
 * 
 *             for con in m.constraints:
 *                 coninds = inds.constIndex[con.name]             # <<<<<<<<<<<<<<
 *                 for i in xrange(con.nRows):
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])
 */
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_con, __pyx_n_s__name); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyObject_GetItem(__pyx_t_5, __pyx_t_6); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_v_coninds);
      __pyx_v_coninds = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1589
 *             for con in m.constraints:
 *                 coninds = inds.constIndex[con.name]
 *                 for i in xrange(con.nRows):             # <<<<<<<<<<<<<<
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])
 * 
 */
      __pyx_t_8 = PyObject_GetAttr(__pyx_v_con, __pyx_n_s__nRows); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (PyList_CheckExact(__pyx_t_8) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (!__pyx_t_13 && PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_13 && PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_8 = __pyx_t_13(__pyx_t_6);
          if (unlikely(!__pyx_t_8)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_8;
        __pyx_t_8 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1590
 *                 coninds = inds.constIndex[con.name]
 *                 for i in xrange(con.nRows):
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])             # <<<<<<<<<<<<<<
 * 
 *         return self.CppSelf.writeMps(filename, formatType, numberAcross,
 */
        __pyx_t_8 = PyObject_GetItem(__pyx_v_coninds, __pyx_v_i); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = PyObject_GetAttr(__pyx_v_con, __pyx_n_s__mpsNames); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PyObject_GetItem(__pyx_t_5, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setConstraintName(__pyx_v_self, __pyx_t_8, __pyx_t_7, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L13;
  }
  __pyx_L13:;

  /* "CyLP/cy/CyClpSimplex.pyx":1592
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])
 * 
 *         return self.CppSelf.writeMps(filename, formatType, numberAcross,             # <<<<<<<<<<<<<<
 *                                      objSense)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_14 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = __Pyx_PyInt_AsInt(__pyx_v_formatType); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = __Pyx_PyInt_AsInt(__pyx_v_numberAcross); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1593
 * 
 *         return self.CppSelf.writeMps(filename, formatType, numberAcross,
 *                                      objSense)             # <<<<<<<<<<<<<<
 * 
 *     def updateColumnFT(self, CyCoinIndexedVector spare, CyCoinIndexedVector updatedColumn):
 */
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_v_objSense); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromLong(__pyx_v_self->CppSelf->writeMps(__pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.writeMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_varinds);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_con);
  __Pyx_XDECREF(__pyx_v_coninds);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_137updateColumnFT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_136updateColumnFT[] = "CyClpSimplex.updateColumnFT(self, CyCoinIndexedVector spare, CyCoinIndexedVector updatedColumn)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_137updateColumnFT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_spare = 0;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_updatedColumn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateColumnFT (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__spare,&__pyx_n_s__updatedColumn,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__spare)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__updatedColumn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateColumnFT", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "updateColumnFT") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_spare = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[0]);
    __pyx_v_updatedColumn = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateColumnFT", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.updateColumnFT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_spare), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "spare", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_updatedColumn), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "updatedColumn", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_136updateColumnFT(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_spare, __pyx_v_updatedColumn);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1595
 *                                      objSense)
 * 
 *     def updateColumnFT(self, CyCoinIndexedVector spare, CyCoinIndexedVector updatedColumn):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.updateColumnFT(spare.CppSelf, updatedColumn.CppSelf)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_136updateColumnFT(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_spare, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_updatedColumn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("updateColumnFT", 0);
  __Pyx_TraceCall("updateColumnFT", __pyx_f[0], 1595);

  /* "CyLP/cy/CyClpSimplex.pyx":1596
 * 
 *     def updateColumnFT(self, CyCoinIndexedVector spare, CyCoinIndexedVector updatedColumn):
 *         return self.CppSelf.updateColumnFT(spare.CppSelf, updatedColumn.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def updateColumnTranspose(self, CyCoinIndexedVector regionSparse1,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->updateColumnFT(__pyx_v_spare->CppSelf, __pyx_v_updatedColumn->CppSelf)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.updateColumnFT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_139updateColumnTranspose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_138updateColumnTranspose[] = "CyClpSimplex.updateColumnTranspose(self, CyCoinIndexedVector regionSparse1, CyCoinIndexedVector regionSparse2)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_139updateColumnTranspose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_regionSparse1 = 0;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_regionSparse2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateColumnTranspose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__regionSparse1,&__pyx_n_s__regionSparse2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__regionSparse1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__regionSparse2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateColumnTranspose", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "updateColumnTranspose") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_regionSparse1 = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[0]);
    __pyx_v_regionSparse2 = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateColumnTranspose", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.updateColumnTranspose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_regionSparse1), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "regionSparse1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_regionSparse2), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "regionSparse2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_138updateColumnTranspose(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_regionSparse1, __pyx_v_regionSparse2);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1598
 *         return self.CppSelf.updateColumnFT(spare.CppSelf, updatedColumn.CppSelf)
 * 
 *     def updateColumnTranspose(self, CyCoinIndexedVector regionSparse1,             # <<<<<<<<<<<<<<
 *                                     CyCoinIndexedVector regionSparse2):
 *         return self.CppSelf.updateColumnTranspose(regionSparse1.CppSelf, regionSparse2.CppSelf)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_138updateColumnTranspose(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_regionSparse1, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_regionSparse2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("updateColumnTranspose", 0);
  __Pyx_TraceCall("updateColumnTranspose", __pyx_f[0], 1598);

  /* "CyLP/cy/CyClpSimplex.pyx":1600
 *     def updateColumnTranspose(self, CyCoinIndexedVector regionSparse1,
 *                                     CyCoinIndexedVector regionSparse2):
 *         return self.CppSelf.updateColumnTranspose(regionSparse1.CppSelf, regionSparse2.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->updateColumnTranspose(__pyx_v_regionSparse1->CppSelf, __pyx_v_regionSparse2->CppSelf)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.updateColumnTranspose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_141loadFromCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_v_cyLPModel); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_140loadFromCyLPModel[] = "CyClpSimplex.loadFromCyLPModel(self, cyLPModel)\n\n        Set the coefficient matrix, constraint bounds, and variable\n        bounds based on the data in *cyLPModel* which should be and object\n        of *CyLPModel* class.\n\n        This method is usually called from CyClpSimplex's constructor.\n        But in a case that the CyClpSimplex instance is created before\n        we have the CyLPModel we use this method to load the LP,\n        for example:\n\n        >>> import numpy as np\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getModelExample\n        >>>\n        >>> s = CyClpSimplex()\n        >>> model = getModelExample()\n        >>> s.loadFromCyLPModel(model)\n        >>>\n        >>> s.primal()\n        'optimal'\n        >>> sol_x = s.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.2, 2, 1.1]) ) <= 10**-6).all()\n        True\n\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_141loadFromCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_v_cyLPModel) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadFromCyLPModel (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_140loadFromCyLPModel(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_cyLPModel));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1606
 *     #############################################
 * 
 *     def loadFromCyLPModel(self, cyLPModel):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the coefficient matrix, constraint bounds, and variable
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_140loadFromCyLPModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_cyLPModel) {
  PyObject *__pyx_v_mat = NULL;
  PyObject *__pyx_v_constraintLower = NULL;
  PyObject *__pyx_v_constraintUpper = NULL;
  PyObject *__pyx_v_variableLower = NULL;
  PyObject *__pyx_v_variableUpper = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_m = NULL;
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_coinMat = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_variables = NULL;
  PyObject *__pyx_v_curVarInd = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadFromCyLPModel", 0);
  __Pyx_TraceCall("loadFromCyLPModel", __pyx_f[0], 1606);

  /* "CyLP/cy/CyClpSimplex.pyx":1632
 * 
 *         '''
 *         self.cyLPModel = cyLPModel             # <<<<<<<<<<<<<<
 *         (mat, constraintLower, constraintUpper,
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()
 */
  __Pyx_INCREF(__pyx_v_cyLPModel);
  __Pyx_GIVEREF(__pyx_v_cyLPModel);
  __Pyx_GOTREF(__pyx_v_self->cyLPModel);
  __Pyx_DECREF(__pyx_v_self->cyLPModel);
  __pyx_v_self->cyLPModel = __pyx_v_cyLPModel;

  /* "CyLP/cy/CyClpSimplex.pyx":1634
 *         self.cyLPModel = cyLPModel
 *         (mat, constraintLower, constraintUpper,
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()             # <<<<<<<<<<<<<<
 * 
 *         n = len(variableLower)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__makeMatrices); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 5)) {
      if (size > 5) __Pyx_RaiseTooManyValuesError(5);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    Py_ssize_t i;
    PyObject** temps[5] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    for (i=0; i < 5; i++) {
      PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      *(temps[i]) = item;
    }
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  {
    Py_ssize_t index = -1;
    PyObject** temps[5] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 5; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1633
 *         '''
 *         self.cyLPModel = cyLPModel
 *         (mat, constraintLower, constraintUpper,             # <<<<<<<<<<<<<<
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()
 * 
 */
  __pyx_v_mat = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_constraintLower = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_constraintUpper = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_variableLower = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_variableUpper = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1636
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()
 * 
 *         n = len(variableLower)             # <<<<<<<<<<<<<<
 *         m = len(constraintLower)
 *         if n == 0:# or m == 0:
 */
  __pyx_t_9 = PyObject_Length(__pyx_v_variableLower); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_n = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1637
 * 
 *         n = len(variableLower)
 *         m = len(constraintLower)             # <<<<<<<<<<<<<<
 *         if n == 0:# or m == 0:
 *             return
 */
  __pyx_t_9 = PyObject_Length(__pyx_v_constraintLower); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_m = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1638
 *         n = len(variableLower)
 *         m = len(constraintLower)
 *         if n == 0:# or m == 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_n, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "CyLP/cy/CyClpSimplex.pyx":1639
 *         m = len(constraintLower)
 *         if n == 0:# or m == 0:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.resize(m, n)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "CyLP/cy/CyClpSimplex.pyx":1641
 *             return
 * 
 *         self.resize(m, n)             # <<<<<<<<<<<<<<
 *         if mat != None:
 *             if not isinstance(mat, sparse.coo_matrix):
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__resize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_m);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_m);
  __Pyx_GIVEREF(__pyx_v_m);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1642
 * 
 *         self.resize(m, n)
 *         if mat != None:             # <<<<<<<<<<<<<<
 *             if not isinstance(mat, sparse.coo_matrix):
 *                 mat = mat.tocoo()
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_mat, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_10) {

    /* "CyLP/cy/CyClpSimplex.pyx":1643
 *         self.resize(m, n)
 *         if mat != None:
 *             if not isinstance(mat, sparse.coo_matrix):             # <<<<<<<<<<<<<<
 *                 mat = mat.tocoo()
 * 
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__coo_matrix); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = PyObject_IsInstance(__pyx_v_mat, __pyx_t_6); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = (!__pyx_t_10);
    if (__pyx_t_11) {

      /* "CyLP/cy/CyClpSimplex.pyx":1644
 *         if mat != None:
 *             if not isinstance(mat, sparse.coo_matrix):
 *                 mat = mat.tocoo()             # <<<<<<<<<<<<<<
 * 
 *             coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),
 */
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__tocoo); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_mat);
      __pyx_v_mat = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "CyLP/cy/CyClpSimplex.pyx":1646
 *                 mat = mat.tocoo()
 * 
 *             coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),             # <<<<<<<<<<<<<<
 *                                         np.array(mat.col, np.int32),
 *                                         np.array(mat.data, np.double))
 */
    __pyx_t_5 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__row); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__int32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_6 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1647
 * 
 *             coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),
 *                                         np.array(mat.col, np.int32),             # <<<<<<<<<<<<<<
 *                                         np.array(mat.data, np.double))
 *         else:
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__col); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1648
 *             coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),
 *                                         np.array(mat.col, np.int32),
 *                                         np.array(mat.data, np.double))             # <<<<<<<<<<<<<<
 *         else:
 *             coinMat = CyCoinPackedMatrix(True, np.array([], np.int32),
 */
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__data); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__double); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_v_coinMat = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_t_7);
    __pyx_t_7 = 0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1650
 *                                         np.array(mat.data, np.double))
 *         else:
 *             coinMat = CyCoinPackedMatrix(True, np.array([], np.int32),             # <<<<<<<<<<<<<<
 *                                         np.array([], np.int32),
 *                                         np.array([], np.double))
 */
    __pyx_t_7 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1651
 *         else:
 *             coinMat = CyCoinPackedMatrix(True, np.array([], np.int32),
 *                                         np.array([], np.int32),             # <<<<<<<<<<<<<<
 *                                         np.array([], np.double))
 *         self.replaceMatrix(coinMat, True)
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__int32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1652
 *             coinMat = CyCoinPackedMatrix(True, np.array([], np.int32),
 *                                         np.array([], np.int32),
 *                                         np.array([], np.double))             # <<<<<<<<<<<<<<
 *         self.replaceMatrix(coinMat, True)
 * 
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_7 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_v_coinMat = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L6:;

  /* "CyLP/cy/CyClpSimplex.pyx":1653
 *                                         np.array([], np.int32),
 *                                         np.array([], np.double))
 *         self.replaceMatrix(coinMat, True)             # <<<<<<<<<<<<<<
 * 
 *         #start adding the arrays and the matrix to the problem
 */
  __pyx_t_6 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__replaceMatrix); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_coinMat));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_coinMat));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_coinMat));
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1657
 *         #start adding the arrays and the matrix to the problem
 * 
 *         for i in xrange(n):             # <<<<<<<<<<<<<<
 *             self.setColumnLower(i, variableLower[i])
 *             self.setColumnUpper(i, variableUpper[i])
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  __pyx_t_2 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_12(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1658
 * 
 *         for i in xrange(n):
 *             self.setColumnLower(i, variableLower[i])             # <<<<<<<<<<<<<<
 *             self.setColumnUpper(i, variableUpper[i])
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setColumnLower); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_variableLower, __pyx_v_i); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1659
 *         for i in xrange(n):
 *             self.setColumnLower(i, variableLower[i])
 *             self.setColumnUpper(i, variableUpper[i])             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(m):
 */
    __pyx_t_6 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setColumnUpper); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_GetItem(__pyx_v_variableUpper, __pyx_v_i); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1661
 *             self.setColumnUpper(i, variableUpper[i])
 * 
 *         for i in xrange(m):             # <<<<<<<<<<<<<<
 *             self.setRowLower(i, constraintLower[i])
 *             self.setRowUpper(i, constraintUpper[i])
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_m);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_m);
  __Pyx_GIVEREF(__pyx_v_m);
  __pyx_t_5 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_12(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1662
 * 
 *         for i in xrange(m):
 *             self.setRowLower(i, constraintLower[i])             # <<<<<<<<<<<<<<
 *             self.setRowUpper(i, constraintUpper[i])
 * 
 */
    __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setRowLower); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_GetItem(__pyx_v_constraintLower, __pyx_v_i); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1663
 *         for i in xrange(m):
 *             self.setRowLower(i, constraintLower[i])
 *             self.setRowUpper(i, constraintUpper[i])             # <<<<<<<<<<<<<<
 * 
 *         #setting integer informations
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setRowUpper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_constraintUpper, __pyx_v_i); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1666
 * 
 *         #setting integer informations
 *         variables = cyLPModel.variables             # <<<<<<<<<<<<<<
 *         curVarInd = 0
 *         for var in variables:
 */
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__variables); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_variables = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1667
 *         #setting integer informations
 *         variables = cyLPModel.variables
 *         curVarInd = 0             # <<<<<<<<<<<<<<
 *         for var in variables:
 *             if var.isInt:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_curVarInd = __pyx_int_0;

  /* "CyLP/cy/CyClpSimplex.pyx":1668
 *         variables = cyLPModel.variables
 *         curVarInd = 0
 *         for var in variables:             # <<<<<<<<<<<<<<
 *             if var.isInt:
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 */
  if (PyList_CheckExact(__pyx_v_variables) || PyTuple_CheckExact(__pyx_v_variables)) {
    __pyx_t_3 = __pyx_v_variables; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_variables); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_6); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_6); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_6 = __pyx_t_12(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF(__pyx_v_var);
    __pyx_v_var = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1669
 *         curVarInd = 0
 *         for var in variables:
 *             if var.isInt:             # <<<<<<<<<<<<<<
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 *                     self.setInteger(i)
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__isInt); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_11) {

      /* "CyLP/cy/CyClpSimplex.pyx":1670
 *         for var in variables:
 *             if var.isInt:
 *                 for i in xrange(curVarInd, curVarInd + var.dim):             # <<<<<<<<<<<<<<
 *                     self.setInteger(i)
 *             curVarInd += var.dim
 */
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyNumber_Add(__pyx_v_curVarInd, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_curVarInd);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_curVarInd);
      __Pyx_GIVEREF(__pyx_v_curVarInd);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_14 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (!__pyx_t_14 && PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_14 && PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_5 = __pyx_t_14(__pyx_t_6);
          if (unlikely(!__pyx_t_5)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1671
 *             if var.isInt:
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 *                     self.setInteger(i)             # <<<<<<<<<<<<<<
 *             curVarInd += var.dim
 * 
 */
        __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setInteger); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L14;
    }
    __pyx_L14:;

    /* "CyLP/cy/CyClpSimplex.pyx":1672
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 *                     self.setInteger(i)
 *             curVarInd += var.dim             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_curVarInd, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_v_curVarInd);
    __pyx_v_curVarInd = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1675
 * 
 * 
 *         if cyLPModel.objective != None:             # <<<<<<<<<<<<<<
 *             self.objective = cyLPModel.objective
 * 
 */
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__objective); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_3, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_11) {

    /* "CyLP/cy/CyClpSimplex.pyx":1676
 * 
 *         if cyLPModel.objective != None:
 *             self.objective = cyLPModel.objective             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__objective); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__objective, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L17;
  }
  __pyx_L17:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadFromCyLPModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mat);
  __Pyx_XDECREF(__pyx_v_constraintLower);
  __Pyx_XDECREF(__pyx_v_constraintUpper);
  __Pyx_XDECREF(__pyx_v_variableLower);
  __Pyx_XDECREF(__pyx_v_variableUpper);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF((PyObject *)__pyx_v_coinMat);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_variables);
  __Pyx_XDECREF(__pyx_v_curVarInd);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_143getCbcModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_142getCbcModel[] = "CyClpSimplex.getCbcModel(self)\n\n        Run initialSolve, return a :class:`CyCbcModel` object that can be\n        used to add cuts, run B&B and ...\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_143getCbcModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCbcModel (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_142getCbcModel(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1683
 *     #############################################
 * 
 *     def getCbcModel(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run initialSolve, return a :class:`CyCbcModel` object that can be
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_142getCbcModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  ICbcModel *__pyx_v_model;
  struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *__pyx_v_cm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getCbcModel", 0);
  __Pyx_TraceCall("getCbcModel", __pyx_f[0], 1683);

  /* "CyLP/cy/CyClpSimplex.pyx":1688
 *         used to add cuts, run B&B and ...
 *         '''
 *         cdef CppICbcModel* model = self.CppSelf.getICbcModel()             # <<<<<<<<<<<<<<
 *         cm =  CyCbcModel()
 *         cm.setCppSelf(model)
 */
  __pyx_v_model = __pyx_v_self->CppSelf->getICbcModel();

  /* "CyLP/cy/CyClpSimplex.pyx":1689
 *         '''
 *         cdef CppICbcModel* model = self.CppSelf.getICbcModel()
 *         cm =  CyCbcModel()             # <<<<<<<<<<<<<<
 *         cm.setCppSelf(model)
 *         cm.setClpModel(self)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cm = ((struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1690
 *         cdef CppICbcModel* model = self.CppSelf.getICbcModel()
 *         cm =  CyCbcModel()
 *         cm.setCppSelf(model)             # <<<<<<<<<<<<<<
 *         cm.setClpModel(self)
 *         if self.cyLPModel:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *)__pyx_v_cm->__pyx_vtab)->setCppSelf(__pyx_v_cm, __pyx_v_model); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1691
 *         cm =  CyCbcModel()
 *         cm.setCppSelf(model)
 *         cm.setClpModel(self)             # <<<<<<<<<<<<<<
 *         if self.cyLPModel:
 *             cm.cyLPModel = self.cyLPModel
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *)__pyx_v_cm->__pyx_vtab)->setClpModel(__pyx_v_cm, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1692
 *         cm.setCppSelf(model)
 *         cm.setClpModel(self)
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             cm.cyLPModel = self.cyLPModel
 *         return cm
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1693
 *         cm.setClpModel(self)
 *         if self.cyLPModel:
 *             cm.cyLPModel = self.cyLPModel             # <<<<<<<<<<<<<<
 *         return cm
 * 
 */
    __pyx_t_1 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_cm->cyLPModel);
    __Pyx_DECREF(__pyx_v_cm->cyLPModel);
    __pyx_v_cm->cyLPModel = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1694
 *         if self.cyLPModel:
 *             cm.cyLPModel = self.cyLPModel
 *         return cm             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_cm));
  __pyx_r = ((PyObject *)__pyx_v_cm);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getCbcModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_145isPivotAcceptable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_144isPivotAcceptable[] = "CyClpSimplex.isPivotAcceptable(self)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_145isPivotAcceptable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPivotAcceptable (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_144isPivotAcceptable(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1700
 *     #############################################
 * 
 *     def isPivotAcceptable(self):             # <<<<<<<<<<<<<<
 *         return (<CyPivotPythonBase>
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_144isPivotAcceptable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("isPivotAcceptable", 0);
  __Pyx_TraceCall("isPivotAcceptable", __pyx_f[0], 1700);

  /* "CyLP/cy/CyClpSimplex.pyx":1701
 * 
 *     def isPivotAcceptable(self):
 *         return (<CyPivotPythonBase>             # <<<<<<<<<<<<<<
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "CyLP/cy/CyClpSimplex.pyx":1702
 *     def isPivotAcceptable(self):
 *         return (<CyPivotPythonBase>
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()             # <<<<<<<<<<<<<<
 * 
 *     def checkVar(self, i):
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)__pyx_v_self->cyPivot)->pivotMethodObject, __pyx_n_s__isPivotAcceptable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.isPivotAcceptable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_147checkVar(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_146checkVar[] = "CyClpSimplex.checkVar(self, i)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_147checkVar(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkVar (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_146checkVar(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_i));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1704
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()
 * 
 *     def checkVar(self, i):             # <<<<<<<<<<<<<<
 *         (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_146checkVar(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("checkVar", 0);
  __Pyx_TraceCall("checkVar", __pyx_f[0], 1704);

  /* "CyLP/cy/CyClpSimplex.pyx":1705
 * 
 *     def checkVar(self, i):
 *         (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)             # <<<<<<<<<<<<<<
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)__pyx_v_self->cyPivot)->pivotMethodObject, __pyx_n_s__checkVar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_i);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i);
  __Pyx_GIVEREF(__pyx_v_i);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1706
 *     def checkVar(self, i):
 *         (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)             # <<<<<<<<<<<<<<
 * 
 *     def setPrimalColumnPivotAlgorithmToWolfe(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)__pyx_v_self->cyPivot)->pivotMethodObject, __pyx_n_s__checkVar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_i);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i);
  __Pyx_GIVEREF(__pyx_v_i);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.checkVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_149setPrimalColumnPivotAlgorithmToWolfe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_148setPrimalColumnPivotAlgorithmToWolfe[] = "CyClpSimplex.setPrimalColumnPivotAlgorithmToWolfe(self)\n\n        Set primal simplex's pivot rule to the Cython implementation of\n        Wolfe's rule used to solve QPs.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_149setPrimalColumnPivotAlgorithmToWolfe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithmToWolfe (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_148setPrimalColumnPivotAlgorithmToWolfe(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1708
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 * 
 *     def setPrimalColumnPivotAlgorithmToWolfe(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Set primal simplex's pivot rule to the Cython implementation of
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_148setPrimalColumnPivotAlgorithmToWolfe(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot *__pyx_v_wp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithmToWolfe", 0);
  __Pyx_TraceCall("setPrimalColumnPivotAlgorithmToWolfe", __pyx_f[0], 1708);

  /* "CyLP/cy/CyClpSimplex.pyx":1713
 *         Wolfe's rule used to solve QPs.
 *         '''
 *         cdef CyWolfePivot wp = CyWolfePivot()             # <<<<<<<<<<<<<<
 *         self.setPrimalColumnPivotAlgorithm(wp.CppSelf)
 * 
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wp = ((struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1714
 *         '''
 *         cdef CyWolfePivot wp = CyWolfePivot()
 *         self.setPrimalColumnPivotAlgorithm(wp.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def setPrimalColumnPivotAlgorithmToPE(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setPrimalColumnPivotAlgorithm(__pyx_v_self, __pyx_v_wp->__pyx_base.CppSelf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPrimalColumnPivotAlgorithmToWolfe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_151setPrimalColumnPivotAlgorithmToPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_150setPrimalColumnPivotAlgorithmToPE[] = "CyClpSimplex.setPrimalColumnPivotAlgorithmToPE(self)\n\n        Set primal simplex's pivot rule to the Cython\n        implementation of *positive edge*\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_151setPrimalColumnPivotAlgorithmToPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithmToPE (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_150setPrimalColumnPivotAlgorithmToPE(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1716
 *         self.setPrimalColumnPivotAlgorithm(wp.CppSelf)
 * 
 *     def setPrimalColumnPivotAlgorithmToPE(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Set primal simplex's pivot rule to the Cython
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_150setPrimalColumnPivotAlgorithmToPE(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot *__pyx_v_pe = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithmToPE", 0);
  __Pyx_TraceCall("setPrimalColumnPivotAlgorithmToPE", __pyx_f[0], 1716);

  /* "CyLP/cy/CyClpSimplex.pyx":1721
 *         implementation of *positive edge*
 *         '''
 *         cdef CyPEPivot pe = CyPEPivot()             # <<<<<<<<<<<<<<
 *         self.setPrimalColumnPivotAlgorithm(pe.CppSelf)
 * 
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pe = ((struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1722
 *         '''
 *         cdef CyPEPivot pe = CyPEPivot()
 *         self.setPrimalColumnPivotAlgorithm(pe.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def setPivotMethod(self, pivotMethodObject):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setPrimalColumnPivotAlgorithm(__pyx_v_self, __pyx_v_pe->__pyx_base.CppSelf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPrimalColumnPivotAlgorithmToPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pe);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_153setPivotMethod(PyObject *__pyx_v_self, PyObject *__pyx_v_pivotMethodObject); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_152setPivotMethod[] = "CyClpSimplex.setPivotMethod(self, pivotMethodObject)\n\n        Takes a python object and sets it as the primal\n        simplex pivot rule. ``pivotObjectMethod`` should\n        implement :py:class:`PivotPythonBase`.\n        See :ref:`how to use custom Python pivots\n        to solve LPs <custom-pivot-usage>`.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_153setPivotMethod(PyObject *__pyx_v_self, PyObject *__pyx_v_pivotMethodObject) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPivotMethod (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_152setPivotMethod(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_pivotMethodObject));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1724
 *         self.setPrimalColumnPivotAlgorithm(pe.CppSelf)
 * 
 *     def setPivotMethod(self, pivotMethodObject):             # <<<<<<<<<<<<<<
 *         '''
 *         Takes a python object and sets it as the primal
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_152setPivotMethod(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_pivotMethodObject) {
  struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPivotMethod", 0);
  __Pyx_TraceCall("setPivotMethod", __pyx_f[0], 1724);

  /* "CyLP/cy/CyClpSimplex.pyx":1732
 *         to solve LPs <custom-pivot-usage>`.
 *         '''
 *         if not issubclass(pivotMethodObject.__class__, PivotPythonBase):             # <<<<<<<<<<<<<<
 *             raise TypeError('pivotMethodObject should be of a \
 *                             class derived from PivotPythonBase')
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_pivotMethodObject, __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PivotPythonBase); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsSubclass(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "CyLP/cy/CyClpSimplex.pyx":1733
 *         '''
 *         if not issubclass(pivotMethodObject.__class__, PivotPythonBase):
 *             raise TypeError('pivotMethodObject should be of a \             # <<<<<<<<<<<<<<
 *                             class derived from PivotPythonBase')
 * 
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__TypeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_49), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1736
 *                             class derived from PivotPythonBase')
 * 
 *         cdef CyPivotPythonBase p = CyPivotPythonBase(pivotMethodObject)             # <<<<<<<<<<<<<<
 *         self.cyPivot = p
 *         p.cyModel = self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_pivotMethodObject);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pivotMethodObject);
  __Pyx_GIVEREF(__pyx_v_pivotMethodObject);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_p = ((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1737
 * 
 *         cdef CyPivotPythonBase p = CyPivotPythonBase(pivotMethodObject)
 *         self.cyPivot = p             # <<<<<<<<<<<<<<
 *         p.cyModel = self
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_p));
  __Pyx_GOTREF(__pyx_v_self->cyPivot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->cyPivot));
  __pyx_v_self->cyPivot = ((struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *)__pyx_v_p);

  /* "CyLP/cy/CyClpSimplex.pyx":1738
 *         cdef CyPivotPythonBase p = CyPivotPythonBase(pivotMethodObject)
 *         self.cyPivot = p
 *         p.cyModel = self             # <<<<<<<<<<<<<<
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_p->__pyx_base.cyModel);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->__pyx_base.cyModel));
  __pyx_v_p->__pyx_base.cyModel = __pyx_v_self;

  /* "CyLP/cy/CyClpSimplex.pyx":1739
 *         self.cyPivot = p
 *         p.cyModel = self
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def setDualPivotMethod(self, dualPivotMethodObject):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setPrimalColumnPivotAlgorithm(__pyx_v_self, __pyx_v_p->__pyx_base.CppSelf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPivotMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_155setDualPivotMethod(PyObject *__pyx_v_self, PyObject *__pyx_v_dualPivotMethodObject); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_154setDualPivotMethod[] = "CyClpSimplex.setDualPivotMethod(self, dualPivotMethodObject)\n\n        Takes a python object and sets it as the dual\n        pivot rule. ``dualPivotObjectMethod`` should\n        implement :py:class:`DualPivotPythonBase`.\n        See :ref:`how to use custom dual Python pivots\n        to solve LPs <custom-dual-pivot-usage>`.       ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_155setDualPivotMethod(PyObject *__pyx_v_self, PyObject *__pyx_v_dualPivotMethodObject) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDualPivotMethod (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_154setDualPivotMethod(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_dualPivotMethodObject));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1741
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)
 * 
 *     def setDualPivotMethod(self, dualPivotMethodObject):             # <<<<<<<<<<<<<<
 *         '''
 *         Takes a python object and sets it as the dual
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_154setDualPivotMethod(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_dualPivotMethodObject) {
  struct __pyx_obj_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setDualPivotMethod", 0);
  __Pyx_TraceCall("setDualPivotMethod", __pyx_f[0], 1741);

  /* "CyLP/cy/CyClpSimplex.pyx":1748
 *         See :ref:`how to use custom dual Python pivots
 *         to solve LPs <custom-dual-pivot-usage>`.       '''
 *         if not issubclass(dualPivotMethodObject.__class__, DualPivotPythonBase):             # <<<<<<<<<<<<<<
 *             raise TypeError('dualPivotMethodObject should be of a \
 *                             class derived from DualPivotPythonBase')
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_dualPivotMethodObject, __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__DualPivotPythonBase); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsSubclass(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "CyLP/cy/CyClpSimplex.pyx":1749
 *         to solve LPs <custom-dual-pivot-usage>`.       '''
 *         if not issubclass(dualPivotMethodObject.__class__, DualPivotPythonBase):
 *             raise TypeError('dualPivotMethodObject should be of a \             # <<<<<<<<<<<<<<
 *                             class derived from DualPivotPythonBase')
 * 
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__TypeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_51), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1752
 *                             class derived from DualPivotPythonBase')
 * 
 *         cdef CyDualPivotPythonBase p = CyDualPivotPythonBase(dualPivotMethodObject)             # <<<<<<<<<<<<<<
 *         self.cyDualPivot = p
 *         p.cyModel = self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_dualPivotMethodObject);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_dualPivotMethodObject);
  __Pyx_GIVEREF(__pyx_v_dualPivotMethodObject);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_p = ((struct __pyx_obj_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1753
 * 
 *         cdef CyDualPivotPythonBase p = CyDualPivotPythonBase(dualPivotMethodObject)
 *         self.cyDualPivot = p             # <<<<<<<<<<<<<<
 *         p.cyModel = self
 *         self.setDualRowPivotAlgorithm(p.CppSelf)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_p));
  __Pyx_GOTREF(__pyx_v_self->cyDualPivot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->cyDualPivot));
  __pyx_v_self->cyDualPivot = ((struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *)__pyx_v_p);

  /* "CyLP/cy/CyClpSimplex.pyx":1754
 *         cdef CyDualPivotPythonBase p = CyDualPivotPythonBase(dualPivotMethodObject)
 *         self.cyDualPivot = p
 *         p.cyModel = self             # <<<<<<<<<<<<<<
 *         self.setDualRowPivotAlgorithm(p.CppSelf)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_p->__pyx_base.cyModel);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->__pyx_base.cyModel));
  __pyx_v_p->__pyx_base.cyModel = __pyx_v_self;

  /* "CyLP/cy/CyClpSimplex.pyx":1755
 *         self.cyDualPivot = p
 *         p.cyModel = self
 *         self.setDualRowPivotAlgorithm(p.CppSelf)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->setDualRowPivotAlgorithm(__pyx_v_self, __pyx_v_p->__pyx_base.CppSelf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setDualPivotMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1758
 * 
 * 
 *     cpdef filterVars(self,  inds):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)
 * 
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_157filterVars(PyObject *__pyx_v_self, PyObject *__pyx_v_inds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_filterVars(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_inds, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("filterVars", 0);
  __Pyx_TraceCall("filterVars", __pyx_f[0], 1758);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__filterVars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_157filterVars)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_inds);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_inds);
      __Pyx_GIVEREF(__pyx_v_inds);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1759
 * 
 *     cpdef filterVars(self,  inds):
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)             # <<<<<<<<<<<<<<
 * 
 *     def setObjectiveCoefficient(self, elementIndex, elementValue):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_v_self->CppSelf->filterVars(((PyObject *)__pyx_v_inds));
  __Pyx_INCREF(((PyObject *)__pyx_t_4));
  __pyx_r = ((PyObject *)__pyx_t_4);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.filterVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_157filterVars(PyObject *__pyx_v_self, PyObject *__pyx_v_inds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_156filterVars[] = "CyClpSimplex.filterVars(self, inds)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_157filterVars(PyObject *__pyx_v_self, PyObject *__pyx_v_inds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filterVars (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_156filterVars(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyObject *)__pyx_v_inds));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1758
 * 
 * 
 *     cpdef filterVars(self,  inds):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_156filterVars(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_inds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("filterVars", 0);
  __Pyx_TraceCall("filterVars", __pyx_f[0], 1758);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->filterVars(__pyx_v_self, __pyx_v_inds, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.filterVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_159setObjectiveCoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_158setObjectiveCoefficient[] = "CyClpSimplex.setObjectiveCoefficient(self, elementIndex, elementValue)\n\n        Set the objective coefficients using sparse vector elements\n        ``elementIndex`` and ``elementValue``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_159setObjectiveCoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_elementIndex = 0;
  PyObject *__pyx_v_elementValue = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setObjectiveCoefficient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__elementIndex,&__pyx_n_s__elementValue,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elementIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elementValue)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setObjectiveCoefficient", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setObjectiveCoefficient") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_elementIndex = values[0];
    __pyx_v_elementValue = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setObjectiveCoefficient", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setObjectiveCoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_158setObjectiveCoefficient(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_elementIndex, __pyx_v_elementValue);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1761
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)
 * 
 *     def setObjectiveCoefficient(self, elementIndex, elementValue):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the objective coefficients using sparse vector elements
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_158setObjectiveCoefficient(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_elementIndex, PyObject *__pyx_v_elementValue) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setObjectiveCoefficient", 0);
  __Pyx_TraceCall("setObjectiveCoefficient", __pyx_f[0], 1761);

  /* "CyLP/cy/CyClpSimplex.pyx":1766
 *         ``elementIndex`` and ``elementValue``.
 *         '''
 *         self.CppSelf.setObjectiveCoefficient(elementIndex, elementValue)             # <<<<<<<<<<<<<<
 * 
 *     def partialPricing(self, start, end,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_elementIndex); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_elementValue); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setObjectiveCoefficient(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setObjectiveCoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_161partialPricing(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_160partialPricing[] = "CyClpSimplex.partialPricing(self, start, end, ndarray numberWanted)\n\n        Perform partial pricing from variable ``start`` to variable ``end``.\n        Stop when ``numberWanted`` variables good variable checked.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_161partialPricing(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_end = 0;
  PyArrayObject *__pyx_v_numberWanted = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("partialPricing (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__start,&__pyx_n_s__end,&__pyx_n_s__numberWanted,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partialPricing", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberWanted)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partialPricing", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "partialPricing") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_start = values[0];
    __pyx_v_end = values[1];
    __pyx_v_numberWanted = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("partialPricing", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.partialPricing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_numberWanted), __pyx_ptype_5numpy_ndarray, 1, "numberWanted", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_160partialPricing(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_start, __pyx_v_end, __pyx_v_numberWanted);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1768
 *         self.CppSelf.setObjectiveCoefficient(elementIndex, elementValue)
 * 
 *     def partialPricing(self, start, end,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int32_t, ndim=1] numberWanted):
 *         '''
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_160partialPricing(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyArrayObject *__pyx_v_numberWanted) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_numberWanted;
  __Pyx_Buffer __pyx_pybuffer_numberWanted;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("partialPricing", 0);
  __Pyx_TraceCall("partialPricing", __pyx_f[0], 1768);
  __pyx_pybuffer_numberWanted.pybuffer.buf = NULL;
  __pyx_pybuffer_numberWanted.refcount = 0;
  __pyx_pybuffernd_numberWanted.data = NULL;
  __pyx_pybuffernd_numberWanted.rcbuffer = &__pyx_pybuffer_numberWanted;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_numberWanted.rcbuffer->pybuffer, (PyObject*)__pyx_v_numberWanted, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_numberWanted.diminfo[0].strides = __pyx_pybuffernd_numberWanted.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_numberWanted.diminfo[0].shape = __pyx_pybuffernd_numberWanted.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1774
 *         Stop when ``numberWanted`` variables good variable checked.
 *         '''
 *         return self.CppSelf.partialPrice(start, end, <int*>numberWanted.data)             # <<<<<<<<<<<<<<
 * 
 *     def setComplementarityList(self, np.ndarray[np.int32_t, ndim=1] cl):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_start); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_end); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(__pyx_v_self->CppSelf->partialPrice(__pyx_t_1, __pyx_t_2, ((int *)__pyx_v_numberWanted->data))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_numberWanted.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.partialPricing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_numberWanted.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_163setComplementarityList(PyObject *__pyx_v_self, PyObject *__pyx_v_cl); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_162setComplementarityList[] = "CyClpSimplex.setComplementarityList(self, ndarray cl)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_163setComplementarityList(PyObject *__pyx_v_self, PyObject *__pyx_v_cl) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setComplementarityList (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cl), __pyx_ptype_5numpy_ndarray, 1, "cl", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_162setComplementarityList(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((PyArrayObject *)__pyx_v_cl));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1776
 *         return self.CppSelf.partialPrice(start, end, <int*>numberWanted.data)
 * 
 *     def setComplementarityList(self, np.ndarray[np.int32_t, ndim=1] cl):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setComplementarityList(<int*>cl.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_162setComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_cl) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cl;
  __Pyx_Buffer __pyx_pybuffer_cl;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setComplementarityList", 0);
  __Pyx_TraceCall("setComplementarityList", __pyx_f[0], 1776);
  __pyx_pybuffer_cl.pybuffer.buf = NULL;
  __pyx_pybuffer_cl.refcount = 0;
  __pyx_pybuffernd_cl.data = NULL;
  __pyx_pybuffernd_cl.rcbuffer = &__pyx_pybuffer_cl;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cl.rcbuffer->pybuffer, (PyObject*)__pyx_v_cl, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_cl.diminfo[0].strides = __pyx_pybuffernd_cl.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cl.diminfo[0].shape = __pyx_pybuffernd_cl.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1777
 * 
 *     def setComplementarityList(self, np.ndarray[np.int32_t, ndim=1] cl):
 *         self.CppSelf.setComplementarityList(<int*>cl.data)             # <<<<<<<<<<<<<<
 * 
 *     cpdef getACol(self, int ncol, CyCoinIndexedVector colArray):
 */
  __pyx_v_self->CppSelf->setComplementarityList(((int *)__pyx_v_cl->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cl.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setComplementarityList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cl.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1779
 *         self.CppSelf.setComplementarityList(<int*>cl.data)
 * 
 *     cpdef getACol(self, int ncol, CyCoinIndexedVector colArray):             # <<<<<<<<<<<<<<
 *         '''
 *         Gets column ``ncol`` of ``A`` and store it in ``colArray``.
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_165getACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getACol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_ncol, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_colArray, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getACol", 0);
  __Pyx_TraceCall("getACol", __pyx_f[0], 1779);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getACol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_165getACol)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_ncol); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_colArray));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_colArray));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_colArray));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1783
 *         Gets column ``ncol`` of ``A`` and store it in ``colArray``.
 *         '''
 *         self.CppSelf.getACol(ncol, colArray.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     cpdef vectorTimesB_1(self, CyCoinIndexedVector vec):
 */
  __pyx_v_self->CppSelf->getACol(__pyx_v_ncol, __pyx_v_colArray->CppSelf);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_165getACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_164getACol[] = "CyClpSimplex.getACol(self, int ncol, CyCoinIndexedVector colArray)\n\n        Gets column ``ncol`` of ``A`` and store it in ``colArray``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_165getACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ncol;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_colArray = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getACol (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ncol,&__pyx_n_s__colArray,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ncol)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__colArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getACol", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getACol") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ncol = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ncol == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_colArray = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getACol", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_colArray), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "colArray", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_164getACol(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ncol, __pyx_v_colArray);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1779
 *         self.CppSelf.setComplementarityList(<int*>cl.data)
 * 
 *     cpdef getACol(self, int ncol, CyCoinIndexedVector colArray):             # <<<<<<<<<<<<<<
 *         '''
 *         Gets column ``ncol`` of ``A`` and store it in ``colArray``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_164getACol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_ncol, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_colArray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getACol", 0);
  __Pyx_TraceCall("getACol", __pyx_f[0], 1779);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->getACol(__pyx_v_self, __pyx_v_ncol, __pyx_v_colArray, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1785
 *         self.CppSelf.getACol(ncol, colArray.CppSelf)
 * 
 *     cpdef vectorTimesB_1(self, CyCoinIndexedVector vec):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute :math:`vec A_B^{-1}` and store it in ``vec``.
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_167vectorTimesB_1(PyObject *__pyx_v_self, PyObject *__pyx_v_vec); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_vectorTimesB_1(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_vec, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("vectorTimesB_1", 0);
  __Pyx_TraceCall("vectorTimesB_1", __pyx_f[0], 1785);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__vectorTimesB_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_167vectorTimesB_1)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_vec));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_vec));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_vec));
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1789
 *         Compute :math:`vec A_B^{-1}` and store it in ``vec``.
 *         '''
 *         self.CppSelf.vectorTimesB_1(vec.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     cdef primalRow(self, CppCoinIndexedVector * rowArray,
 */
  __pyx_v_self->CppSelf->vectorTimesB_1(__pyx_v_vec->CppSelf);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.vectorTimesB_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_167vectorTimesB_1(PyObject *__pyx_v_self, PyObject *__pyx_v_vec); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_166vectorTimesB_1[] = "CyClpSimplex.vectorTimesB_1(self, CyCoinIndexedVector vec)\n\n        Compute :math:`vec A_B^{-1}` and store it in ``vec``.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_167vectorTimesB_1(PyObject *__pyx_v_self, PyObject *__pyx_v_vec) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vectorTimesB_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vec), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "vec", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_166vectorTimesB_1(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)__pyx_v_vec));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1785
 *         self.CppSelf.getACol(ncol, colArray.CppSelf)
 * 
 *     cpdef vectorTimesB_1(self, CyCoinIndexedVector vec):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute :math:`vec A_B^{-1}` and store it in ``vec``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_166vectorTimesB_1(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("vectorTimesB_1", 0);
  __Pyx_TraceCall("vectorTimesB_1", __pyx_f[0], 1785);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->vectorTimesB_1(__pyx_v_self, __pyx_v_vec, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.vectorTimesB_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1791
 *         self.CppSelf.vectorTimesB_1(vec.CppSelf)
 * 
 *     cdef primalRow(self, CppCoinIndexedVector * rowArray,             # <<<<<<<<<<<<<<
 *                                        CppCoinIndexedVector * rhsArray,
 *                                        CppCoinIndexedVector * spareArray,
 */

static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRow(CYTHON_UNUSED struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, CYTHON_UNUSED ICoinIndexedVector *__pyx_v_rowArray, CYTHON_UNUSED ICoinIndexedVector *__pyx_v_rhsArray, CYTHON_UNUSED ICoinIndexedVector *__pyx_v_spareArray, CYTHON_UNUSED ICoinIndexedVector *__pyx_v_spareArray2, CYTHON_UNUSED int __pyx_v_valuesPass) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primalRow", 0);
  __Pyx_TraceCall("primalRow", __pyx_f[0], 1791);

  /* "CyLP/cy/CyClpSimplex.pyx":1796
 *                                        CppCoinIndexedVector * spareArray2,
 *                                        int valuesPass):
 *         raise Exception('CyClpPrimalColumnPivotBase.pyx: pivot column ' \             # <<<<<<<<<<<<<<
 *                         'should be implemented.')
 * 
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_53), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalRow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_169argWeightedMax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_168argWeightedMax[] = "CyClpSimplex.argWeightedMax(self, arr, arr_ind, w, w_ind)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_169argWeightedMax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_arr_ind = 0;
  PyObject *__pyx_v_w = 0;
  PyObject *__pyx_v_w_ind = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("argWeightedMax (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arr,&__pyx_n_s__arr_ind,&__pyx_n_s__w,&__pyx_n_s__w_ind,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arr_ind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w_ind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "argWeightedMax") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_arr = values[0];
    __pyx_v_arr_ind = values[1];
    __pyx_v_w = values[2];
    __pyx_v_w_ind = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.argWeightedMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_168argWeightedMax(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_arr, __pyx_v_arr_ind, __pyx_v_w, __pyx_v_w_ind);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1799
 *                         'should be implemented.')
 * 
 *     def argWeightedMax(self, arr, arr_ind, w, w_ind):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.argWeightedMax(<PyObject*>arr, <PyObject*>arr_ind,
 *                                             <PyObject*>w, <PyObject*>w_ind)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_168argWeightedMax(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_arr_ind, PyObject *__pyx_v_w, PyObject *__pyx_v_w_ind) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("argWeightedMax", 0);
  __Pyx_TraceCall("argWeightedMax", __pyx_f[0], 1799);

  /* "CyLP/cy/CyClpSimplex.pyx":1800
 * 
 *     def argWeightedMax(self, arr, arr_ind, w, w_ind):
 *         return self.CppSelf.argWeightedMax(<PyObject*>arr, <PyObject*>arr_ind,             # <<<<<<<<<<<<<<
 *                                             <PyObject*>w, <PyObject*>w_ind)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "CyLP/cy/CyClpSimplex.pyx":1801
 *     def argWeightedMax(self, arr, arr_ind, w, w_ind):
 *         return self.CppSelf.argWeightedMax(<PyObject*>arr, <PyObject*>arr_ind,
 *                                             <PyObject*>w, <PyObject*>w_ind)             # <<<<<<<<<<<<<<
 * 
 * #    def getnff(self):
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->argWeightedMax(((PyObject *)__pyx_v_arr), ((PyObject *)__pyx_v_arr_ind), ((PyObject *)__pyx_v_w), ((PyObject *)__pyx_v_w_ind))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.argWeightedMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1811
 * #        return np.where((status & 7 == 4) | (status & 7 == 0))[0]
 * 
 *     cdef int* ComplementarityList(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.ComplementarityList()
 * 
 */

static int *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_ComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("ComplementarityList", 0);
  __Pyx_TraceCall("ComplementarityList", __pyx_f[0], 1811);

  /* "CyLP/cy/CyClpSimplex.pyx":1812
 * 
 *     cdef int* ComplementarityList(self):
 *         return self.CppSelf.ComplementarityList()             # <<<<<<<<<<<<<<
 * 
 *     cpdef getComplementarityList(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->ComplementarityList();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1814
 *         return self.CppSelf.ComplementarityList()
 * 
 *     cpdef getComplementarityList(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getComplementarityList()
 * 
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_171getComplementarityList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getComplementarityList", 0);
  __Pyx_TraceCall("getComplementarityList", __pyx_f[0], 1814);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_54); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_171getComplementarityList)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1815
 * 
 *     cpdef getComplementarityList(self):
 *         return <object>self.CppSelf.getComplementarityList()             # <<<<<<<<<<<<<<
 * 
 *     def setComplement(self, var1, var2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getComplementarityList();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getComplementarityList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_171getComplementarityList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_170getComplementarityList[] = "CyClpSimplex.getComplementarityList(self)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_171getComplementarityList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getComplementarityList (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_170getComplementarityList(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1814
 *         return self.CppSelf.ComplementarityList()
 * 
 *     cpdef getComplementarityList(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getComplementarityList()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_170getComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getComplementarityList", 0);
  __Pyx_TraceCall("getComplementarityList", __pyx_f[0], 1814);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self->__pyx_vtab)->getComplementarityList(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getComplementarityList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_173setComplement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_172setComplement[] = "CyClpSimplex.setComplement(self, var1, var2)\n\n        Set ``var1`` as the complementary variable of ``var2``. These\n        arguments may be integers signifying indices, or CyLPVars.\n        ";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_173setComplement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_var1 = 0;
  PyObject *__pyx_v_var2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setComplement (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var1,&__pyx_n_s__var2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setComplement", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setComplement") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_var1 = values[0];
    __pyx_v_var2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setComplement", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setComplement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_172setComplement(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_var1, __pyx_v_var2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1817
 *         return <object>self.CppSelf.getComplementarityList()
 * 
 *     def setComplement(self, var1, var2):             # <<<<<<<<<<<<<<
 *         '''
 *         Set ``var1`` as the complementary variable of ``var2``. These
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_172setComplement(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_var1, PyObject *__pyx_v_var2) {
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_vn1 = NULL;
  PyObject *__pyx_v_vn2 = NULL;
  PyObject *__pyx_v_x1 = NULL;
  PyObject *__pyx_v_x2 = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setComplement", 0);
  __Pyx_TraceCall("setComplement", __pyx_f[0], 1817);

  /* "CyLP/cy/CyClpSimplex.pyx":1823
 *         '''
 * 
 *         if isinstance(var1, (int, long)) and isinstance(var2, (int, long)) :             # <<<<<<<<<<<<<<
 *            self.CppSelf.setComplement(var1, var2)
 *         elif True:  # isinstance(arg, CyLPVar):
 */
  __Pyx_INCREF(__pyx_v_var1);
  __pyx_t_1 = __pyx_v_var1;
  __pyx_t_2 = PyInt_Check(__pyx_t_1); 
  if (!__pyx_t_2) {
    __pyx_t_3 = PyLong_Check(__pyx_t_1); 
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {
    __Pyx_INCREF(__pyx_v_var2);
    __pyx_t_1 = __pyx_v_var2;
    __pyx_t_2 = PyInt_Check(__pyx_t_1); 
    if (!__pyx_t_2) {
      __pyx_t_3 = PyLong_Check(__pyx_t_1); 
      __pyx_t_5 = __pyx_t_3;
    } else {
      __pyx_t_5 = __pyx_t_2;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_5;
  } else {
    __pyx_t_2 = __pyx_t_4;
  }
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1824
 * 
 *         if isinstance(var1, (int, long)) and isinstance(var2, (int, long)) :
 *            self.CppSelf.setComplement(var1, var2)             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_var1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_var2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->CppSelf->setComplement(__pyx_t_6, __pyx_t_7);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1826
 *            self.CppSelf.setComplement(var1, var2)
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of setInteger can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->cyLPModel, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1827
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_55), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "CyLP/cy/CyClpSimplex.pyx":1830
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             if var1.dim != var2.dim:             # <<<<<<<<<<<<<<
 *                 raise Exception('Variables should have the same  ' \
 *                                 'dimensions to be complements.' \
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__dim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__dim); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_NE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1834
 *                                 'dimensions to be complements.' \
 *                                 ' Got %s: %g and %s: %g' %
 *                                 (var1.name, var1.dim, var2.name, var2.dim))             # <<<<<<<<<<<<<<
 * 
 *             model = self.cyLPModel
 */
      __pyx_t_9 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__dim); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__dim); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_9 = 0;
      __pyx_t_8 = 0;
      __pyx_t_1 = 0;
      __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_56), ((PyObject *)__pyx_t_11)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_10));
      __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_t_10));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_10));
      __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_11), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "CyLP/cy/CyClpSimplex.pyx":1836
 *                                 (var1.name, var1.dim, var2.name, var2.dim))
 * 
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             vn1 = var1.name
 */
    __pyx_t_10 = __pyx_v_self->cyLPModel;
    __Pyx_INCREF(__pyx_t_10);
    __pyx_v_model = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1837
 * 
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             vn1 = var1.name
 *             vn2 = var2.name
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_inds = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1838
 *             model = self.cyLPModel
 *             inds = model.inds
 *             vn1 = var1.name             # <<<<<<<<<<<<<<
 *             vn2 = var2.name
 * 
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__name); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_vn1 = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1839
 *             inds = model.inds
 *             vn1 = var1.name
 *             vn2 = var2.name             # <<<<<<<<<<<<<<
 * 
 *             if not inds.hasVar(vn1):
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__name); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_vn2 = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1841
 *             vn2 = var2.name
 * 
 *             if not inds.hasVar(vn1):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % vn1)
 *             x1 = inds.varIndex[vn1]
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_v_vn1);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_vn1);
    __Pyx_GIVEREF(__pyx_v_vn1);
    __pyx_t_1 = PyObject_Call(__pyx_t_10, ((PyObject *)__pyx_t_11), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (!__pyx_t_2);
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":1842
 * 
 *             if not inds.hasVar(vn1):
 *                 raise Exception('No such variable: %s' % vn1)             # <<<<<<<<<<<<<<
 *             x1 = inds.varIndex[vn1]
 *             if not inds.hasVar(vn2):
 */
      __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_16), __pyx_v_vn1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_11), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "CyLP/cy/CyClpSimplex.pyx":1843
 *             if not inds.hasVar(vn1):
 *                 raise Exception('No such variable: %s' % vn1)
 *             x1 = inds.varIndex[vn1]             # <<<<<<<<<<<<<<
 *             if not inds.hasVar(vn2):
 *                 raise Exception('No such variable: %s' % vn2)
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyObject_GetItem(__pyx_t_1, __pyx_v_vn1); if (!__pyx_t_11) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x1 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1844
 *                 raise Exception('No such variable: %s' % vn1)
 *             x1 = inds.varIndex[vn1]
 *             if not inds.hasVar(vn2):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % vn2)
 *             x2 = inds.varIndex[vn2]
 */
    __pyx_t_11 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_vn2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_vn2);
    __Pyx_GIVEREF(__pyx_v_vn2);
    __pyx_t_10 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1845
 *             x1 = inds.varIndex[vn1]
 *             if not inds.hasVar(vn2):
 *                 raise Exception('No such variable: %s' % vn2)             # <<<<<<<<<<<<<<
 *             x2 = inds.varIndex[vn2]
 * 
 */
      __pyx_t_10 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_16), __pyx_v_vn2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_10));
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_10));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_10));
      __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "CyLP/cy/CyClpSimplex.pyx":1846
 *             if not inds.hasVar(vn2):
 *                 raise Exception('No such variable: %s' % vn2)
 *             x2 = inds.varIndex[vn2]             # <<<<<<<<<<<<<<
 * 
 *             for i in xrange(var1.dim):
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_10, __pyx_v_vn2); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_x2 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1848
 *             x2 = inds.varIndex[vn2]
 * 
 *             for i in xrange(var1.dim):             # <<<<<<<<<<<<<<
 *                 self.CppSelf.setComplement(x1[i], x2[i])
 * 
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__dim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_10 = __pyx_t_1; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (!__pyx_t_13 && PyList_CheckExact(__pyx_t_10)) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_13 && PyTuple_CheckExact(__pyx_t_10)) {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_13(__pyx_t_10);
        if (unlikely(!__pyx_t_1)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF(__pyx_v_i);
      __pyx_v_i = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1849
 * 
 *             for i in xrange(var1.dim):
 *                 self.CppSelf.setComplement(x1[i], x2[i])             # <<<<<<<<<<<<<<
 * 
 * #    def setComplement(self, var1, var2):
 */
      __pyx_t_1 = PyObject_GetItem(__pyx_v_x1, __pyx_v_i); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_GetItem(__pyx_v_x2, __pyx_v_i); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->CppSelf->setComplement(__pyx_t_7, __pyx_t_6);
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setComplement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_vn1);
  __Pyx_XDECREF(__pyx_v_vn2);
  __Pyx_XDECREF(__pyx_v_x1);
  __Pyx_XDECREF(__pyx_v_x2);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_175loadProblemFromCyCoinModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_174loadProblemFromCyCoinModel[] = "CyClpSimplex.loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int tryPlusMinusOne=False)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_175loadProblemFromCyCoinModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_v_modelObject = 0;
  int __pyx_v_tryPlusMinusOne;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadProblemFromCyCoinModel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__modelObject,&__pyx_n_s__tryPlusMinusOne,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__modelObject)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tryPlusMinusOne);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loadProblemFromCyCoinModel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_modelObject = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)values[0]);
    if (values[1]) {
      __pyx_v_tryPlusMinusOne = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_tryPlusMinusOne == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "CyLP/cy/CyClpSimplex.pyx":1861
 * 
 *     def loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int
 *                                         tryPlusMinusOne=False):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)
 * 
 */
      __pyx_v_tryPlusMinusOne = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadProblemFromCyCoinModel", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblemFromCyCoinModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_modelObject), __pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel, 1, "modelObject", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_174loadProblemFromCyCoinModel(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_modelObject, __pyx_v_tryPlusMinusOne);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1860
 * #        self.CppSelf.setComplement(var1, var2)
 * 
 *     def loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int             # <<<<<<<<<<<<<<
 *                                         tryPlusMinusOne=False):
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_174loadProblemFromCyCoinModel(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_v_modelObject, int __pyx_v_tryPlusMinusOne) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadProblemFromCyCoinModel", 0);
  __Pyx_TraceCall("loadProblemFromCyCoinModel", __pyx_f[0], 1860);

  /* "CyLP/cy/CyClpSimplex.pyx":1862
 *     def loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int
 *                                         tryPlusMinusOne=False):
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)             # <<<<<<<<<<<<<<
 * 
 *     def loadProblem(self, CyCoinPackedMatrix matrix,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->loadProblem(__pyx_v_modelObject->CppSelf, __pyx_v_tryPlusMinusOne)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblemFromCyCoinModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_177loadProblem(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_176loadProblem[] = "CyClpSimplex.loadProblem(self, CyCoinPackedMatrix matrix, ndarray collb, ndarray colub, ndarray obj, ndarray rowlb, ndarray rowub, ndarray rowObjective=<\077\077?>)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_177loadProblem(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix = 0;
  PyArrayObject *__pyx_v_collb = 0;
  PyArrayObject *__pyx_v_colub = 0;
  PyArrayObject *__pyx_v_obj = 0;
  PyArrayObject *__pyx_v_rowlb = 0;
  PyArrayObject *__pyx_v_rowub = 0;
  PyArrayObject *__pyx_v_rowObjective = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadProblem (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__matrix,&__pyx_n_s__collb,&__pyx_n_s__colub,&__pyx_n_s__obj,&__pyx_n_s__rowlb,&__pyx_n_s__rowub,&__pyx_n_s__rowObjective,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = (PyObject *)__pyx_k_57;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__matrix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__collb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__colub)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowlb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowub)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowObjective);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loadProblem") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_matrix = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)values[0]);
    __pyx_v_collb = ((PyArrayObject *)values[1]);
    __pyx_v_colub = ((PyArrayObject *)values[2]);
    __pyx_v_obj = ((PyArrayObject *)values[3]);
    __pyx_v_rowlb = ((PyArrayObject *)values[4]);
    __pyx_v_rowub = ((PyArrayObject *)values[5]);
    __pyx_v_rowObjective = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix, 1, "matrix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_collb), __pyx_ptype_5numpy_ndarray, 1, "collb", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_colub), __pyx_ptype_5numpy_ndarray, 1, "colub", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), __pyx_ptype_5numpy_ndarray, 1, "obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowlb), __pyx_ptype_5numpy_ndarray, 1, "rowlb", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowub), __pyx_ptype_5numpy_ndarray, 1, "rowub", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowObjective), __pyx_ptype_5numpy_ndarray, 1, "rowObjective", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_176loadProblem(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_matrix, __pyx_v_collb, __pyx_v_colub, __pyx_v_obj, __pyx_v_rowlb, __pyx_v_rowub, __pyx_v_rowObjective);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1864
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)
 * 
 *     def loadProblem(self, CyCoinPackedMatrix matrix,             # <<<<<<<<<<<<<<
 *                  np.ndarray[np.double_t, ndim=1] collb,
 *                  np.ndarray[np.double_t, ndim=1] colub,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_176loadProblem(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix, PyArrayObject *__pyx_v_collb, PyArrayObject *__pyx_v_colub, PyArrayObject *__pyx_v_obj, PyArrayObject *__pyx_v_rowlb, PyArrayObject *__pyx_v_rowub, PyArrayObject *__pyx_v_rowObjective) {
  double *__pyx_v_rd;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_collb;
  __Pyx_Buffer __pyx_pybuffer_collb;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_colub;
  __Pyx_Buffer __pyx_pybuffer_colub;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_obj;
  __Pyx_Buffer __pyx_pybuffer_obj;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowObjective;
  __Pyx_Buffer __pyx_pybuffer_rowObjective;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowlb;
  __Pyx_Buffer __pyx_pybuffer_rowlb;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rowub;
  __Pyx_Buffer __pyx_pybuffer_rowub;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadProblem", 0);
  __Pyx_TraceCall("loadProblem", __pyx_f[0], 1864);
  __pyx_pybuffer_collb.pybuffer.buf = NULL;
  __pyx_pybuffer_collb.refcount = 0;
  __pyx_pybuffernd_collb.data = NULL;
  __pyx_pybuffernd_collb.rcbuffer = &__pyx_pybuffer_collb;
  __pyx_pybuffer_colub.pybuffer.buf = NULL;
  __pyx_pybuffer_colub.refcount = 0;
  __pyx_pybuffernd_colub.data = NULL;
  __pyx_pybuffernd_colub.rcbuffer = &__pyx_pybuffer_colub;
  __pyx_pybuffer_obj.pybuffer.buf = NULL;
  __pyx_pybuffer_obj.refcount = 0;
  __pyx_pybuffernd_obj.data = NULL;
  __pyx_pybuffernd_obj.rcbuffer = &__pyx_pybuffer_obj;
  __pyx_pybuffer_rowlb.pybuffer.buf = NULL;
  __pyx_pybuffer_rowlb.refcount = 0;
  __pyx_pybuffernd_rowlb.data = NULL;
  __pyx_pybuffernd_rowlb.rcbuffer = &__pyx_pybuffer_rowlb;
  __pyx_pybuffer_rowub.pybuffer.buf = NULL;
  __pyx_pybuffer_rowub.refcount = 0;
  __pyx_pybuffernd_rowub.data = NULL;
  __pyx_pybuffernd_rowub.rcbuffer = &__pyx_pybuffer_rowub;
  __pyx_pybuffer_rowObjective.pybuffer.buf = NULL;
  __pyx_pybuffer_rowObjective.refcount = 0;
  __pyx_pybuffernd_rowObjective.data = NULL;
  __pyx_pybuffernd_rowObjective.rcbuffer = &__pyx_pybuffer_rowObjective;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_collb.rcbuffer->pybuffer, (PyObject*)__pyx_v_collb, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_collb.diminfo[0].strides = __pyx_pybuffernd_collb.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_collb.diminfo[0].shape = __pyx_pybuffernd_collb.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_colub.rcbuffer->pybuffer, (PyObject*)__pyx_v_colub, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_colub.diminfo[0].strides = __pyx_pybuffernd_colub.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_colub.diminfo[0].shape = __pyx_pybuffernd_colub.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_obj.rcbuffer->pybuffer, (PyObject*)__pyx_v_obj, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_obj.diminfo[0].strides = __pyx_pybuffernd_obj.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_obj.diminfo[0].shape = __pyx_pybuffernd_obj.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowlb.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowlb, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowlb.diminfo[0].strides = __pyx_pybuffernd_rowlb.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowlb.diminfo[0].shape = __pyx_pybuffernd_rowlb.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowub.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowub, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowub.diminfo[0].strides = __pyx_pybuffernd_rowub.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowub.diminfo[0].shape = __pyx_pybuffernd_rowub.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rowObjective.rcbuffer->pybuffer, (PyObject*)__pyx_v_rowObjective, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rowObjective.diminfo[0].strides = __pyx_pybuffernd_rowObjective.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rowObjective.diminfo[0].shape = __pyx_pybuffernd_rowObjective.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1872
 *                  np.ndarray[np.double_t, ndim=1] rowObjective=np.array([])):
 *         cdef double* rd
 *         if len(rowObjective) == 0:             # <<<<<<<<<<<<<<
 *             rd = NULL
 *         else:
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_rowObjective)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1873
 *         cdef double* rd
 *         if len(rowObjective) == 0:
 *             rd = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             rd = <double*> rowObjective.data
 */
    __pyx_v_rd = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1875
 *             rd = NULL
 *         else:
 *             rd = <double*> rowObjective.data             # <<<<<<<<<<<<<<
 *         self.CppSelf.loadProblem(matrix.CppSelf, <double*> collb.data,
 *                                          <double*> colub.data,
 */
    __pyx_v_rd = ((double *)__pyx_v_rowObjective->data);
  }
  __pyx_L3:;

  /* "CyLP/cy/CyClpSimplex.pyx":1881
 *                                          <double*> rowlb.data,
 *                                          <double*> rowub.data,
 *                                          <double*> rd)             # <<<<<<<<<<<<<<
 * 
 *     def getCoinInfinity(self):
 */
  __pyx_v_self->CppSelf->loadProblem(__pyx_v_matrix->CppSelf, ((double *)__pyx_v_collb->data), ((double *)__pyx_v_colub->data), ((double *)__pyx_v_obj->data), ((double *)__pyx_v_rowlb->data), ((double *)__pyx_v_rowub->data), ((double *)__pyx_v_rd));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_collb.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_colub.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_obj.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowObjective.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowlb.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowub.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_collb.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_colub.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_obj.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowObjective.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowlb.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rowub.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_179getCoinInfinity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_178getCoinInfinity[] = "CyClpSimplex.getCoinInfinity(self)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_179getCoinInfinity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCoinInfinity (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_178getCoinInfinity(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1883
 *                                          <double*> rd)
 * 
 *     def getCoinInfinity(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.getCoinInfinity()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_178getCoinInfinity(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getCoinInfinity", 0);
  __Pyx_TraceCall("getCoinInfinity", __pyx_f[0], 1883);

  /* "CyLP/cy/CyClpSimplex.pyx":1884
 * 
 *     def getCoinInfinity(self):
 *         return self.CppSelf.getCoinInfinity()             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->CppSelf->getCoinInfinity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getCoinInfinity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_181setBasisStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_180setBasisStatus[] = "CyClpSimplex.setBasisStatus(self, ndarray cstat, ndarray rstat)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_181setBasisStatus(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cstat = 0;
  PyArrayObject *__pyx_v_rstat = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBasisStatus (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cstat,&__pyx_n_s__rstat,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cstat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rstat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setBasisStatus", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setBasisStatus") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cstat = ((PyArrayObject *)values[0]);
    __pyx_v_rstat = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setBasisStatus", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setBasisStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cstat), __pyx_ptype_5numpy_ndarray, 1, "cstat", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rstat), __pyx_ptype_5numpy_ndarray, 1, "rstat", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_180setBasisStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_cstat, __pyx_v_rstat);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1890
 *     #############################################
 * 
 *     def setBasisStatus(self, np.ndarray[np.int32_t, ndim=1] cstat,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.int32_t, ndim=1] rstat):
 *         self.CppSelf.setBasisStatus(<int*>cstat.data, <int*>rstat.data)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_180setBasisStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyArrayObject *__pyx_v_cstat, PyArrayObject *__pyx_v_rstat) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cstat;
  __Pyx_Buffer __pyx_pybuffer_cstat;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rstat;
  __Pyx_Buffer __pyx_pybuffer_rstat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setBasisStatus", 0);
  __Pyx_TraceCall("setBasisStatus", __pyx_f[0], 1890);
  __pyx_pybuffer_cstat.pybuffer.buf = NULL;
  __pyx_pybuffer_cstat.refcount = 0;
  __pyx_pybuffernd_cstat.data = NULL;
  __pyx_pybuffernd_cstat.rcbuffer = &__pyx_pybuffer_cstat;
  __pyx_pybuffer_rstat.pybuffer.buf = NULL;
  __pyx_pybuffer_rstat.refcount = 0;
  __pyx_pybuffernd_rstat.data = NULL;
  __pyx_pybuffernd_rstat.rcbuffer = &__pyx_pybuffer_rstat;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cstat.rcbuffer->pybuffer, (PyObject*)__pyx_v_cstat, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_cstat.diminfo[0].strides = __pyx_pybuffernd_cstat.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cstat.diminfo[0].shape = __pyx_pybuffernd_cstat.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rstat.rcbuffer->pybuffer, (PyObject*)__pyx_v_rstat, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_rstat.diminfo[0].strides = __pyx_pybuffernd_rstat.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rstat.diminfo[0].shape = __pyx_pybuffernd_rstat.rcbuffer->pybuffer.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1892
 *     def setBasisStatus(self, np.ndarray[np.int32_t, ndim=1] cstat,
 *                              np.ndarray[np.int32_t, ndim=1] rstat):
 *         self.CppSelf.setBasisStatus(<int*>cstat.data, <int*>rstat.data)             # <<<<<<<<<<<<<<
 * 
 *     def getBasisStatus(self):
 */
  __pyx_v_self->CppSelf->setBasisStatus(((int *)__pyx_v_cstat->data), ((int *)__pyx_v_rstat->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cstat.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rstat.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setBasisStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cstat.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rstat.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_183getBasisStatus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_182getBasisStatus[] = "CyClpSimplex.getBasisStatus(self)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_183getBasisStatus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBasisStatus (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_182getBasisStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1894
 *         self.CppSelf.setBasisStatus(<int*>cstat.data, <int*>rstat.data)
 * 
 *     def getBasisStatus(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.int32_t, ndim=1] cstat = \
 *                                 np.zeros(self.nVariables, dtype='int32')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_182getBasisStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  PyArrayObject *__pyx_v_cstat = 0;
  PyArrayObject *__pyx_v_rstat = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cstat;
  __Pyx_Buffer __pyx_pybuffer_cstat;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rstat;
  __Pyx_Buffer __pyx_pybuffer_rstat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getBasisStatus", 0);
  __Pyx_TraceCall("getBasisStatus", __pyx_f[0], 1894);
  __pyx_pybuffer_cstat.pybuffer.buf = NULL;
  __pyx_pybuffer_cstat.refcount = 0;
  __pyx_pybuffernd_cstat.data = NULL;
  __pyx_pybuffernd_cstat.rcbuffer = &__pyx_pybuffer_cstat;
  __pyx_pybuffer_rstat.pybuffer.buf = NULL;
  __pyx_pybuffer_rstat.refcount = 0;
  __pyx_pybuffernd_rstat.data = NULL;
  __pyx_pybuffernd_rstat.rcbuffer = &__pyx_pybuffer_rstat;

  /* "CyLP/cy/CyClpSimplex.pyx":1896
 *     def getBasisStatus(self):
 *         cdef np.ndarray[np.int32_t, ndim=1] cstat = \
 *                                 np.zeros(self.nVariables, dtype='int32')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.int32_t, ndim=1] rstat = \
 *                                 np.zeros(self.nConstraints, dtype='int32')
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nVariables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__int32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cstat.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_cstat = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cstat.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_cstat.diminfo[0].strides = __pyx_pybuffernd_cstat.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cstat.diminfo[0].shape = __pyx_pybuffernd_cstat.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_5 = 0;
  __pyx_v_cstat = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1898
 *                                 np.zeros(self.nVariables, dtype='int32')
 *         cdef np.ndarray[np.int32_t, ndim=1] rstat = \
 *                                 np.zeros(self.nConstraints, dtype='int32')             # <<<<<<<<<<<<<<
 *         self.CppSelf.getBasisStatus(<int*>cstat.data, <int*>rstat.data)
 *         return cstat, rstat
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__int32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rstat.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_rstat = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_rstat.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_rstat.diminfo[0].strides = __pyx_pybuffernd_rstat.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rstat.diminfo[0].shape = __pyx_pybuffernd_rstat.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_rstat = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1899
 *         cdef np.ndarray[np.int32_t, ndim=1] rstat = \
 *                                 np.zeros(self.nConstraints, dtype='int32')
 *         self.CppSelf.getBasisStatus(<int*>cstat.data, <int*>rstat.data)             # <<<<<<<<<<<<<<
 *         return cstat, rstat
 * 
 */
  __pyx_v_self->CppSelf->getBasisStatus(((int *)__pyx_v_cstat->data), ((int *)__pyx_v_rstat->data));

  /* "CyLP/cy/CyClpSimplex.pyx":1900
 *                                 np.zeros(self.nConstraints, dtype='int32')
 *         self.CppSelf.getBasisStatus(<int*>cstat.data, <int*>rstat.data)
 *         return cstat, rstat             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_cstat));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_cstat));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cstat));
  __Pyx_INCREF(((PyObject *)__pyx_v_rstat));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_rstat));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rstat));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cstat.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rstat.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getBasisStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cstat.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rstat.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cstat);
  __Pyx_XDECREF((PyObject *)__pyx_v_rstat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_1getModelExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_getModelExample[] = "getModelExample()\n\n    Return a model example to be used in doctests.\n    ";
static PyMethodDef __pyx_mdef_4CyLP_2cy_12CyClpSimplex_1getModelExample = {__Pyx_NAMESTR("getModelExample"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_1getModelExample, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_getModelExample)};
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_1getModelExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getModelExample (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_getModelExample(__pyx_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1903
 * 
 * 
 * def getModelExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return a model example to be used in doctests.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_getModelExample(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_CyLPModel = NULL;
  PyObject *__pyx_v_CyLPArray = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_CyClpSimplex = NULL;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_D = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_x_u = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getModelExample", 0);
  __Pyx_TraceCall("getModelExample", __pyx_f[0], 1903);

  /* "CyLP/cy/CyClpSimplex.pyx":1907
 *     Return a model example to be used in doctests.
 *     '''
 *     import numpy as np             # <<<<<<<<<<<<<<
 *     from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray
 *     from CyLP.cy import CyClpSimplex
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1908
 *     '''
 *     import numpy as np
 *     from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray             # <<<<<<<<<<<<<<
 *     from CyLP.cy import CyClpSimplex
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPModel));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPArray));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPArray));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_58), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CyLPModel);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__CyLPModel);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_CyLPModel = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CyLPArray);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__CyLPArray);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_CyLPArray = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1909
 *     import numpy as np
 *     from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray
 *     from CyLP.cy import CyClpSimplex             # <<<<<<<<<<<<<<
 * 
 *     model = CyLPModel()
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyClpSimplex));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__CyClpSimplex));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyClpSimplex));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s_59), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__CyClpSimplex);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__CyClpSimplex);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_CyClpSimplex = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1911
 *     from CyLP.cy import CyClpSimplex
 * 
 *     model = CyLPModel()             # <<<<<<<<<<<<<<
 *     x = model.addVariable('x', 3)
 *     y = model.addVariable('y', 2)
 */
  __pyx_t_1 = PyObject_Call(__pyx_v_CyLPModel, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_model = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1912
 * 
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)             # <<<<<<<<<<<<<<
 *     y = model.addVariable('y', 2)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_60), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1913
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)
 *     y = model.addVariable('y', 2)             # <<<<<<<<<<<<<<
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_61), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_y = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1915
 *     y = model.addVariable('y', 2)
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])             # <<<<<<<<<<<<<<
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])
 *     D = np.matrix([[1., 2.], [0, 1]])
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_np, __pyx_n_s__matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(2.); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __pyx_v_A = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1916
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])             # <<<<<<<<<<<<<<
 *     D = np.matrix([[1., 2.], [0, 1]])
 *     a = CyLPArray([5, 2.5])
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_np, __pyx_n_s__matrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_v_B = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1917
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])
 *     D = np.matrix([[1., 2.], [0, 1]])             # <<<<<<<<<<<<<<
 *     a = CyLPArray([5, 2.5])
 *     b = CyLPArray([4.2, 3])
 */
  __pyx_t_5 = PyObject_GetAttr(__pyx_v_np, __pyx_n_s__matrix); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(2.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_D = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1918
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])
 *     D = np.matrix([[1., 2.], [0, 1]])
 *     a = CyLPArray([5, 2.5])             # <<<<<<<<<<<<<<
 *     b = CyLPArray([4.2, 3])
 *     x_u= CyLPArray([2., 3.5])
 */
  __pyx_t_4 = PyFloat_FromDouble(2.5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_v_a = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1919
 *     D = np.matrix([[1., 2.], [0, 1]])
 *     a = CyLPArray([5, 2.5])
 *     b = CyLPArray([4.2, 3])             # <<<<<<<<<<<<<<
 *     x_u= CyLPArray([2., 3.5])
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(4.2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_b = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1920
 *     a = CyLPArray([5, 2.5])
 *     b = CyLPArray([4.2, 3])
 *     x_u= CyLPArray([2., 3.5])             # <<<<<<<<<<<<<<
 * 
 *     model += A * x <= a
 */
  __pyx_t_4 = PyFloat_FromDouble(2.); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(3.5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_x_u = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1922
 *     x_u= CyLPArray([2., 3.5])
 * 
 *     model += A * x <= a             # <<<<<<<<<<<<<<
 *     model += 2 <= B * x + D * y <= b
 *     model += y >= 0
 */
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_A, __pyx_v_x); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_v_a, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1923
 * 
 *     model += A * x <= a
 *     model += 2 <= B * x + D * y <= b             # <<<<<<<<<<<<<<
 *     model += y >= 0
 *     model += 1.1 <= x[1:3] <= x_u
 */
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_B, __pyx_v_x); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_D, __pyx_v_y); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_int_2, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_PyObject_IsTrue(__pyx_t_2)) {
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_v_b, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1924
 *     model += A * x <= a
 *     model += 2 <= B * x + D * y <= b
 *     model += y >= 0             # <<<<<<<<<<<<<<
 *     model += 1.1 <= x[1:3] <= x_u
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_y, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1925
 *     model += 2 <= B * x + D * y <= b
 *     model += y >= 0
 *     model += 1.1 <= x[1:3] <= x_u             # <<<<<<<<<<<<<<
 * 
 *     c = CyLPArray([1., -2., 3.])
 */
  __pyx_t_2 = PyFloat_FromDouble(1.1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PySequence_GetSlice(__pyx_v_x, 1, 3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_PyObject_IsTrue(__pyx_t_5)) {
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_v_x_u, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1927
 *     model += 1.1 <= x[1:3] <= x_u
 * 
 *     c = CyLPArray([1., -2., 3.])             # <<<<<<<<<<<<<<
 *     model.objective = c * x + 2 * y.sum()
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(-2.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyFloat_FromDouble(3.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_c = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1928
 * 
 *     c = CyLPArray([1., -2., 3.])
 *     model.objective = c * x + 2 * y.sum()             # <<<<<<<<<<<<<<
 * 
 *     return model
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_c, __pyx_v_x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_y, __pyx_n_s__sum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_model, __pyx_n_s__objective, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1930
 *     model.objective = c * x + 2 * y.sum()
 * 
 *     return model             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_model);
  __pyx_r = __pyx_v_model;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.getModelExample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_CyLPModel);
  __Pyx_XDECREF(__pyx_v_CyLPArray);
  __Pyx_XDECREF(__pyx_v_CyClpSimplex);
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_x_u);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1933
 * 
 * 
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2):             # <<<<<<<<<<<<<<
 *     return cdot(v1.CppSelf, v2.CppSelf)
 * 
 */

static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_3cydot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_cydot(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v1, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v2, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("cydot", 0);
  __Pyx_TraceCall("cydot", __pyx_f[0], 1933);

  /* "CyLP/cy/CyClpSimplex.pyx":1934
 * 
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2):
 *     return cdot(v1.CppSelf, v2.CppSelf)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(cdot(__pyx_v_v1->CppSelf, __pyx_v_v2->CppSelf)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.cydot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_3cydot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_2cydot[] = "cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2)";
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_3cydot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v1 = 0;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cydot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__v1,&__pyx_n_s__v2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__v1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__v2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cydot", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cydot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v1 = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[0]);
    __pyx_v_v2 = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cydot", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.cydot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v1), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "v1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v2), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "v2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_2cydot(__pyx_self, __pyx_v_v1, __pyx_v_v2);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1933
 * 
 * 
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2):             # <<<<<<<<<<<<<<
 *     return cdot(v1.CppSelf, v2.CppSelf)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_2cydot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v1, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("cydot", 0);
  __Pyx_TraceCall("cydot", __pyx_f[0], 1933);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4CyLP_2cy_12CyClpSimplex_cydot(__pyx_v_v1, __pyx_v_v2, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.cydot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_5getMpsExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_4getMpsExample[] = "getMpsExample()\n\n    Return full path to an MPS example file for doctests\n    ";
static PyMethodDef __pyx_mdef_4CyLP_2cy_12CyClpSimplex_5getMpsExample = {__Pyx_NAMESTR("getMpsExample"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_5getMpsExample, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_4getMpsExample)};
static PyObject *__pyx_pw_4CyLP_2cy_12CyClpSimplex_5getMpsExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMpsExample (wrapper)", 0);
  __pyx_r = __pyx_pf_4CyLP_2cy_12CyClpSimplex_4getMpsExample(__pyx_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1937
 * 
 * 
 * def getMpsExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return full path to an MPS example file for doctests
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_4getMpsExample(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_os = NULL;
  PyObject *__pyx_v_inspect = NULL;
  PyObject *__pyx_v_curpath = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getMpsExample", 0);
  __Pyx_TraceCall("getMpsExample", __pyx_f[0], 1937);

  /* "CyLP/cy/CyClpSimplex.pyx":1941
 *     Return full path to an MPS example file for doctests
 *     '''
 *     import os             # <<<<<<<<<<<<<<
 *     import inspect
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_os = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1942
 *     '''
 *     import os
 *     import inspect             # <<<<<<<<<<<<<<
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))
 *     return os.path.join(curpath, '../input/p0033.mps')
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__inspect), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_inspect = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1943
 *     import os
 *     import inspect
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))             # <<<<<<<<<<<<<<
 *     return os.path.join(curpath, '../input/p0033.mps')
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_os, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__dirname); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_inspect, __pyx_n_s__getfile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_inspect, __pyx_n_s__currentframe); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_curpath = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1944
 *     import inspect
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))
 *     return os.path.join(curpath, '../input/p0033.mps')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_os, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_curpath);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_curpath);
  __Pyx_GIVEREF(__pyx_v_curpath);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_62));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_kp_s_62));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_62));
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.getMpsExample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_os);
  __Pyx_XDECREF(__pyx_v_inspect);
  __Pyx_XDECREF(__pyx_v_curpath);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1947
 * 
 * 
 * cdef int RunIsPivotAcceptable(void * ptr):             # <<<<<<<<<<<<<<
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.isPivotAcceptable()
 */

static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunIsPivotAcceptable(void *__pyx_v_ptr) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_CyWrapper = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("RunIsPivotAcceptable", 0);
  __Pyx_TraceCall("RunIsPivotAcceptable", __pyx_f[0], 1947);

  /* "CyLP/cy/CyClpSimplex.pyx":1948
 * 
 * cdef int RunIsPivotAcceptable(void * ptr):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)             # <<<<<<<<<<<<<<
 *     return CyWrapper.isPivotAcceptable()
 * 
 */
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr)));
  __pyx_v_CyWrapper = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr);

  /* "CyLP/cy/CyClpSimplex.pyx":1949
 * cdef int RunIsPivotAcceptable(void * ptr):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.isPivotAcceptable()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_CyWrapper), __pyx_n_s__isPivotAcceptable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("CyLP.cy.CyClpSimplex.RunIsPivotAcceptable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CyWrapper);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1952
 * 
 * 
 * cdef int RunVarSelCriteria(void * ptr, int varInd):             # <<<<<<<<<<<<<<
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.checkVar(varInd)
 */

static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunVarSelCriteria(void *__pyx_v_ptr, int __pyx_v_varInd) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_CyWrapper = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("RunVarSelCriteria", 0);
  __Pyx_TraceCall("RunVarSelCriteria", __pyx_f[0], 1952);

  /* "CyLP/cy/CyClpSimplex.pyx":1953
 * 
 * cdef int RunVarSelCriteria(void * ptr, int varInd):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)             # <<<<<<<<<<<<<<
 *     return CyWrapper.checkVar(varInd)
 * 
 */
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr)));
  __pyx_v_CyWrapper = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr);

  /* "CyLP/cy/CyClpSimplex.pyx":1954
 * cdef int RunVarSelCriteria(void * ptr, int varInd):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.checkVar(varInd)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_CyWrapper), __pyx_n_s__checkVar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_varInd); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("CyLP.cy.CyClpSimplex.RunVarSelCriteria", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CyWrapper);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }
  __Pyx_TraceCall("__getbuffer__", __pyx_f[1], 194);

  /* "numpy.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = (__pyx_v_info == NULL);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "numpy.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "numpy.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "numpy.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "numpy.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS);
  if (__pyx_t_1) {

    /* "numpy.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = (!PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS));
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_64), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "numpy.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = ((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS);
  if (__pyx_t_3) {

    /* "numpy.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = (!PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS));
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_66), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "numpy.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "numpy.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "numpy.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  if (__pyx_v_copy_shape) {

    /* "numpy.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "numpy.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "numpy.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "numpy.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "numpy.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "numpy.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "numpy.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L7:;

  /* "numpy.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "numpy.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "numpy.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!PyArray_ISWRITEABLE(__pyx_v_self));

  /* "numpy.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "numpy.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "numpy.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "numpy.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = (!__pyx_v_hasfields);
  if (__pyx_t_2) {
    __pyx_t_3 = (!__pyx_v_copy_shape);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "numpy.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "numpy.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L10:;

  /* "numpy.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = (!__pyx_v_hasfields);
  if (__pyx_t_1) {

    /* "numpy.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_5 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_5;

    /* "numpy.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = (__pyx_v_descr->byteorder == '>');
    if (__pyx_t_1) {
      __pyx_t_2 = __pyx_v_little_endian;
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "numpy.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = (__pyx_v_descr->byteorder == '<');
      if (__pyx_t_1) {
        __pyx_t_3 = (!__pyx_v_little_endian);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_68), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "numpy.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_BYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__b;
      goto __pyx_L13;
    }

    /* "numpy.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UBYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__B;
      goto __pyx_L13;
    }

    /* "numpy.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_SHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__h;
      goto __pyx_L13;
    }

    /* "numpy.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_USHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__H;
      goto __pyx_L13;
    }

    /* "numpy.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_INT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__i;
      goto __pyx_L13;
    }

    /* "numpy.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UINT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__I;
      goto __pyx_L13;
    }

    /* "numpy.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__l;
      goto __pyx_L13;
    }

    /* "numpy.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__L;
      goto __pyx_L13;
    }

    /* "numpy.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__q;
      goto __pyx_L13;
    }

    /* "numpy.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Q;
      goto __pyx_L13;
    }

    /* "numpy.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_FLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__f;
      goto __pyx_L13;
    }

    /* "numpy.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_DOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__d;
      goto __pyx_L13;
    }

    /* "numpy.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__g;
      goto __pyx_L13;
    }

    /* "numpy.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CFLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zf;
      goto __pyx_L13;
    }

    /* "numpy.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zd;
      goto __pyx_L13;
    }

    /* "numpy.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CLONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zg;
      goto __pyx_L13;
    }

    /* "numpy.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    __pyx_t_1 = (__pyx_v_t == NPY_OBJECT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__O;
      goto __pyx_L13;
    }
    /*else*/ {

      /* "numpy.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_69), __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_8));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L13:;

    /* "numpy.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "numpy.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L11;
  }
  /*else*/ {

    /* "numpy.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "numpy.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "numpy.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "numpy.pxd":285
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = c'\0' # Terminate format string
 * 
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "numpy.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }
  __pyx_L11:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));
  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);
  __Pyx_TraceCall("__releasebuffer__", __pyx_f[1], 288);

  /* "numpy.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = PyArray_HASFIELDS(__pyx_v_self);
  if (__pyx_t_1) {

    /* "numpy.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "numpy.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[1], 768);

  /* "numpy.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[1], 771);

  /* "numpy.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[1], 774);

  /* "numpy.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[1], 777);

  /* "numpy.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[1], 780);

  /* "numpy.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);
  __Pyx_TraceCall("_util_dtypestring", __pyx_f[1], 783);

  /* "numpy.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(((PyObject *)__pyx_v_descr->names) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_descr->names); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF(__pyx_v_childname);
    __pyx_v_childname = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "numpy.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_fields));
    __pyx_v_fields = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "numpy.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */
    if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_fields)))) {
      PyObject* sequence = ((PyObject *)__pyx_v_fields);
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (1) {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(((PyObject *)__pyx_v_fields)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_child));
    __pyx_v_child = ((PyArray_Descr *)__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_v_new_offset);
    __pyx_v_new_offset = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "numpy.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_15, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_71), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "numpy.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = (__pyx_v_child->byteorder == '>');
    if (__pyx_t_7) {
      __pyx_t_8 = __pyx_v_little_endian;
    } else {
      __pyx_t_8 = __pyx_t_7;
    }
    if (!__pyx_t_8) {

      /* "numpy.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_7 = (__pyx_v_child->byteorder == '<');
      if (__pyx_t_7) {
        __pyx_t_9 = (!__pyx_v_little_endian);
        __pyx_t_10 = __pyx_t_9;
      } else {
        __pyx_t_10 = __pyx_t_7;
      }
      __pyx_t_7 = __pyx_t_10;
    } else {
      __pyx_t_7 = __pyx_t_8;
    }
    if (__pyx_t_7) {

      /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_72), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "numpy.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_7) break;

      /* "numpy.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "numpy.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "numpy.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_11 = 0;
      (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + 1);
    }

    /* "numpy.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_11 = 0;
    (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + __pyx_v_child->elsize);

    /* "numpy.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_7 = (!PyDataType_HASFIELDS(__pyx_v_child));
    if (__pyx_t_7) {

      /* "numpy.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF(__pyx_v_t);
      __pyx_v_t = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "numpy.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_7 = ((__pyx_v_end - __pyx_v_f) < 5);
      if (__pyx_t_7) {

        /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_74), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L12;
      }
      __pyx_L12:;

      /* "numpy.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L13;
      }

      /* "numpy.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L13;
      }

      /* "numpy.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L13;
      }

      /* "numpy.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L13;
      }

      /* "numpy.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L13;
      }

      /* "numpy.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L13;
      }

      /* "numpy.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L13;
      }

      /* "numpy.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L13;
      }

      /* "numpy.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L13;
      }

      /* "numpy.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L13;
      }

      /* "numpy.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L13;
      }

      /* "numpy.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_5 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L13;
      }

      /* "numpy.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L13;
      }

      /* "numpy.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L13;
      }

      /* "numpy.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L13;
      }

      /* "numpy.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L13;
      }

      /* "numpy.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_3 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L13;
      }
      /*else*/ {

        /* "numpy.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_69), __pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L13:;

      /* "numpy.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L11;
    }
    /*else*/ {

      /* "numpy.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_12 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_12;
    }
    __pyx_L11:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "numpy.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":965
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[1], 965);

  /* "numpy.pxd":967
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  if (__pyx_t_1) {

    /* "numpy.pxd":968
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":970
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "numpy.pxd":971
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "numpy.pxd":972
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "numpy.pxd":973
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[1], 975);

  /* "numpy.pxd":976
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = (__pyx_v_arr->base == NULL);
  if (__pyx_t_1) {

    /* "numpy.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":979
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;

static PyObject *__pyx_tp_new_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o);
  p->__pyx_vtab = __pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
  p->vars = Py_None; Py_INCREF(Py_None);
  p->varSelCriteria = Py_None; Py_INCREF(Py_None);
  p->coinModel = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)Py_None); Py_INCREF(Py_None);
  p->cyLPModel = Py_None; Py_INCREF(Py_None);
  p->Hessian = Py_None; Py_INCREF(Py_None);
  p->cyPivot = ((struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *)Py_None); Py_INCREF(Py_None);
  p->cyDualPivot = ((struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyObject *o) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p = (struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->vars);
  Py_CLEAR(p->varSelCriteria);
  Py_CLEAR(p->coinModel);
  Py_CLEAR(p->cyLPModel);
  Py_CLEAR(p->Hessian);
  Py_CLEAR(p->cyPivot);
  Py_CLEAR(p->cyDualPivot);
  PyObject_GC_Track(o);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p = (struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o;
  if (p->vars) {
    e = (*v)(p->vars, a); if (e) return e;
  }
  if (p->varSelCriteria) {
    e = (*v)(p->varSelCriteria, a); if (e) return e;
  }
  if (p->coinModel) {
    e = (*v)(((PyObject*)p->coinModel), a); if (e) return e;
  }
  if (p->cyLPModel) {
    e = (*v)(p->cyLPModel, a); if (e) return e;
  }
  if (p->Hessian) {
    e = (*v)(p->Hessian, a); if (e) return e;
  }
  if (p->cyPivot) {
    e = (*v)(((PyObject*)p->cyPivot), a); if (e) return e;
  }
  if (p->cyDualPivot) {
    e = (*v)(((PyObject*)p->cyDualPivot), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyObject *o) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p = (struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->vars);
  p->vars = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->varSelCriteria);
  p->varSelCriteria = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->coinModel);
  p->coinModel = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cyLPModel);
  p->cyLPModel = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Hessian);
  p->Hessian = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cyPivot);
  p->cyPivot = ((struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cyDualPivot);
  p->cyDualPivot = ((struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_basicVariables(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14basicVariables_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rhs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3rhs_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_basisInverse(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12basisInverse_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_tableau(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7tableau_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_3__get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_iteration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nRows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nConstraints(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nVariables(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nCols(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_coefMatrix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10coefMatrix_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_matrix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraints(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variableNames(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variables(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objectiveValue(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolutionAll(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_solution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_cost(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4cost_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualVariableSolution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalConstraintSolution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualConstraintSolution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_1__get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesUpper(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesLower(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsUpper(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsLower(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_lower(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5lower_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_upper(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5upper_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_status(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_freeOrSuperBasicVarInds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_notBasicOrFixedOrFlaggedVarInds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsBasic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtUpperBound(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtLowerBound(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsSuperBasic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFixed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFlagged(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotBasic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtUpperBound(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtLowerBound(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotSuperBasic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFixed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFlagged(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged_1__get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_1__get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_1__get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_1__get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_maxNumIteration(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15maxNumIteration_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_logLevel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_1__get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_logLevel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8logLevel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4CyLP_2cy_12CyClpSimplex_CyClpSimplex[] = {
  {__Pyx_NAMESTR("getReducedCosts"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getReducedCosts, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getReducedCosts)},
  {__Pyx_NAMESTR("getStatusArray"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusArray, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusArray)},
  {__Pyx_NAMESTR("getRightHandSide"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7getRightHandSide, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6getRightHandSide)},
  {__Pyx_NAMESTR("getStatusCode"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9getStatusCode, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8getStatusCode)},
  {__Pyx_NAMESTR("getStatusString"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getStatusString, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10getStatusString)},
  {__Pyx_NAMESTR("setColumnLower"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setColumnLower, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12setColumnLower)},
  {__Pyx_NAMESTR("setColumnUpper"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15setColumnUpper, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14setColumnUpper)},
  {__Pyx_NAMESTR("setRowLower"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17setRowLower, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setRowLower)},
  {__Pyx_NAMESTR("setRowUpper"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19setRowUpper, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setRowUpper)},
  {__Pyx_NAMESTR("useCustomPrimal"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21useCustomPrimal, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20useCustomPrimal)},
  {__Pyx_NAMESTR("getUseCustomPrimal"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getUseCustomPrimal, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getUseCustomPrimal)},
  {__Pyx_NAMESTR("flagged"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25flagged, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24flagged)},
  {__Pyx_NAMESTR("setFlagged"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setFlagged, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setFlagged)},
  {__Pyx_NAMESTR("largestDualError"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29largestDualError, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28largestDualError)},
  {__Pyx_NAMESTR("pivotRow"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31pivotRow, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30pivotRow)},
  {__Pyx_NAMESTR("setPivotRow"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33setPivotRow, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32setPivotRow)},
  {__Pyx_NAMESTR("sequenceIn"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35sequenceIn, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34sequenceIn)},
  {__Pyx_NAMESTR("setSequenceIn"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37setSequenceIn, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36setSequenceIn)},
  {__Pyx_NAMESTR("getVariableNames"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39getVariableNames, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVariableNames)},
  {__Pyx_NAMESTR("setVariableName"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41setVariableName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40setVariableName)},
  {__Pyx_NAMESTR("setConstraintName"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43setConstraintName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42setConstraintName)},
  {__Pyx_NAMESTR("getPivotVariable"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45getPivotVariable, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44getPivotVariable)},
  {__Pyx_NAMESTR("CLP_getVarStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47CLP_getVarStatus, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46CLP_getVarStatus)},
  {__Pyx_NAMESTR("CLP_setVarStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49CLP_setVarStatus, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48CLP_setVarStatus)},
  {__Pyx_NAMESTR("setVariableStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51setVariableStatus, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50setVariableStatus)},
  {__Pyx_NAMESTR("getVariableStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53getVariableStatus, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52getVariableStatus)},
  {__Pyx_NAMESTR("setConstraintStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55setConstraintStatus, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54setConstraintStatus)},
  {__Pyx_NAMESTR("getConstraintStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57getConstraintStatus, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56getConstraintStatus)},
  {__Pyx_NAMESTR("setColumnUpperArray"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59setColumnUpperArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58setColumnUpperArray)},
  {__Pyx_NAMESTR("setColumnLowerArray"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61setColumnLowerArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60setColumnLowerArray)},
  {__Pyx_NAMESTR("setRowUpperArray"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setRowUpperArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setRowUpperArray)},
  {__Pyx_NAMESTR("setRowLowerArray"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65setRowLowerArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setRowLowerArray)},
  {__Pyx_NAMESTR("setObjectiveArray"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67setObjectiveArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveArray)},
  {__Pyx_NAMESTR("initialSolve"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69initialSolve, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68initialSolve)},
  {__Pyx_NAMESTR("initialPrimalSolve"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71initialPrimalSolve, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70initialPrimalSolve)},
  {__Pyx_NAMESTR("initialDualSolve"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73initialDualSolve, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72initialDualSolve)},
  {__Pyx_NAMESTR("addConstraint"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_77addConstraint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76addConstraint)},
  {__Pyx_NAMESTR("removeConstraint"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_79removeConstraint, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_78removeConstraint)},
  {__Pyx_NAMESTR("addVariable"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_81addVariable, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_80addVariable)},
  {__Pyx_NAMESTR("removeVariable"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_83removeVariable, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_82removeVariable)},
  {__Pyx_NAMESTR("getVarByName"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_85getVarByName, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_84getVarByName)},
  {__Pyx_NAMESTR("getVarNameByIndex"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_87getVarNameByIndex, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_86getVarNameByIndex)},
  {__Pyx_NAMESTR("CLP_addConstraint"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_89CLP_addConstraint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_88CLP_addConstraint)},
  {__Pyx_NAMESTR("CLP_deleteConstraints"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_91CLP_deleteConstraints, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_90CLP_deleteConstraints)},
  {__Pyx_NAMESTR("CLP_deleteVariables"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_93CLP_deleteVariables, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_92CLP_deleteVariables)},
  {__Pyx_NAMESTR("CLP_addVariable"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_95CLP_addVariable, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_94CLP_addVariable)},
  {__Pyx_NAMESTR("addVariables"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_97addVariables, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_96addVariables)},
  {__Pyx_NAMESTR("addConstraints"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_99addConstraints, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_98addConstraints)},
  {__Pyx_NAMESTR("readMps"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_101readMps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_100readMps)},
  {__Pyx_NAMESTR("extractCyLPModel"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_103extractCyLPModel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_102extractCyLPModel)},
  {__Pyx_NAMESTR("_extractStartFinish"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_105_extractStartFinish, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_104_extractStartFinish)},
  {__Pyx_NAMESTR("primal"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_107primal, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_106primal)},
  {__Pyx_NAMESTR("dual"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_109dual, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_108dual)},
  {__Pyx_NAMESTR("setPerturbation"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_111setPerturbation, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_110setPerturbation)},
  {__Pyx_NAMESTR("resize"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_113resize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_112resize)},
  {__Pyx_NAMESTR("getBInvACol"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_115getBInvACol, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_114getBInvACol)},
  {__Pyx_NAMESTR("getBInvCol"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_117getBInvCol, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_116getBInvCol)},
  {__Pyx_NAMESTR("transposeTimes"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_119transposeTimes, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_118transposeTimes)},
  {__Pyx_NAMESTR("transposeTimesSubset"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_121transposeTimesSubset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_120transposeTimesSubset)},
  {__Pyx_NAMESTR("transposeTimesSubsetAll"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_123transposeTimesSubsetAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_122transposeTimesSubsetAll)},
  {__Pyx_NAMESTR("setInteger"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_125setInteger, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_124setInteger)},
  {__Pyx_NAMESTR("copyInIntegerInformation"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_127copyInIntegerInformation, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_126copyInIntegerInformation)},
  {__Pyx_NAMESTR("replaceMatrix"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_129replaceMatrix, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_128replaceMatrix)},
  {__Pyx_NAMESTR("loadQuadraticObjective"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_131loadQuadraticObjective, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_130loadQuadraticObjective)},
  {__Pyx_NAMESTR("preSolve"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_133preSolve, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_132preSolve)},
  {__Pyx_NAMESTR("writeMps"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_135writeMps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_134writeMps)},
  {__Pyx_NAMESTR("updateColumnFT"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_137updateColumnFT, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_136updateColumnFT)},
  {__Pyx_NAMESTR("updateColumnTranspose"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_139updateColumnTranspose, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_138updateColumnTranspose)},
  {__Pyx_NAMESTR("loadFromCyLPModel"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_141loadFromCyLPModel, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_140loadFromCyLPModel)},
  {__Pyx_NAMESTR("getCbcModel"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_143getCbcModel, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_142getCbcModel)},
  {__Pyx_NAMESTR("isPivotAcceptable"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_145isPivotAcceptable, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_144isPivotAcceptable)},
  {__Pyx_NAMESTR("checkVar"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_147checkVar, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_146checkVar)},
  {__Pyx_NAMESTR("setPrimalColumnPivotAlgorithmToWolfe"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_149setPrimalColumnPivotAlgorithmToWolfe, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_148setPrimalColumnPivotAlgorithmToWolfe)},
  {__Pyx_NAMESTR("setPrimalColumnPivotAlgorithmToPE"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_151setPrimalColumnPivotAlgorithmToPE, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_150setPrimalColumnPivotAlgorithmToPE)},
  {__Pyx_NAMESTR("setPivotMethod"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_153setPivotMethod, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_152setPivotMethod)},
  {__Pyx_NAMESTR("setDualPivotMethod"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_155setDualPivotMethod, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_154setDualPivotMethod)},
  {__Pyx_NAMESTR("filterVars"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_157filterVars, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_156filterVars)},
  {__Pyx_NAMESTR("setObjectiveCoefficient"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_159setObjectiveCoefficient, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_158setObjectiveCoefficient)},
  {__Pyx_NAMESTR("partialPricing"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_161partialPricing, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_160partialPricing)},
  {__Pyx_NAMESTR("setComplementarityList"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_163setComplementarityList, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_162setComplementarityList)},
  {__Pyx_NAMESTR("getACol"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_165getACol, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_164getACol)},
  {__Pyx_NAMESTR("vectorTimesB_1"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_167vectorTimesB_1, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_166vectorTimesB_1)},
  {__Pyx_NAMESTR("argWeightedMax"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_169argWeightedMax, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_168argWeightedMax)},
  {__Pyx_NAMESTR("getComplementarityList"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_171getComplementarityList, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_170getComplementarityList)},
  {__Pyx_NAMESTR("setComplement"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_173setComplement, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_172setComplement)},
  {__Pyx_NAMESTR("loadProblemFromCyCoinModel"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_175loadProblemFromCyCoinModel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_174loadProblemFromCyCoinModel)},
  {__Pyx_NAMESTR("loadProblem"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_177loadProblem, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_176loadProblem)},
  {__Pyx_NAMESTR("getCoinInfinity"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_179getCoinInfinity, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_178getCoinInfinity)},
  {__Pyx_NAMESTR("setBasisStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_181setBasisStatus, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_180setBasisStatus)},
  {__Pyx_NAMESTR("getBasisStatus"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_183getBasisStatus, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_182getBasisStatus)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4CyLP_2cy_12CyClpSimplex_CyClpSimplex[] = {
  {(char *)"basicVariables", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_basicVariables, 0, 0, 0},
  {(char *)"rhs", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rhs, 0, 0, 0},
  {(char *)"basisInverse", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_basisInverse, 0, 0, 0},
  {(char *)"tableau", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_tableau, 0, 0, 0},
  {(char *)"objective", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective, __Pyx_DOCSTR(__pyx_k_75), 0},
  {(char *)"iteration", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_iteration, 0, __Pyx_DOCSTR(__pyx_k_76), 0},
  {(char *)"nRows", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nRows, 0, __Pyx_DOCSTR(__pyx_k_77), 0},
  {(char *)"nConstraints", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nConstraints, 0, __Pyx_DOCSTR(__pyx_k_78), 0},
  {(char *)"nVariables", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nVariables, 0, __Pyx_DOCSTR(__pyx_k_79), 0},
  {(char *)"nCols", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nCols, 0, __Pyx_DOCSTR(__pyx_k_80), 0},
  {(char *)"coefMatrix", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_coefMatrix, 0, __Pyx_DOCSTR(__pyx_k_81), 0},
  {(char *)"matrix", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_matrix, 0, __Pyx_DOCSTR(__pyx_k_82), 0},
  {(char *)"constraints", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraints, 0, __Pyx_DOCSTR(__pyx_k_83), 0},
  {(char *)"variableNames", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variableNames, 0, __Pyx_DOCSTR(__pyx_k_84), 0},
  {(char *)"variables", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variables, 0, __Pyx_DOCSTR(__pyx_k_85), 0},
  {(char *)"objectiveValue", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objectiveValue, 0, __Pyx_DOCSTR(__pyx_k_86), 0},
  {(char *)"primalVariableSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolution, 0, __Pyx_DOCSTR(__pyx_k_87), 0},
  {(char *)"primalVariableSolutionAll", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolutionAll, 0, __Pyx_DOCSTR(__pyx_k_88), 0},
  {(char *)"solution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_solution, 0, __Pyx_DOCSTR(__pyx_k_89), 0},
  {(char *)"cost", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_cost, 0, __Pyx_DOCSTR(__pyx_k_89), 0},
  {(char *)"dualVariableSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualVariableSolution, 0, __Pyx_DOCSTR(__pyx_k_90), 0},
  {(char *)"primalConstraintSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalConstraintSolution, 0, __Pyx_DOCSTR(__pyx_k_91), 0},
  {(char *)"dualConstraintSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualConstraintSolution, 0, __Pyx_DOCSTR(__pyx_k_92), 0},
  {(char *)"reducedCosts", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts, __Pyx_DOCSTR(__pyx_k_93), 0},
  {(char *)"variablesUpper", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesUpper, 0, __Pyx_DOCSTR(__pyx_k_94), 0},
  {(char *)"variablesLower", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesLower, 0, __Pyx_DOCSTR(__pyx_k_95), 0},
  {(char *)"constraintsUpper", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsUpper, 0, __Pyx_DOCSTR(__pyx_k_96), 0},
  {(char *)"constraintsLower", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsLower, 0, __Pyx_DOCSTR(__pyx_k_97), 0},
  {(char *)"lower", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_lower, 0, __Pyx_DOCSTR(__pyx_k_98), 0},
  {(char *)"upper", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_upper, 0, __Pyx_DOCSTR(__pyx_k_99), 0},
  {(char *)"status", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_status, 0, __Pyx_DOCSTR(__pyx_k_100), 0},
  {(char *)"freeOrSuperBasicVarInds", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_freeOrSuperBasicVarInds, 0, __Pyx_DOCSTR(__pyx_k_101), 0},
  {(char *)"notBasicOrFixedOrFlaggedVarInds", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_notBasicOrFixedOrFlaggedVarInds, 0, __Pyx_DOCSTR(__pyx_k_102), 0},
  {(char *)"varIsFree", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFree, 0, __Pyx_DOCSTR(__pyx_k_103), 0},
  {(char *)"varIsBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsBasic, 0, __Pyx_DOCSTR(__pyx_k_104), 0},
  {(char *)"varIsAtUpperBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtUpperBound, 0, __Pyx_DOCSTR(__pyx_k_105), 0},
  {(char *)"varIsAtLowerBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtLowerBound, 0, __Pyx_DOCSTR(__pyx_k_106), 0},
  {(char *)"varIsSuperBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsSuperBasic, 0, __Pyx_DOCSTR(__pyx_k_107), 0},
  {(char *)"varIsFixed", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFixed, 0, __Pyx_DOCSTR(__pyx_k_108), 0},
  {(char *)"varIsFlagged", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFlagged, 0, __Pyx_DOCSTR(__pyx_k_109), 0},
  {(char *)"varNotFree", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFree, 0, __Pyx_DOCSTR(__pyx_k_110), 0},
  {(char *)"varNotBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotBasic, 0, __Pyx_DOCSTR(__pyx_k_111), 0},
  {(char *)"varNotAtUpperBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtUpperBound, 0, __Pyx_DOCSTR(__pyx_k_112), 0},
  {(char *)"varNotAtLowerBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtLowerBound, 0, __Pyx_DOCSTR(__pyx_k_113), 0},
  {(char *)"varNotSuperBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotSuperBasic, 0, __Pyx_DOCSTR(__pyx_k_114), 0},
  {(char *)"varNotFixed", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFixed, 0, __Pyx_DOCSTR(__pyx_k_115), 0},
  {(char *)"varNotFlagged", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFlagged, 0, __Pyx_DOCSTR(__pyx_k_116), 0},
  {(char *)"Hessian", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian, 0, 0},
  {(char *)"dualTolerance", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance, 0, 0},
  {(char *)"primalTolerance", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance, 0, 0},
  {(char *)"maxNumIteration", 0, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_maxNumIteration, 0, 0},
  {(char *)"logLevel", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_logLevel, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_logLevel, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CyClpSimplex = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  __pyx_pw_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75__iadd__, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CyClpSimplex = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CyClpSimplex = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CyClpSimplex = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CyLP.cy.CyClpSimplex.CyClpSimplex"), /*tp_name*/
  sizeof(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CyClpSimplex, /*tp_as_number*/
  &__pyx_tp_as_sequence_CyClpSimplex, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CyClpSimplex, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CyClpSimplex, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    CyClpSimplex is a Cython interface to CLP.\n    Not all methods are available but they are being added gradually.\n\n    Its constructor can create an empty object if no argument is provided.\n    However, if a :class:`CyLPModel <CyLP.py.modeling.CyLPModel>` object is\n    given then the resulting ``CyClpSimplex`` object will be build from it.\n    For an example of the latter case see\n    :mod:`CyLP's modeling tool. <CyLP.py.modeling.CyLPModel>`\n\n    .. _simple-run:\n\n    **An easy example of how to read and solve an LP**\n\n    >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n    >>> s = CyClpSimplex()\n    >>> f = getMpsExample()\n    >>> s.readMps(f)\n    0\n    >>> s.initialSolve()\n    'optimal'\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_traverse*/
  __pyx_tp_clear_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4CyLP_2cy_12CyClpSimplex_VarStatus(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_VarStatus(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4CyLP_2cy_12CyClpSimplex_VarStatus[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_VarStatus = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_VarStatus = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_VarStatus = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_VarStatus = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CyLP.cy.CyClpSimplex.VarStatus"), /*tp_name*/
  sizeof(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_VarStatus), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_VarStatus, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_VarStatus, /*tp_as_number*/
  &__pyx_tp_as_sequence_VarStatus, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_VarStatus, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_VarStatus, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4CyLP_2cy_12CyClpSimplex_VarStatus, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4CyLP_2cy_12CyClpSimplex_VarStatus, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("cydot"), (PyCFunction)__pyx_pw_4CyLP_2cy_12CyClpSimplex_3cydot, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_2cydot)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("CyClpSimplex"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_n_s_117, __pyx_k_117, sizeof(__pyx_k_117), 0, 0, 1, 1},
  {&__pyx_n_s_118, __pyx_k_118, sizeof(__pyx_k_118), 0, 0, 1, 1},
  {&__pyx_n_s_119, __pyx_k_119, sizeof(__pyx_k_119), 0, 0, 1, 1},
  {&__pyx_n_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 1},
  {&__pyx_n_s_120, __pyx_k_120, sizeof(__pyx_k_120), 0, 0, 1, 1},
  {&__pyx_kp_s_121, __pyx_k_121, sizeof(__pyx_k_121), 0, 0, 1, 0},
  {&__pyx_kp_s_122, __pyx_k_122, sizeof(__pyx_k_122), 0, 0, 1, 0},
  {&__pyx_kp_s_123, __pyx_k_123, sizeof(__pyx_k_123), 0, 0, 1, 0},
  {&__pyx_kp_s_124, __pyx_k_124, sizeof(__pyx_k_124), 0, 0, 1, 0},
  {&__pyx_kp_s_125, __pyx_k_125, sizeof(__pyx_k_125), 0, 0, 1, 0},
  {&__pyx_kp_s_128, __pyx_k_128, sizeof(__pyx_k_128), 0, 0, 1, 0},
  {&__pyx_n_s_129, __pyx_k_129, sizeof(__pyx_k_129), 0, 0, 1, 1},
  {&__pyx_n_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 1},
  {&__pyx_kp_u_132, __pyx_k_132, sizeof(__pyx_k_132), 0, 1, 0, 0},
  {&__pyx_kp_u_133, __pyx_k_133, sizeof(__pyx_k_133), 0, 1, 0, 0},
  {&__pyx_kp_u_134, __pyx_k_134, sizeof(__pyx_k_134), 0, 1, 0, 0},
  {&__pyx_kp_u_135, __pyx_k_135, sizeof(__pyx_k_135), 0, 1, 0, 0},
  {&__pyx_kp_u_136, __pyx_k_136, sizeof(__pyx_k_136), 0, 1, 0, 0},
  {&__pyx_kp_u_137, __pyx_k_137, sizeof(__pyx_k_137), 0, 1, 0, 0},
  {&__pyx_kp_u_138, __pyx_k_138, sizeof(__pyx_k_138), 0, 1, 0, 0},
  {&__pyx_kp_u_139, __pyx_k_139, sizeof(__pyx_k_139), 0, 1, 0, 0},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_kp_u_140, __pyx_k_140, sizeof(__pyx_k_140), 0, 1, 0, 0},
  {&__pyx_kp_u_141, __pyx_k_141, sizeof(__pyx_k_141), 0, 1, 0, 0},
  {&__pyx_kp_u_142, __pyx_k_142, sizeof(__pyx_k_142), 0, 1, 0, 0},
  {&__pyx_kp_u_143, __pyx_k_143, sizeof(__pyx_k_143), 0, 1, 0, 0},
  {&__pyx_kp_u_144, __pyx_k_144, sizeof(__pyx_k_144), 0, 1, 0, 0},
  {&__pyx_kp_u_145, __pyx_k_145, sizeof(__pyx_k_145), 0, 1, 0, 0},
  {&__pyx_kp_u_146, __pyx_k_146, sizeof(__pyx_k_146), 0, 1, 0, 0},
  {&__pyx_kp_u_147, __pyx_k_147, sizeof(__pyx_k_147), 0, 1, 0, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 0},
  {&__pyx_n_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 1},
  {&__pyx_kp_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 0},
  {&__pyx_kp_s_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 1, 0},
  {&__pyx_kp_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 0},
  {&__pyx_kp_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 0},
  {&__pyx_kp_s_35, __pyx_k_35, sizeof(__pyx_k_35), 0, 0, 1, 0},
  {&__pyx_kp_s_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 0, 1, 0},
  {&__pyx_kp_s_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 0, 1, 0},
  {&__pyx_n_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 1},
  {&__pyx_n_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 1},
  {&__pyx_kp_s_41, __pyx_k_41, sizeof(__pyx_k_41), 0, 0, 1, 0},
  {&__pyx_n_s_44, __pyx_k_44, sizeof(__pyx_k_44), 0, 0, 1, 1},
  {&__pyx_kp_s_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 1, 0},
  {&__pyx_kp_s_47, __pyx_k_47, sizeof(__pyx_k_47), 0, 0, 1, 0},
  {&__pyx_kp_s_48, __pyx_k_48, sizeof(__pyx_k_48), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_50, __pyx_k_50, sizeof(__pyx_k_50), 0, 0, 1, 0},
  {&__pyx_kp_s_52, __pyx_k_52, sizeof(__pyx_k_52), 0, 0, 1, 0},
  {&__pyx_n_s_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 0, 1, 1},
  {&__pyx_kp_s_56, __pyx_k_56, sizeof(__pyx_k_56), 0, 0, 1, 0},
  {&__pyx_n_s_58, __pyx_k_58, sizeof(__pyx_k_58), 0, 0, 1, 1},
  {&__pyx_n_s_59, __pyx_k_59, sizeof(__pyx_k_59), 0, 0, 1, 1},
  {&__pyx_kp_s_62, __pyx_k_62, sizeof(__pyx_k_62), 0, 0, 1, 0},
  {&__pyx_kp_u_63, __pyx_k_63, sizeof(__pyx_k_63), 0, 1, 0, 0},
  {&__pyx_kp_u_65, __pyx_k_65, sizeof(__pyx_k_65), 0, 1, 0, 0},
  {&__pyx_kp_u_67, __pyx_k_67, sizeof(__pyx_k_67), 0, 1, 0, 0},
  {&__pyx_kp_u_69, __pyx_k_69, sizeof(__pyx_k_69), 0, 1, 0, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_u_70, __pyx_k_70, sizeof(__pyx_k_70), 0, 1, 0, 0},
  {&__pyx_kp_u_73, __pyx_k_73, sizeof(__pyx_k_73), 0, 1, 0, 0},
  {&__pyx_n_s__A, __pyx_k__A, sizeof(__pyx_k__A), 0, 0, 1, 1},
  {&__pyx_n_s__B, __pyx_k__B, sizeof(__pyx_k__B), 0, 0, 1, 1},
  {&__pyx_n_s__CLP_getVarStatus, __pyx_k__CLP_getVarStatus, sizeof(__pyx_k__CLP_getVarStatus), 0, 0, 1, 1},
  {&__pyx_n_s__CLP_setVarStatus, __pyx_k__CLP_setVarStatus, sizeof(__pyx_k__CLP_setVarStatus), 0, 0, 1, 1},
  {&__pyx_n_s__CyClpSimplex, __pyx_k__CyClpSimplex, sizeof(__pyx_k__CyClpSimplex), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPArray, __pyx_k__CyLPArray, sizeof(__pyx_k__CyLPArray), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPModel, __pyx_k__CyLPModel, sizeof(__pyx_k__CyLPModel), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPSolution, __pyx_k__CyLPSolution, sizeof(__pyx_k__CyLPSolution), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPVar, __pyx_k__CyLPVar, sizeof(__pyx_k__CyLPVar), 0, 0, 1, 1},
  {&__pyx_n_s__D, __pyx_k__D, sizeof(__pyx_k__D), 0, 0, 1, 1},
  {&__pyx_n_s__DualPivotPythonBase, __pyx_k__DualPivotPythonBase, sizeof(__pyx_k__DualPivotPythonBase), 0, 0, 1, 1},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__IntToStatus, __pyx_k__IntToStatus, sizeof(__pyx_k__IntToStatus), 0, 0, 1, 1},
  {&__pyx_n_s__PivotPythonBase, __pyx_k__PivotPythonBase, sizeof(__pyx_k__PivotPythonBase), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__StatusToInt, __pyx_k__StatusToInt, sizeof(__pyx_k__StatusToInt), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____class__, __pyx_k____class__, sizeof(__pyx_k____class__), 0, 0, 1, 1},
  {&__pyx_n_s____getitem__, __pyx_k____getitem__, sizeof(__pyx_k____getitem__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___extractStartFinish, __pyx_k___extractStartFinish, sizeof(__pyx_k___extractStartFinish), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__addConstraint, __pyx_k__addConstraint, sizeof(__pyx_k__addConstraint), 0, 0, 1, 1},
  {&__pyx_n_s__addConstraints, __pyx_k__addConstraints, sizeof(__pyx_k__addConstraints), 0, 0, 1, 1},
  {&__pyx_n_s__addVariable, __pyx_k__addVariable, sizeof(__pyx_k__addVariable), 0, 0, 1, 1},
  {&__pyx_n_s__any, __pyx_k__any, sizeof(__pyx_k__any), 0, 0, 1, 1},
  {&__pyx_n_s__appendCol, __pyx_k__appendCol, sizeof(__pyx_k__appendCol), 0, 0, 1, 1},
  {&__pyx_n_s__appendRow, __pyx_k__appendRow, sizeof(__pyx_k__appendRow), 0, 0, 1, 1},
  {&__pyx_n_s__arg, __pyx_k__arg, sizeof(__pyx_k__arg), 0, 0, 1, 1},
  {&__pyx_n_s__arr, __pyx_k__arr, sizeof(__pyx_k__arr), 0, 0, 1, 1},
  {&__pyx_n_s__arr_ind, __pyx_k__arr_ind, sizeof(__pyx_k__arr_ind), 0, 0, 1, 1},
  {&__pyx_n_s__array, __pyx_k__array, sizeof(__pyx_k__array), 0, 0, 1, 1},
  {&__pyx_n_s__astype, __pyx_k__astype, sizeof(__pyx_k__astype), 0, 0, 1, 1},
  {&__pyx_n_s__atLowerBound, __pyx_k__atLowerBound, sizeof(__pyx_k__atLowerBound), 0, 0, 1, 1},
  {&__pyx_n_s__atUpperBound, __pyx_k__atUpperBound, sizeof(__pyx_k__atUpperBound), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__basic, __pyx_k__basic, sizeof(__pyx_k__basic), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__checkVar, __pyx_k__checkVar, sizeof(__pyx_k__checkVar), 0, 0, 1, 1},
  {&__pyx_n_s__cl, __pyx_k__cl, sizeof(__pyx_k__cl), 0, 0, 1, 1},
  {&__pyx_n_s__close, __pyx_k__close, sizeof(__pyx_k__close), 0, 0, 1, 1},
  {&__pyx_n_s__col, __pyx_k__col, sizeof(__pyx_k__col), 0, 0, 1, 1},
  {&__pyx_n_s__colArray, __pyx_k__colArray, sizeof(__pyx_k__colArray), 0, 0, 1, 1},
  {&__pyx_n_s__collb, __pyx_k__collb, sizeof(__pyx_k__collb), 0, 0, 1, 1},
  {&__pyx_n_s__colub, __pyx_k__colub, sizeof(__pyx_k__colub), 0, 0, 1, 1},
  {&__pyx_n_s__columnLower, __pyx_k__columnLower, sizeof(__pyx_k__columnLower), 0, 0, 1, 1},
  {&__pyx_n_s__columnStarts, __pyx_k__columnStarts, sizeof(__pyx_k__columnStarts), 0, 0, 1, 1},
  {&__pyx_n_s__columnUpper, __pyx_k__columnUpper, sizeof(__pyx_k__columnUpper), 0, 0, 1, 1},
  {&__pyx_n_s__columns, __pyx_k__columns, sizeof(__pyx_k__columns), 0, 0, 1, 1},
  {&__pyx_n_s__cons, __pyx_k__cons, sizeof(__pyx_k__cons), 0, 0, 1, 1},
  {&__pyx_n_s__constInd, __pyx_k__constInd, sizeof(__pyx_k__constInd), 0, 0, 1, 1},
  {&__pyx_n_s__constIndex, __pyx_k__constIndex, sizeof(__pyx_k__constIndex), 0, 0, 1, 1},
  {&__pyx_n_s__constraints, __pyx_k__constraints, sizeof(__pyx_k__constraints), 0, 0, 1, 1},
  {&__pyx_n_s__constraintsLower, __pyx_k__constraintsLower, sizeof(__pyx_k__constraintsLower), 0, 0, 1, 1},
  {&__pyx_n_s__constraintsUpper, __pyx_k__constraintsUpper, sizeof(__pyx_k__constraintsUpper), 0, 0, 1, 1},
  {&__pyx_n_s__coo_matrix, __pyx_k__coo_matrix, sizeof(__pyx_k__coo_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__copy, __pyx_k__copy, sizeof(__pyx_k__copy), 0, 0, 1, 1},
  {&__pyx_n_s__csc_matrix, __pyx_k__csc_matrix, sizeof(__pyx_k__csc_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__csc_matrixPlus, __pyx_k__csc_matrixPlus, sizeof(__pyx_k__csc_matrixPlus), 0, 0, 1, 1},
  {&__pyx_n_s__csr_matrix, __pyx_k__csr_matrix, sizeof(__pyx_k__csr_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__cstat, __pyx_k__cstat, sizeof(__pyx_k__cstat), 0, 0, 1, 1},
  {&__pyx_n_s__curpath, __pyx_k__curpath, sizeof(__pyx_k__curpath), 0, 0, 1, 1},
  {&__pyx_n_s__currentframe, __pyx_k__currentframe, sizeof(__pyx_k__currentframe), 0, 0, 1, 1},
  {&__pyx_n_s__cyLPModel, __pyx_k__cyLPModel, sizeof(__pyx_k__cyLPModel), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__deleteCurrent, __pyx_k__deleteCurrent, sizeof(__pyx_k__deleteCurrent), 0, 0, 1, 1},
  {&__pyx_n_s__dim, __pyx_k__dim, sizeof(__pyx_k__dim), 0, 0, 1, 1},
  {&__pyx_n_s__dims, __pyx_k__dims, sizeof(__pyx_k__dims), 0, 0, 1, 1},
  {&__pyx_n_s__dirname, __pyx_k__dirname, sizeof(__pyx_k__dirname), 0, 0, 1, 1},
  {&__pyx_n_s__doRowObjective, __pyx_k__doRowObjective, sizeof(__pyx_k__doRowObjective), 0, 0, 1, 1},
  {&__pyx_n_s__double, __pyx_k__double, sizeof(__pyx_k__double), 0, 0, 1, 1},
  {&__pyx_n_s__dropNames, __pyx_k__dropNames, sizeof(__pyx_k__dropNames), 0, 0, 1, 1},
  {&__pyx_n_s__dtype, __pyx_k__dtype, sizeof(__pyx_k__dtype), 0, 0, 1, 1},
  {&__pyx_n_s__elementIndex, __pyx_k__elementIndex, sizeof(__pyx_k__elementIndex), 0, 0, 1, 1},
  {&__pyx_n_s__elementValue, __pyx_k__elementValue, sizeof(__pyx_k__elementValue), 0, 0, 1, 1},
  {&__pyx_n_s__elements, __pyx_k__elements, sizeof(__pyx_k__elements), 0, 0, 1, 1},
  {&__pyx_n_s__empty, __pyx_k__empty, sizeof(__pyx_k__empty), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__exceptions, __pyx_k__exceptions, sizeof(__pyx_k__exceptions), 0, 0, 1, 1},
  {&__pyx_n_s__f, __pyx_k__f, sizeof(__pyx_k__f), 0, 0, 1, 1},
  {&__pyx_n_s__fileName, __pyx_k__fileName, sizeof(__pyx_k__fileName), 0, 0, 1, 1},
  {&__pyx_n_s__filename, __pyx_k__filename, sizeof(__pyx_k__filename), 0, 0, 1, 1},
  {&__pyx_n_s__filterVars, __pyx_k__filterVars, sizeof(__pyx_k__filterVars), 0, 0, 1, 1},
  {&__pyx_n_s__fixed, __pyx_k__fixed, sizeof(__pyx_k__fixed), 0, 0, 1, 1},
  {&__pyx_n_s__formatType, __pyx_k__formatType, sizeof(__pyx_k__formatType), 0, 0, 1, 1},
  {&__pyx_n_s__free, __pyx_k__free, sizeof(__pyx_k__free), 0, 0, 1, 1},
  {&__pyx_n_s__getACol, __pyx_k__getACol, sizeof(__pyx_k__getACol), 0, 0, 1, 1},
  {&__pyx_n_s__getBInvACol, __pyx_k__getBInvACol, sizeof(__pyx_k__getBInvACol), 0, 0, 1, 1},
  {&__pyx_n_s__getBInvCol, __pyx_k__getBInvCol, sizeof(__pyx_k__getBInvCol), 0, 0, 1, 1},
  {&__pyx_n_s__getModelExample, __pyx_k__getModelExample, sizeof(__pyx_k__getModelExample), 0, 0, 1, 1},
  {&__pyx_n_s__getMpsExample, __pyx_k__getMpsExample, sizeof(__pyx_k__getMpsExample), 0, 0, 1, 1},
  {&__pyx_n_s__getPivotVariable, __pyx_k__getPivotVariable, sizeof(__pyx_k__getPivotVariable), 0, 0, 1, 1},
  {&__pyx_n_s__getReducedCosts, __pyx_k__getReducedCosts, sizeof(__pyx_k__getReducedCosts), 0, 0, 1, 1},
  {&__pyx_n_s__getRightHandSide, __pyx_k__getRightHandSide, sizeof(__pyx_k__getRightHandSide), 0, 0, 1, 1},
  {&__pyx_n_s__getStatusArray, __pyx_k__getStatusArray, sizeof(__pyx_k__getStatusArray), 0, 0, 1, 1},
  {&__pyx_n_s__getStatusCode, __pyx_k__getStatusCode, sizeof(__pyx_k__getStatusCode), 0, 0, 1, 1},
  {&__pyx_n_s__getVarByName, __pyx_k__getVarByName, sizeof(__pyx_k__getVarByName), 0, 0, 1, 1},
  {&__pyx_n_s__getVariableNames, __pyx_k__getVariableNames, sizeof(__pyx_k__getVariableNames), 0, 0, 1, 1},
  {&__pyx_n_s__getfile, __pyx_k__getfile, sizeof(__pyx_k__getfile), 0, 0, 1, 1},
  {&__pyx_n_s__h, __pyx_k__h, sizeof(__pyx_k__h), 0, 0, 1, 1},
  {&__pyx_n_s__hasConst, __pyx_k__hasConst, sizeof(__pyx_k__hasConst), 0, 0, 1, 1},
  {&__pyx_n_s__hasVar, __pyx_k__hasVar, sizeof(__pyx_k__hasVar), 0, 0, 1, 1},
  {&__pyx_n_s__ifValuesPass, __pyx_k__ifValuesPass, sizeof(__pyx_k__ifValuesPass), 0, 0, 1, 1},
  {&__pyx_n_s__ignoreErrors, __pyx_k__ignoreErrors, sizeof(__pyx_k__ignoreErrors), 0, 0, 1, 1},
  {&__pyx_n_s__ind, __pyx_k__ind, sizeof(__pyx_k__ind), 0, 0, 1, 1},
  {&__pyx_n_s__indices, __pyx_k__indices, sizeof(__pyx_k__indices), 0, 0, 1, 1},
  {&__pyx_n_s__indptr, __pyx_k__indptr, sizeof(__pyx_k__indptr), 0, 0, 1, 1},
  {&__pyx_n_s__inds, __pyx_k__inds, sizeof(__pyx_k__inds), 0, 0, 1, 1},
  {&__pyx_n_s__inspect, __pyx_k__inspect, sizeof(__pyx_k__inspect), 0, 0, 1, 1},
  {&__pyx_n_s__int32, __pyx_k__int32, sizeof(__pyx_k__int32), 0, 0, 1, 1},
  {&__pyx_n_s__isInt, __pyx_k__isInt, sizeof(__pyx_k__isInt), 0, 0, 1, 1},
  {&__pyx_n_s__isPivotAcceptable, __pyx_k__isPivotAcceptable, sizeof(__pyx_k__isPivotAcceptable), 0, 0, 1, 1},
  {&__pyx_n_s__isRange, __pyx_k__isRange, sizeof(__pyx_k__isRange), 0, 0, 1, 1},
  {&__pyx_n_s__itertools, __pyx_k__itertools, sizeof(__pyx_k__itertools), 0, 0, 1, 1},
  {&__pyx_n_s__izip, __pyx_k__izip, sizeof(__pyx_k__izip), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__keepIntegers, __pyx_k__keepIntegers, sizeof(__pyx_k__keepIntegers), 0, 0, 1, 1},
  {&__pyx_n_s__keepNames, __pyx_k__keepNames, sizeof(__pyx_k__keepNames), 0, 0, 1, 1},
  {&__pyx_n_s__keys, __pyx_k__keys, sizeof(__pyx_k__keys), 0, 0, 1, 1},
  {&__pyx_n_s__lil_matrix, __pyx_k__lil_matrix, sizeof(__pyx_k__lil_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__loadFromCyLPModel, __pyx_k__loadFromCyLPModel, sizeof(__pyx_k__loadFromCyLPModel), 0, 0, 1, 1},
  {&__pyx_n_s__lower, __pyx_k__lower, sizeof(__pyx_k__lower), 0, 0, 1, 1},
  {&__pyx_n_s__majorDim, __pyx_k__majorDim, sizeof(__pyx_k__majorDim), 0, 0, 1, 1},
  {&__pyx_n_s__makeMatrices, __pyx_k__makeMatrices, sizeof(__pyx_k__makeMatrices), 0, 0, 1, 1},
  {&__pyx_n_s__matrix, __pyx_k__matrix, sizeof(__pyx_k__matrix), 0, 0, 1, 1},
  {&__pyx_n_s__minorDim, __pyx_k__minorDim, sizeof(__pyx_k__minorDim), 0, 0, 1, 1},
  {&__pyx_n_s__model, __pyx_k__model, sizeof(__pyx_k__model), 0, 0, 1, 1},
  {&__pyx_n_s__modelObject, __pyx_k__modelObject, sizeof(__pyx_k__modelObject), 0, 0, 1, 1},
  {&__pyx_n_s__mpsNames, __pyx_k__mpsNames, sizeof(__pyx_k__mpsNames), 0, 0, 1, 1},
  {&__pyx_n_s__nCons, __pyx_k__nCons, sizeof(__pyx_k__nCons), 0, 0, 1, 1},
  {&__pyx_n_s__nConstraints, __pyx_k__nConstraints, sizeof(__pyx_k__nConstraints), 0, 0, 1, 1},
  {&__pyx_n_s__nRows, __pyx_k__nRows, sizeof(__pyx_k__nRows), 0, 0, 1, 1},
  {&__pyx_n_s__nVariables, __pyx_k__nVariables, sizeof(__pyx_k__nVariables), 0, 0, 1, 1},
  {&__pyx_n_s__nVars, __pyx_k__nVars, sizeof(__pyx_k__nVars), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__ncol, __pyx_k__ncol, sizeof(__pyx_k__ncol), 0, 0, 1, 1},
  {&__pyx_n_s__newNumberColumns, __pyx_k__newNumberColumns, sizeof(__pyx_k__newNumberColumns), 0, 0, 1, 1},
  {&__pyx_n_s__newNumberRows, __pyx_k__newNumberRows, sizeof(__pyx_k__newNumberRows), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__number, __pyx_k__number, sizeof(__pyx_k__number), 0, 0, 1, 1},
  {&__pyx_n_s__numberAcross, __pyx_k__numberAcross, sizeof(__pyx_k__numberAcross), 0, 0, 1, 1},
  {&__pyx_n_s__numberInColumn, __pyx_k__numberInColumn, sizeof(__pyx_k__numberInColumn), 0, 0, 1, 1},
  {&__pyx_n_s__numberInRow, __pyx_k__numberInRow, sizeof(__pyx_k__numberInRow), 0, 0, 1, 1},
  {&__pyx_n_s__numberPasses, __pyx_k__numberPasses, sizeof(__pyx_k__numberPasses), 0, 0, 1, 1},
  {&__pyx_n_s__numberWanted, __pyx_k__numberWanted, sizeof(__pyx_k__numberWanted), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__obj, __pyx_k__obj, sizeof(__pyx_k__obj), 0, 0, 1, 1},
  {&__pyx_n_s__objSense, __pyx_k__objSense, sizeof(__pyx_k__objSense), 0, 0, 1, 1},
  {&__pyx_n_s__objective, __pyx_k__objective, sizeof(__pyx_k__objective), 0, 0, 1, 1},
  {&__pyx_n_s__open, __pyx_k__open, sizeof(__pyx_k__open), 0, 0, 1, 1},
  {&__pyx_n_s__optimal, __pyx_k__optimal, sizeof(__pyx_k__optimal), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__parent, __pyx_k__parent, sizeof(__pyx_k__parent), 0, 0, 1, 1},
  {&__pyx_n_s__parentDim, __pyx_k__parentDim, sizeof(__pyx_k__parentDim), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__pi, __pyx_k__pi, sizeof(__pyx_k__pi), 0, 0, 1, 1},
  {&__pyx_n_s__problemStatus, __pyx_k__problemStatus, sizeof(__pyx_k__problemStatus), 0, 0, 1, 1},
  {&__pyx_n_s__product, __pyx_k__product, sizeof(__pyx_k__product), 0, 0, 1, 1},
  {&__pyx_n_s__pvdims, __pyx_k__pvdims, sizeof(__pyx_k__pvdims), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__readMps, __pyx_k__readMps, sizeof(__pyx_k__readMps), 0, 0, 1, 1},
  {&__pyx_n_s__regionSparse1, __pyx_k__regionSparse1, sizeof(__pyx_k__regionSparse1), 0, 0, 1, 1},
  {&__pyx_n_s__regionSparse2, __pyx_k__regionSparse2, sizeof(__pyx_k__regionSparse2), 0, 0, 1, 1},
  {&__pyx_n_s__removeConstraint, __pyx_k__removeConstraint, sizeof(__pyx_k__removeConstraint), 0, 0, 1, 1},
  {&__pyx_n_s__removeVariable, __pyx_k__removeVariable, sizeof(__pyx_k__removeVariable), 0, 0, 1, 1},
  {&__pyx_n_s__replaceMatrix, __pyx_k__replaceMatrix, sizeof(__pyx_k__replaceMatrix), 0, 0, 1, 1},
  {&__pyx_n_s__resize, __pyx_k__resize, sizeof(__pyx_k__resize), 0, 0, 1, 1},
  {&__pyx_n_s__reverseVarSearch, __pyx_k__reverseVarSearch, sizeof(__pyx_k__reverseVarSearch), 0, 0, 1, 1},
  {&__pyx_n_s__row, __pyx_k__row, sizeof(__pyx_k__row), 0, 0, 1, 1},
  {&__pyx_n_s__rowLower, __pyx_k__rowLower, sizeof(__pyx_k__rowLower), 0, 0, 1, 1},
  {&__pyx_n_s__rowObjective, __pyx_k__rowObjective, sizeof(__pyx_k__rowObjective), 0, 0, 1, 1},
  {&__pyx_n_s__rowStarts, __pyx_k__rowStarts, sizeof(__pyx_k__rowStarts), 0, 0, 1, 1},
  {&__pyx_n_s__rowUpper, __pyx_k__rowUpper, sizeof(__pyx_k__rowUpper), 0, 0, 1, 1},
  {&__pyx_n_s__rowlb, __pyx_k__rowlb, sizeof(__pyx_k__rowlb), 0, 0, 1, 1},
  {&__pyx_n_s__rows, __pyx_k__rows, sizeof(__pyx_k__rows), 0, 0, 1, 1},
  {&__pyx_n_s__rowub, __pyx_k__rowub, sizeof(__pyx_k__rowub), 0, 0, 1, 1},
  {&__pyx_n_s__rstat, __pyx_k__rstat, sizeof(__pyx_k__rstat), 0, 0, 1, 1},
  {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
  {&__pyx_n_s__scalar, __pyx_k__scalar, sizeof(__pyx_k__scalar), 0, 0, 1, 1},
  {&__pyx_n_s__scipy, __pyx_k__scipy, sizeof(__pyx_k__scipy), 0, 0, 1, 1},
  {&__pyx_n_s__sequence, __pyx_k__sequence, sizeof(__pyx_k__sequence), 0, 0, 1, 1},
  {&__pyx_n_s__setColumnLower, __pyx_k__setColumnLower, sizeof(__pyx_k__setColumnLower), 0, 0, 1, 1},
  {&__pyx_n_s__setColumnUpper, __pyx_k__setColumnUpper, sizeof(__pyx_k__setColumnUpper), 0, 0, 1, 1},
  {&__pyx_n_s__setConstraintName, __pyx_k__setConstraintName, sizeof(__pyx_k__setConstraintName), 0, 0, 1, 1},
  {&__pyx_n_s__setInteger, __pyx_k__setInteger, sizeof(__pyx_k__setInteger), 0, 0, 1, 1},
  {&__pyx_n_s__setObjectiveArray, __pyx_k__setObjectiveArray, sizeof(__pyx_k__setObjectiveArray), 0, 0, 1, 1},
  {&__pyx_n_s__setRowLower, __pyx_k__setRowLower, sizeof(__pyx_k__setRowLower), 0, 0, 1, 1},
  {&__pyx_n_s__setRowUpper, __pyx_k__setRowUpper, sizeof(__pyx_k__setRowUpper), 0, 0, 1, 1},
  {&__pyx_n_s__setVariableName, __pyx_k__setVariableName, sizeof(__pyx_k__setVariableName), 0, 0, 1, 1},
  {&__pyx_n_s__shape, __pyx_k__shape, sizeof(__pyx_k__shape), 0, 0, 1, 1},
  {&__pyx_n_s__spare, __pyx_k__spare, sizeof(__pyx_k__spare), 0, 0, 1, 1},
  {&__pyx_n_s__sparse, __pyx_k__sparse, sizeof(__pyx_k__sparse), 0, 0, 1, 1},
  {&__pyx_n_s__sparseConcat, __pyx_k__sparseConcat, sizeof(__pyx_k__sparseConcat), 0, 0, 1, 1},
  {&__pyx_n_s__start, __pyx_k__start, sizeof(__pyx_k__start), 0, 0, 1, 1},
  {&__pyx_n_s__startFinishOptions, __pyx_k__startFinishOptions, sizeof(__pyx_k__startFinishOptions), 0, 0, 1, 1},
  {&__pyx_n_s__status, __pyx_k__status, sizeof(__pyx_k__status), 0, 0, 1, 1},
  {&__pyx_n_s__status_, __pyx_k__status_, sizeof(__pyx_k__status_), 0, 0, 1, 1},
  {&__pyx_n_s__sum, __pyx_k__sum, sizeof(__pyx_k__sum), 0, 0, 1, 1},
  {&__pyx_n_s__superBasic, __pyx_k__superBasic, sizeof(__pyx_k__superBasic), 0, 0, 1, 1},
  {&__pyx_n_s__tocoo, __pyx_k__tocoo, sizeof(__pyx_k__tocoo), 0, 0, 1, 1},
  {&__pyx_n_s__tryPlusMinusOne, __pyx_k__tryPlusMinusOne, sizeof(__pyx_k__tryPlusMinusOne), 0, 0, 1, 1},
  {&__pyx_n_s__updatedColumn, __pyx_k__updatedColumn, sizeof(__pyx_k__updatedColumn), 0, 0, 1, 1},
  {&__pyx_n_s__upper, __pyx_k__upper, sizeof(__pyx_k__upper), 0, 0, 1, 1},
  {&__pyx_n_s__v1, __pyx_k__v1, sizeof(__pyx_k__v1), 0, 0, 1, 1},
  {&__pyx_n_s__v2, __pyx_k__v2, sizeof(__pyx_k__v2), 0, 0, 1, 1},
  {&__pyx_n_s__val, __pyx_k__val, sizeof(__pyx_k__val), 0, 0, 1, 1},
  {&__pyx_n_s__var1, __pyx_k__var1, sizeof(__pyx_k__var1), 0, 0, 1, 1},
  {&__pyx_n_s__var2, __pyx_k__var2, sizeof(__pyx_k__var2), 0, 0, 1, 1},
  {&__pyx_n_s__varCoefs, __pyx_k__varCoefs, sizeof(__pyx_k__varCoefs), 0, 0, 1, 1},
  {&__pyx_n_s__varInd, __pyx_k__varInd, sizeof(__pyx_k__varInd), 0, 0, 1, 1},
  {&__pyx_n_s__varIndex, __pyx_k__varIndex, sizeof(__pyx_k__varIndex), 0, 0, 1, 1},
  {&__pyx_n_s__varNames, __pyx_k__varNames, sizeof(__pyx_k__varNames), 0, 0, 1, 1},
  {&__pyx_n_s__variableNames, __pyx_k__variableNames, sizeof(__pyx_k__variableNames), 0, 0, 1, 1},
  {&__pyx_n_s__variables, __pyx_k__variables, sizeof(__pyx_k__variables), 0, 0, 1, 1},
  {&__pyx_n_s__variablesLower, __pyx_k__variablesLower, sizeof(__pyx_k__variablesLower), 0, 0, 1, 1},
  {&__pyx_n_s__variablesUpper, __pyx_k__variablesUpper, sizeof(__pyx_k__variablesUpper), 0, 0, 1, 1},
  {&__pyx_n_s__varname, __pyx_k__varname, sizeof(__pyx_k__varname), 0, 0, 1, 1},
  {&__pyx_n_s__vectorStarts, __pyx_k__vectorStarts, sizeof(__pyx_k__vectorStarts), 0, 0, 1, 1},
  {&__pyx_n_s__vectorTimesB_1, __pyx_k__vectorTimesB_1, sizeof(__pyx_k__vectorTimesB_1), 0, 0, 1, 1},
  {&__pyx_n_s__w, __pyx_k__w, sizeof(__pyx_k__w), 0, 0, 1, 1},
  {&__pyx_n_s__w_ind, __pyx_k__w_ind, sizeof(__pyx_k__w_ind), 0, 0, 1, 1},
  {&__pyx_n_s__where, __pyx_k__where, sizeof(__pyx_k__where), 0, 0, 1, 1},
  {&__pyx_n_s__which, __pyx_k__which, sizeof(__pyx_k__which), 0, 0, 1, 1},
  {&__pyx_n_s__x, __pyx_k__x, sizeof(__pyx_k__x), 0, 0, 1, 1},
  {&__pyx_n_s__x_u, __pyx_k__x_u, sizeof(__pyx_k__x_u), 0, 0, 1, 1},
  {&__pyx_n_s__xrange, __pyx_k__xrange, sizeof(__pyx_k__xrange), 0, 0, 1, 1},
  {&__pyx_n_s__y, __pyx_k__y, sizeof(__pyx_k__y), 0, 0, 1, 1},
  {&__pyx_n_s__z, __pyx_k__z, sizeof(__pyx_k__z), 0, 0, 1, 1},
  {&__pyx_n_s__zeros, __pyx_k__zeros, sizeof(__pyx_k__zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_open = __Pyx_GetName(__pyx_b, __pyx_n_s__open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "CyLP/cy/CyClpSimplex.pyx":114
 *             for colInd in xrange(self.nConstraints):
 *                 self.getBInvCol(colInd, c)
 *                 b[:, colInd] = c             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
  __pyx_k_slice_2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_k_slice_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_slice_2);
  __Pyx_GIVEREF(__pyx_k_slice_2);

  /* "CyLP/cy/CyClpSimplex.pyx":124
 *             for colInd in xrange(nAllVars):
 *                 self.getBInvACol(colInd, c)
 *                 t[:, colInd] = c             # <<<<<<<<<<<<<<
 *             return t
 * 
 */
  __pyx_k_slice_3 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_k_slice_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_slice_3);
  __Pyx_GIVEREF(__pyx_k_slice_3);

  /* "CyLP/cy/CyClpSimplex.pyx":152
 *                 #       self.cyLPModel.objective.astype(np.double))
 *             else:
 *                 raise Exception('To set the objective function of ' \             # <<<<<<<<<<<<<<
 *                                 'CyClpSimplex set CyLPSimplex.cyLPModel ' \
 *                                 'first.')
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_6);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "CyLP/cy/CyClpSimplex.pyx":218
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.constraints
 */
  __pyx_k_tuple_8 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_8);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_7));
  PyTuple_SET_ITEM(__pyx_k_tuple_8, 0, ((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "CyLP/cy/CyClpSimplex.pyx":235
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.variables
 */
  __pyx_k_tuple_9 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_9);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_7));
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 0, ((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "CyLP/cy/CyClpSimplex.pyx":619
 *                 m = mat.tocoo()
 *             except:
 *                 raise Exception('Hessian can be set to a matrix that ' \             # <<<<<<<<<<<<<<
 *                                             'implements *tocoo* method')
 *             if m:
 */
  __pyx_k_tuple_11 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_11);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_11, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "CyLP/cy/CyClpSimplex.pyx":911
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_15 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_15);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_14));
  PyTuple_SET_ITEM(__pyx_k_tuple_15, 0, ((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "CyLP/cy/CyClpSimplex.pyx":936
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of getVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_18 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_18);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_17));
  PyTuple_SET_ITEM(__pyx_k_tuple_18, 0, ((PyObject *)__pyx_kp_s_17));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_17));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_18));

  /* "CyLP/cy/CyClpSimplex.pyx":986
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_19 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_19);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_14));
  PyTuple_SET_ITEM(__pyx_k_tuple_19, 0, ((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));

  /* "CyLP/cy/CyClpSimplex.pyx":1008
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setVarStatus can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_21);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_14));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

  /* "CyLP/cy/CyClpSimplex.pyx":1166
 *                         mainCoef.indices, mainCoef.data)
 *         else:
 *             raise Exception('To add a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
  __pyx_k_tuple_24 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_24);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_23));
  PyTuple_SET_ITEM(__pyx_k_tuple_24, 0, ((PyObject *)__pyx_kp_s_23));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_23));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "CyLP/cy/CyClpSimplex.pyx":1178
 *             #self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_27);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_26));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "CyLP/cy/CyClpSimplex.pyx":1202
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a variable you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
  __pyx_k_tuple_30 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_30);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_29));
  PyTuple_SET_ITEM(__pyx_k_tuple_30, 0, ((PyObject *)__pyx_kp_s_29));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_29));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_30));

  /* "CyLP/cy/CyClpSimplex.pyx":1207
 *     def getVarByName(self, name):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.getVarByName(name)
 * 
 */
  __pyx_k_tuple_32 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_32);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_31));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 0, ((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));

  /* "CyLP/cy/CyClpSimplex.pyx":1212
 *     def getVarNameByIndex(self, ind):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 * 
 */
  __pyx_k_tuple_33 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_33);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_31));
  PyTuple_SET_ITEM(__pyx_k_tuple_33, 0, ((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_33));

  /* "CyLP/cy/CyClpSimplex.pyx":1528
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_42 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_42);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_41));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 0, ((PyObject *)__pyx_kp_s_41));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_41));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));

  /* "CyLP/cy/CyClpSimplex.pyx":1733
 *         '''
 *         if not issubclass(pivotMethodObject.__class__, PivotPythonBase):
 *             raise TypeError('pivotMethodObject should be of a \             # <<<<<<<<<<<<<<
 *                             class derived from PivotPythonBase')
 * 
 */
  __pyx_k_tuple_49 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_49);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_48));
  PyTuple_SET_ITEM(__pyx_k_tuple_49, 0, ((PyObject *)__pyx_kp_s_48));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_48));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_49));

  /* "CyLP/cy/CyClpSimplex.pyx":1749
 *         to solve LPs <custom-dual-pivot-usage>`.       '''
 *         if not issubclass(dualPivotMethodObject.__class__, DualPivotPythonBase):
 *             raise TypeError('dualPivotMethodObject should be of a \             # <<<<<<<<<<<<<<
 *                             class derived from DualPivotPythonBase')
 * 
 */
  __pyx_k_tuple_51 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_51);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_50));
  PyTuple_SET_ITEM(__pyx_k_tuple_51, 0, ((PyObject *)__pyx_kp_s_50));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_50));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_51));

  /* "CyLP/cy/CyClpSimplex.pyx":1796
 *                                        CppCoinIndexedVector * spareArray2,
 *                                        int valuesPass):
 *         raise Exception('CyClpPrimalColumnPivotBase.pyx: pivot column ' \             # <<<<<<<<<<<<<<
 *                         'should be implemented.')
 * 
 */
  __pyx_k_tuple_53 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_53);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_52));
  PyTuple_SET_ITEM(__pyx_k_tuple_53, 0, ((PyObject *)__pyx_kp_s_52));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_52));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));

  /* "CyLP/cy/CyClpSimplex.pyx":1827
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_55 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_55);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_41));
  PyTuple_SET_ITEM(__pyx_k_tuple_55, 0, ((PyObject *)__pyx_kp_s_41));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_41));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_55));

  /* "CyLP/cy/CyClpSimplex.pyx":1912
 * 
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)             # <<<<<<<<<<<<<<
 *     y = model.addVariable('y', 2)
 * 
 */
  __pyx_k_tuple_60 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_60);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__x));
  PyTuple_SET_ITEM(__pyx_k_tuple_60, 0, ((PyObject *)__pyx_n_s__x));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__x));
  __Pyx_INCREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_k_tuple_60, 1, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_60));

  /* "CyLP/cy/CyClpSimplex.pyx":1913
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)
 *     y = model.addVariable('y', 2)             # <<<<<<<<<<<<<<
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 */
  __pyx_k_tuple_61 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_61);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__y));
  PyTuple_SET_ITEM(__pyx_k_tuple_61, 0, ((PyObject *)__pyx_n_s__y));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__y));
  __Pyx_INCREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_k_tuple_61, 1, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_61));

  /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_k_tuple_64 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_64)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_64);
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_63));
  PyTuple_SET_ITEM(__pyx_k_tuple_64, 0, ((PyObject *)__pyx_kp_u_63));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_63));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_64));

  /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_k_tuple_66 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_66)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_66);
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_65));
  PyTuple_SET_ITEM(__pyx_k_tuple_66, 0, ((PyObject *)__pyx_kp_u_65));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_65));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_66));

  /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_k_tuple_68 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_68)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_68);
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_67));
  PyTuple_SET_ITEM(__pyx_k_tuple_68, 0, ((PyObject *)__pyx_kp_u_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_68));

  /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_k_tuple_71 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_71)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_71);
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_70));
  PyTuple_SET_ITEM(__pyx_k_tuple_71, 0, ((PyObject *)__pyx_kp_u_70));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_70));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_71));

  /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_k_tuple_72 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_72)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_72);
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_67));
  PyTuple_SET_ITEM(__pyx_k_tuple_72, 0, ((PyObject *)__pyx_kp_u_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_72));

  /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_k_tuple_74 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_74)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_74);
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_73));
  PyTuple_SET_ITEM(__pyx_k_tuple_74, 0, ((PyObject *)__pyx_kp_u_73));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_73));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_74));

  /* "CyLP/cy/CyClpSimplex.pyx":1903
 * 
 * 
 * def getModelExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return a model example to be used in doctests.
 */
  __pyx_k_tuple_126 = PyTuple_New(14); if (unlikely(!__pyx_k_tuple_126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_126);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__np));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 0, ((PyObject *)__pyx_n_s__np));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__np));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPModel));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 1, ((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPArray));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 2, ((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyClpSimplex));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 3, ((PyObject *)__pyx_n_s__CyClpSimplex));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyClpSimplex));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__model));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 4, ((PyObject *)__pyx_n_s__model));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__model));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__x));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 5, ((PyObject *)__pyx_n_s__x));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__x));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__y));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 6, ((PyObject *)__pyx_n_s__y));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__y));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__A));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 7, ((PyObject *)__pyx_n_s__A));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__A));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__B));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 8, ((PyObject *)__pyx_n_s__B));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__B));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__D));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 9, ((PyObject *)__pyx_n_s__D));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__D));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__a));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 10, ((PyObject *)__pyx_n_s__a));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__a));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__b));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 11, ((PyObject *)__pyx_n_s__b));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__b));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__x_u));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 12, ((PyObject *)__pyx_n_s__x_u));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__x_u));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__c));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 13, ((PyObject *)__pyx_n_s__c));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__c));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_126));
  __pyx_k_codeobj_127 = (PyObject*)__Pyx_PyCode_New(0, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_128, __pyx_n_s__getModelExample, 1903, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1937
 * 
 * 
 * def getMpsExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return full path to an MPS example file for doctests
 */
  __pyx_k_tuple_130 = PyTuple_New(3); if (unlikely(!__pyx_k_tuple_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_130);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__os));
  PyTuple_SET_ITEM(__pyx_k_tuple_130, 0, ((PyObject *)__pyx_n_s__os));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__os));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__inspect));
  PyTuple_SET_ITEM(__pyx_k_tuple_130, 1, ((PyObject *)__pyx_n_s__inspect));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__inspect));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__curpath));
  PyTuple_SET_ITEM(__pyx_k_tuple_130, 2, ((PyObject *)__pyx_n_s__curpath));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__curpath));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_130));
  __pyx_k_codeobj_131 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_128, __pyx_n_s__getMpsExample, 1937, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initCyClpSimplex(void); /*proto*/
PyMODINIT_FUNC initCyClpSimplex(void)
#else
PyMODINIT_FUNC PyInit_CyClpSimplex(void); /*proto*/
PyMODINIT_FUNC PyInit_CyClpSimplex(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_CyClpSimplex(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("CyClpSimplex"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "CyLP.cy.CyClpSimplex")) {
      if (unlikely(PyDict_SetItemString(modules, "CyLP.cy.CyClpSimplex", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_CyLP__cy__CyClpSimplex) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("cydot", (void (*)(void))__pyx_f_4CyLP_2cy_12CyClpSimplex_cydot, "PyObject *(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = &__pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setCppSelf = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, IClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setCppSelf;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.readMps = (int (*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, char *, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps *__pyx_optional_args))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setPrimalColumnPivotAlgorithm = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, void *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setPrimalColumnPivotAlgorithm;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setDualRowPivotAlgorithm = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, void *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setDualRowPivotAlgorithm;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.primalColumnSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalColumnSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.dualColumnSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualColumnSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.primalRowSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRowSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.dualRowSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualRowSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.rowLower = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowLower;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.rowUpper = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowUpper;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getReducedCosts = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getReducedCosts;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getStatusArray = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getStatusArray;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getComplementarityList = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getComplementarityList;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getPivotVariable = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getPivotVariable;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.filterVars = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_filterVars;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.CLP_getVarStatus = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_CLP_getVarStatus;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.CLP_setVarStatus = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, int, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_CLP_setVarStatus;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.primalRow = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, int))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRow;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getACol = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getACol;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.ComplementarityList = (int *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_ComplementarityList;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.pivotVariable = (int *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_pivotVariable;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.vectorTimesB_1 = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_vectorTimesB_1;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setVariableName = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setVariableName;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setConstraintName = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setConstraintName;
  if (PyType_Ready(&__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.tp_dict, __pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CyClpSimplex", (PyObject *)&__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = &__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
  if (PyType_Ready(&__pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "VarStatus", (PyObject *)&__pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus = &__pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector = __Pyx_ImportType("CyLP.cy.CyCoinIndexedVector", "CyCoinIndexedVector", sizeof(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector = (struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase = __Pyx_ImportType("CyLP.cy.CyClpPrimalColumnPivotBase", "CyClpPrimalColumnPivotBase", sizeof(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase = (struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase = __Pyx_ImportType("CyLP.cy.CyClpDualRowPivotBase", "CyClpDualRowPivotBase", sizeof(struct __pyx_obj_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase = (struct __pyx_vtabstruct_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_21CyClpDualRowPivotBase_CyClpDualRowPivotBase)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel = __Pyx_ImportType("CyLP.cy.CyCoinModel", "CyCoinModel", sizeof(struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_11CyCoinModel_CyCoinModel = (struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_11CyCoinModel_CyCoinModel)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix = __Pyx_ImportType("CyLP.cy.CyCoinPackedMatrix", "CyCoinPackedMatrix", sizeof(struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglCutGenerator = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglCutGenerator", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglCutGenerator)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglAllDifferent = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglAllDifferent", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglAllDifferent), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglAllDifferent)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglClique = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglClique", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglClique), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglClique)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglKnapsackCover", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglKnapsackCover = (struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglKnapsackCover)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglOddHole = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglOddHole", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglOddHole), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglOddHole)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglFlowCover = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglFlowCover", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglFlowCover), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglFlowCover)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglGomory", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglGomory = (struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglGomory)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglRedSplit = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglRedSplit", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglRedSplit), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglRedSplit)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLiftAndProject = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglLiftAndProject", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLiftAndProject), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLiftAndProject)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLandP = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglLandP", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLandP), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLandP)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglMixedIntegerRounding", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2 = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglMixedIntegerRounding2", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglTwomir = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglTwomir", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglTwomir), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglTwomir)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglResidualCapacity = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglResidualCapacity", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglResidualCapacity), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglResidualCapacity)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglPreProcess = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglPreProcess", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglPreProcess), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglPreProcess)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglProbing = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglProbing", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglProbing), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglProbing)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglSimpleRounding = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglSimpleRounding", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglSimpleRounding), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglSimpleRounding)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode = __Pyx_ImportType("CyLP.cy.CyCbcNode", "CyCbcNode", sizeof(struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_9CyCbcNode_CyCbcNode = (struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_9CyCbcNode_CyCbcNode)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel = __Pyx_ImportType("CyLP.cy.CyCbcModel", "CyCbcModel", sizeof(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_10CyCbcModel_CyCbcModel = (struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_10CyCbcModel_CyCbcModel)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot = __Pyx_ImportType("CyLP.cy.CyWolfePivot", "CyWolfePivot", sizeof(struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_12CyWolfePivot_CyWolfePivot = (struct __pyx_vtabstruct_4CyLP_2cy_12CyWolfePivot_CyWolfePivot*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_12CyWolfePivot_CyWolfePivot)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot = __Pyx_ImportType("CyLP.cy.CyPEPivot", "CyPEPivot", sizeof(struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot)) {__pyx_filename = __pyx_f[14]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_9CyPEPivot_CyPEPivot = (struct __pyx_vtabstruct_4CyLP_2cy_9CyPEPivot_CyPEPivot*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_9CyPEPivot_CyPEPivot)) {__pyx_filename = __pyx_f[14]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase = __Pyx_ImportType("CyLP.cy.CyPivotPythonBase", "CyPivotPythonBase", sizeof(struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase)) {__pyx_filename = __pyx_f[15]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase = (struct __pyx_vtabstruct_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase)) {__pyx_filename = __pyx_f[15]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase = __Pyx_ImportType("CyLP.cy.CyDualPivotPythonBase", "CyDualPivotPythonBase", sizeof(struct __pyx_obj_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase)) {__pyx_filename = __pyx_f[16]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase = (struct __pyx_vtabstruct_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_21CyDualPivotPythonBase_CyDualPivotPythonBase)) {__pyx_filename = __pyx_f[16]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO = __Pyx_ImportType("CyLP.cy.CyCoinMpsIO", "CyCoinMpsIO", sizeof(struct __pyx_obj_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO)) {__pyx_filename = __pyx_f[17]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "CyLP/cy/CyClpSimplex.pyx":5
 * 
 * 
 * from exceptions import TypeError             # <<<<<<<<<<<<<<
 * import inspect
 * import os.path
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__TypeError));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__TypeError));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__TypeError));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__exceptions), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__TypeError);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__TypeError);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__TypeError, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":6
 * 
 * from exceptions import TypeError
 * import inspect             # <<<<<<<<<<<<<<
 * import os.path
 * from itertools import izip, product
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__inspect), 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__inspect, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":7
 * from exceptions import TypeError
 * import inspect
 * import os.path             # <<<<<<<<<<<<<<
 * from itertools import izip, product
 * import numpy as np
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_117), 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":8
 * import inspect
 * import os.path
 * from itertools import izip, product             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__izip));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__izip));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__izip));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__product));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__product));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__product));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__itertools), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__izip);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__izip);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__izip, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__product);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__product);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__product, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":9
 * import os.path
 * from itertools import izip, product
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * from scipy import sparse
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":11
 * import numpy as np
 * cimport numpy as np
 * from scipy import sparse             # <<<<<<<<<<<<<<
 * cimport cpython.ref as cpy_ref
 * from CyWolfePivot cimport CyWolfePivot
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__sparse));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__sparse));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__sparse));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__scipy), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__sparse);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__sparse);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sparse, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":19
 * from CyLP.cy cimport CyClpSimplex
 * from CyLP.cy cimport CyCoinModel
 * from CyLP.py.utils.sparseUtil import sparseConcat, csc_matrixPlus             # <<<<<<<<<<<<<<
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__sparseConcat));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__sparseConcat));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__sparseConcat));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__csc_matrixPlus));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__csc_matrixPlus));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__csc_matrixPlus));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s_118), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__sparseConcat);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__sparseConcat);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sparseConcat, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__csc_matrixPlus);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__csc_matrixPlus);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__csc_matrixPlus, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":20
 * from CyLP.cy cimport CyCoinModel
 * from CyLP.py.utils.sparseUtil import sparseConcat, csc_matrixPlus
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution             # <<<<<<<<<<<<<<
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase
 * from CyLP.py.pivots import DualPivotPythonBase
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPVar));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__CyLPVar));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPVar));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPArray));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPSolution));
  PyList_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_n_s__CyLPSolution));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPSolution));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_58), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CyLPVar);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__CyLPVar);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPVar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CyLPArray);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__CyLPArray);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPArray, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CyLPSolution);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__CyLPSolution);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPSolution, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":21
 * from CyLP.py.utils.sparseUtil import sparseConcat, csc_matrixPlus
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase             # <<<<<<<<<<<<<<
 * from CyLP.py.pivots import DualPivotPythonBase
 * from CyLP.py.modeling.CyLPModel import CyLPModel
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PivotPythonBase));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__PivotPythonBase));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PivotPythonBase));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s_119), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__PivotPythonBase);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__PivotPythonBase);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PivotPythonBase, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":22
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase
 * from CyLP.py.pivots import DualPivotPythonBase             # <<<<<<<<<<<<<<
 * from CyLP.py.modeling.CyLPModel import CyLPModel
 * from CyLP.cy cimport CyCoinMpsIO
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DualPivotPythonBase));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__DualPivotPythonBase));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DualPivotPythonBase));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_120), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__DualPivotPythonBase);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__DualPivotPythonBase);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DualPivotPythonBase, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":23
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase
 * from CyLP.py.pivots import DualPivotPythonBase
 * from CyLP.py.modeling.CyLPModel import CyLPModel             # <<<<<<<<<<<<<<
 * from CyLP.cy cimport CyCoinMpsIO
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPModel));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPModel));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s_58), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__CyLPModel);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__CyLPModel);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPModel, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":26
 * from CyLP.cy cimport CyCoinMpsIO
 * 
 * problemStatus = ['optimal', 'primal infeasible', 'dual infeasible',             # <<<<<<<<<<<<<<
 *                 'stopped on iterations or time',
 *                 'stopped due to errors',
 */
  __pyx_t_1 = PyList_New(6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__optimal));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__optimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__optimal));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_121));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_kp_s_121));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_121));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_122));
  PyList_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_kp_s_122));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_122));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_123));
  PyList_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_kp_s_123));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_123));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_124));
  PyList_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_kp_s_124));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_124));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_125));
  PyList_SET_ITEM(__pyx_t_1, 5, ((PyObject *)__pyx_kp_s_125));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_125));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__problemStatus, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":32
 *                                     'ClpEventHandler::event())']
 * 
 * CLP_variableStatusEnum = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05]             # <<<<<<<<<<<<<<
 * StatusToInt = {'free' : 0, 'basic' : 1, 'atUpperBound' : 2,
 *                              'atLowerBound' : 3, 'superBasic' : 4,'fixed' : 5}
 */
  __pyx_t_1 = PyList_New(6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __Pyx_INCREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __Pyx_INCREF(__pyx_int_3);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  __Pyx_INCREF(__pyx_int_4);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  __Pyx_INCREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_13, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":33
 * 
 * CLP_variableStatusEnum = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05]
 * StatusToInt = {'free' : 0, 'basic' : 1, 'atUpperBound' : 2,             # <<<<<<<<<<<<<<
 *                              'atLowerBound' : 3, 'superBasic' : 4,'fixed' : 5}
 * IntToStatus = ['free', 'basic', 'atUpperBound',
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__free), __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__basic), __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__atUpperBound), __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__atLowerBound), __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__superBasic), __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__fixed), __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__StatusToInt, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":35
 * StatusToInt = {'free' : 0, 'basic' : 1, 'atUpperBound' : 2,
 *                              'atLowerBound' : 3, 'superBasic' : 4,'fixed' : 5}
 * IntToStatus = ['free', 'basic', 'atUpperBound',             # <<<<<<<<<<<<<<
 *                              'atLowerBound', 'superBasic','fixed']
 * 
 */
  __pyx_t_1 = PyList_New(6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__free));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__free));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__free));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__basic));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__basic));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__basic));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__atUpperBound));
  PyList_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_n_s__atUpperBound));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__atUpperBound));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__atLowerBound));
  PyList_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_n_s__atLowerBound));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__atLowerBound));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__superBasic));
  PyList_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_n_s__superBasic));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__superBasic));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__fixed));
  PyList_SET_ITEM(__pyx_t_1, 5, ((PyObject *)__pyx_n_s__fixed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__fixed));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__IntToStatus, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":38
 *                              'atLowerBound', 'superBasic','fixed']
 * 
 * startFinishOptionsDic = {'x' : 1,  #do not delete work areas             # <<<<<<<<<<<<<<
 *                       'f' : 2, #use old factorization
 *                       's' : 4} #skip initialization of work areas
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__x), __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__f), __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__s), __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_40, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1181
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def addVariable(self, varname, dim, isInt=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Add variable ``var`` to the problem.
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_28 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1330
 *             #return ret
 * 
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):             # <<<<<<<<<<<<<<
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_38 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_39 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1553
 *         self.CppSelf.copyInIntegerInformation(<char*>colType.data)
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):             # <<<<<<<<<<<<<<
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)
 * 
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_43 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1559
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)
 * 
 *     def preSolve(self, feasibilityTolerance=0.0,             # <<<<<<<<<<<<<<
 *                  keepIntegers=0, numberPasses=5,
 *                  dropNames=0, doRowObjective=0):
 */
  __pyx_t_1 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_45 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1870
 *                  np.ndarray[np.double_t, ndim=1] rowlb,
 *                  np.ndarray[np.double_t, ndim=1] rowub,
 *                  np.ndarray[np.double_t, ndim=1] rowObjective=np.array([])):             # <<<<<<<<<<<<<<
 *         cdef double* rd
 *         if len(rowObjective) == 0:
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_57 = ((PyArrayObject *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1903
 * 
 * 
 * def getModelExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return a model example to be used in doctests.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4CyLP_2cy_12CyClpSimplex_1getModelExample, NULL, __pyx_n_s_129); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__getModelExample, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1937
 * 
 * 
 * def getMpsExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return full path to an MPS example file for doctests
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4CyLP_2cy_12CyClpSimplex_5getMpsExample, NULL, __pyx_n_s_129); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__getMpsExample, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1958
 * 
 * cdef class VarStatus:
 *     free = 0             # <<<<<<<<<<<<<<
 *     basic = 1
 *     atUpperBound = 2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__free, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1959
 * cdef class VarStatus:
 *     free = 0
 *     basic = 1             # <<<<<<<<<<<<<<
 *     atUpperBound = 2
 *     atLowerBound = 3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__basic, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1960
 *     free = 0
 *     basic = 1
 *     atUpperBound = 2             # <<<<<<<<<<<<<<
 *     atLowerBound = 3
 *     superBasic = 4
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__atUpperBound, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1961
 *     basic = 1
 *     atUpperBound = 2
 *     atLowerBound = 3             # <<<<<<<<<<<<<<
 *     superBasic = 4
 *     fixed = 5
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__atLowerBound, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1962
 *     atUpperBound = 2
 *     atLowerBound = 3
 *     superBasic = 4             # <<<<<<<<<<<<<<
 *     fixed = 5
 *     status_ = np.array([free,
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__superBasic, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1963
 *     atLowerBound = 3
 *     superBasic = 4
 *     fixed = 5             # <<<<<<<<<<<<<<
 *     status_ = np.array([free,
 *                         basic,
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__fixed, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1964
 *     superBasic = 4
 *     fixed = 5
 *     status_ = np.array([free,             # <<<<<<<<<<<<<<
 *                         basic,
 *                         atUpperBound,
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__free); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":1965
 *     fixed = 5
 *     status_ = np.array([free,
 *                         basic,             # <<<<<<<<<<<<<<
 *                         atUpperBound,
 *                         atLowerBound,
 */
  __pyx_t_2 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__basic); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "CyLP/cy/CyClpSimplex.pyx":1966
 *     status_ = np.array([free,
 *                         basic,
 *                         atUpperBound,             # <<<<<<<<<<<<<<
 *                         atLowerBound,
 *                         superBasic,
 */
  __pyx_t_4 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__atUpperBound); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "CyLP/cy/CyClpSimplex.pyx":1967
 *                         basic,
 *                         atUpperBound,
 *                         atLowerBound,             # <<<<<<<<<<<<<<
 *                         superBasic,
 *                         fixed])
 */
  __pyx_t_5 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__atLowerBound); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "CyLP/cy/CyClpSimplex.pyx":1968
 *                         atUpperBound,
 *                         atLowerBound,
 *                         superBasic,             # <<<<<<<<<<<<<<
 *                         fixed])
 */
  __pyx_t_6 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__superBasic); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "CyLP/cy/CyClpSimplex.pyx":1969
 *                         atLowerBound,
 *                         superBasic,
 *                         fixed])             # <<<<<<<<<<<<<<
 */
  __pyx_t_7 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__fixed); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyList_New(6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_t_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
  __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__status_, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1
 * # cython: profile=True             # <<<<<<<<<<<<<<
 * # cython: embedsignature=True
 * 
 */
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_132), ((PyObject *)__pyx_kp_u_133)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_134), ((PyObject *)__pyx_kp_u_135)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_136), ((PyObject *)__pyx_kp_u_137)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_138), ((PyObject *)__pyx_kp_u_139)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_140), ((PyObject *)__pyx_kp_u_141)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_142), ((PyObject *)__pyx_kp_u_143)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_144), ((PyObject *)__pyx_kp_u_145)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_8, ((PyObject *)__pyx_kp_u_146), ((PyObject *)__pyx_kp_u_147)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_8)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;

  /* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  if (__pyx_m) {
    __Pyx_AddTraceback("init CyLP.cy.CyClpSimplex", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init CyLP.cy.CyClpSimplex");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            PyThreadState_GET(),            /*PyThreadState *tstate*/
            *code,                          /*PyCodeObject *code*/
            PyModule_GetDict(__pyx_m),      /*PyObject *globals*/
            0                               /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
    }
    else {
        (*frame)->f_tstate = PyThreadState_GET();
    }
    return PyThreadState_GET()->c_profilefunc(PyThreadState_GET()->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,                /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,                /*int kwonlyargcount,*/
        #endif
        0,                /*int nlocals,*/
        0,                /*int stacksize,*/
        0,                /*int flags,*/
        __pyx_empty_bytes,  /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,      /*int firstlineno,*/
        __pyx_empty_bytes   /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif /* CYTHON_PROFILE */

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        }
        else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause && cause != Py_None) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1) /* First char was not a digit */
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count; /* Consume from buffer string */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        if (isspace(*ts))
            continue;
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
                return ts;
      case ' ':
      case 10:
      case 13:
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }        /* fall through */
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 's': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
        } else {
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_count = ctx->new_count;
          ctx->enc_packmode = ctx->new_packmode;
          ctx->enc_type = *ts;
          ctx->is_complex = got_Z;
        }
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (DECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                /* try package relative import first */
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name) {
#if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_ImportError, "cannot import name %.230s",
                 PyString_AsString(name));
#else
    PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
#endif
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    CYTHON_UNUSED PyObject *getbuffer_cobj;
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict &&
        (getbuffer_cobj = PyMapping_GetItemString(obj->ob_type->tp_dict,
                                             "__pyx_getbuffer"))) {
        getbufferproc func;
      #if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION == 0)
        func = (getbufferproc) PyCapsule_GetPointer(getbuffer_cobj, "getbuffer(obj, view, flags)");
      #else
        func = (getbufferproc) PyCObject_AsVoidPtr(getbuffer_cobj);
      #endif
        Py_DECREF(getbuffer_cobj);
        if (!func)
            goto fail;
        return func(obj, view, flags);
    } else {
        PyErr_Clear();
    }
  #endif
    PyErr_Format(PyExc_TypeError, "'%100s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    CYTHON_UNUSED PyObject *releasebuffer_cobj;
    if (!obj) return;
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict &&
        (releasebuffer_cobj = PyMapping_GetItemString(obj->ob_type->tp_dict,
                                                      "__pyx_releasebuffer"))) {
        releasebufferproc func;
      #if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION == 0)
        func = (releasebufferproc) PyCapsule_GetPointer(releasebuffer_cobj, "releasebuffer(obj, view)");
      #else
        func = (releasebufferproc) PyCObject_AsVoidPtr(releasebuffer_cobj);
      #endif
        Py_DECREF(releasebuffer_cobj);
        if (!func)
            goto fail;
        func(obj, view);
        return;
    } else {
        PyErr_Clear();
    }
  #endif
    goto nofail;
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    PyErr_WriteUnraisable(obj);
nofail:
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif /*  PY_MAJOR_VERSION < 3 */


    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && (size_t)((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyMapping_GetItemString(dict, (char *)"__pyx_vtable__");
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
